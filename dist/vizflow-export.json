{"version":"2.12.0-alpha.1","schemaVersion":2,"projects":"a placeholder to prevent being imported to old versions (<= 2.10.0)","data":{"projects":[{"color":"#fada02","dateCreated":"2018-11-28T01:16:02.063Z","id":"b8a4551d-cca5-4d62-855a-aa705237be5f","lastUpdated":"2019-01-24T23:09:55.028Z","name":"TechViz 2.7.0","queueMappings":{"4d83bb5d-9079-4179-9e59-4ba414719725":{"mapping":{"{{payload.routingKey}}":["event.aggregate","event.card","event.close","task.create","event.regular"]},"version":18}},"version":2}],"flows":[{"dateCreated":"2017-11-26T21:17:26.615Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    _id as _ID\nfrom ve_vw_tv_task\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\nand taskstatusid not in (12, 13)\nand machineid = '{{payload.event.mnum}}'\nand siteid = '{{payload.siteID}}'\nand tasktypeid = 2\nand taskreset is null\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select jackpot tasks","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.reset","routingKeyPattern":"event.reset"},"name":"From event.reset","type":"rabbitmq-consumer"},"rabbitmq-producer5":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":0},"name":"To task.update","type":"rabbitmq-producer"},"transform3":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    return newPayload;\n})();","variables":""},"name":"Tidy","type":"transform"},"transform4":{"config":{"expression":"(function() {\n    payload.task.newTaskReset = payload.event.date;\n    payload.flag = \"UPDATE\";\n    return payload;\n})();","variables":""},"name":"Prepare","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"db-ms-sql2"},{"from":"db-ms-sql2","to":"transform3"},{"from":"transform3","to":"transform4"},{"from":"transform4","to":"rabbitmq-producer5"}]},"description":"<div><!--block-->event.reset ==&gt; task.update</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":4}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.reset","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.reset","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From event.reset","outputConnectors":[{"name":"Out"}],"width":175,"x":-429.9122009277344,"y":298.44818115234375},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    _id as _ID\nfrom ve_vw_tv_task\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\nand taskstatusid not in (12, 13)\nand machineid = '{{payload.event.mnum}}'\nand siteid = '{{payload.siteID}}'\nand tasktypeid = 2\nand taskreset is null\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":""}],"name":"Select jackpot tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-217.5830307006836,"y":301.5779113769531},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":3,"inputConnectors":[{"name":""}],"name":"Tidy","outputConnectors":[{"name":"Out"}],"width":175,"x":13.999984741210938,"y":301.53466796875},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    payload.task.newTaskReset = payload.event.date;\n    payload.flag = \"UPDATE\";\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":4,"inputConnectors":[{"name":""}],"name":"Prepare","outputConnectors":[{"name":"Out"}],"width":175,"x":225.9776840209961,"y":301.53466796875},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":5,"inputConnectors":[{"name":""}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":437.3068542480469,"y":302.6905975341797}],"viewBox":[168,135,1,582]},"id":"29d88032-a26d-4cce-9c25-190a7c1648ec","lastUpdated":"2018-11-28T01:31:01.941Z","name":"02-04 Reset Event","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":9},{"dateCreated":"2018-04-16T03:54:54.048Z","definition":{"components":{"branch13":{"config":{"expression":"(function() {\r\n    if (payload.task.escalationPath === 3) {\r\n        payload.flag = \"TECH_ESC\";\r\n        return [payload, payload];\r\n    }\r\n    if (payload.task.escalationPath === 2) {\r\n        var event = {};\r\n        event.location = payload.task.location;\r\n        event.taskTypeID = payload.task.escalationTypeID;\r\n        event.mnum = payload.task.machineID;\r\n        event.eventCode1 = null;\r\n        event.eventCode2 = null;\r\n        event.description = payload.task.eventDesc;\r\n        event.note = payload.task.taskNote;\r\n        event.dueDate = null;\r\n        event.createdByUserID = payload.task.userID;\r\n        \r\n        payload.event = event;\r\n        payload.flag = \"WORK_ORDER_ESC\";\r\n        return [payload, payload];\r\n    }\r\n    if (payload.task.escalationPath === 4) {\r\n        payload.flag = \"JP_VERIFIER\";\r\n        return [payload, payload];\r\n    }\r\n})();","outputs":2,"variables":""},"name":"Complete and create","type":"branch"},"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Escalate_To_Attendant_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"db-ms-sql12":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    _ID\n    ,isTechTask\n    ,location\n    ,taskTypeID\n    ,userID\n    ,taskNote\n    ,eventCode1\n    ,eventCode2\n    ,eventDesc\n    ,amount\n    ,machineID\n    ,siteID\n    ,taskStatusID\n    ,escalationTypeID\n    ,escalationPath\n    ,playerID\nfrom ve_vw_tv_task\nwhere taskstatusid = 5 and escalationpath is not null","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select escalations","type":"db-ms-sql"},"rabbitmq-producer14":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.create","ttl":0},"name":"To task.create","type":"rabbitmq-producer"},"rabbitmq-producer15":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":0},"name":"To task.update","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":3000},"name":"3 seconds","type":"time"},"transform11":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform16":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    newPayload.siteID = newPayload.task.siteID;\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"}},"links":[{"from":"db-ms-sql10","to":"transform11"},{"from":"transform11","to":"db-ms-sql12"},{"from":"branch13:1","to":"rabbitmq-producer14"},{"from":"branch13:0","to":"rabbitmq-producer15"},{"from":"db-ms-sql12","to":"transform16"},{"from":"transform16","to":"branch13"},{"from":"time1","to":"db-ms-sql10"}]},"description":"<div><!--block-->==&gt; task.update, task.create</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":12},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":14},"source":{"connectorIndex":1,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":15},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":16},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":1}}],"nodes":[{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":3000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"3 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-1337.6158447265625,"y":247.8114013671875},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Escalate_To_Attendant_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-1113.4377059936523,"y":247.5987091064453},{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\r\n    if (payload.task.escalationPath === 3) {\r\n        payload.flag = \"TECH_ESC\";\r\n        return [payload, payload];\r\n    }\r\n    if (payload.task.escalationPath === 2) {\r\n        var event = {};\r\n        event.location = payload.task.location;\r\n        event.taskTypeID = payload.task.escalationTypeID;\r\n        event.mnum = payload.task.machineID;\r\n        event.eventCode1 = null;\r\n        event.eventCode2 = null;\r\n        event.description = payload.task.eventDesc;\r\n        event.note = payload.task.taskNote;\r\n        event.dueDate = null;\r\n        event.createdByUserID = payload.task.userID;\r\n        \r\n        payload.event = event;\r\n        payload.flag = \"WORK_ORDER_ESC\";\r\n        return [payload, payload];\r\n    }\r\n    if (payload.task.escalationPath === 4) {\r\n        payload.flag = \"JP_VERIFIER\";\r\n        return [payload, payload];\r\n    }\r\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":13,"inputConnectors":[{"name":""}],"name":"Complete and create","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":-191.9414529800415,"y":236.09779357910156},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":15,"inputConnectors":[{"name":""}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":34.464942932128906,"y":193.19080352783203},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.create","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":14,"inputConnectors":[{"name":""}],"name":"To task.create","outputConnectors":[{"name":"Out"}],"width":175,"x":33.56401062011719,"y":308.74720764160156},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    _ID\n    ,isTechTask\n    ,location\n    ,taskTypeID\n    ,userID\n    ,taskNote\n    ,eventCode1\n    ,eventCode2\n    ,eventDesc\n    ,amount\n    ,machineID\n    ,siteID\n    ,taskStatusID\n    ,escalationTypeID\n    ,escalationPath\n    ,playerID\nfrom ve_vw_tv_task\nwhere taskstatusid = 5 and escalationpath is not null","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":12,"inputConnectors":[{"name":""}],"name":"Select escalations","outputConnectors":[{"name":"Out"}],"width":175,"x":-665.1207122802734,"y":239.80543518066406},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":11,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-887.7777862548828,"y":245.46812057495117},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    newPayload.siteID = newPayload.task.siteID;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":16,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-425.2016830444336,"y":242.57028198242188}],"viewBox":[-228,75,1,662]},"id":"089404f4-baa1-4055-9ca8-67753c52d3e6","lastUpdated":"2018-11-28T02:45:53.168Z","name":"08-00 Task Escalation","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":9},{"dateCreated":"2019-02-18T22:52:33.934Z","definition":{"components":{"branch5":{"config":{"errorHandling":"","expression":"(function() {\n\tif (payload.reservationStatusId === 0) {\n\t    return [payload, null];\n\t}\n\tif (payload.reservationStatusId === 1) {\n\t    return [null, payload];\n\t}\n\treturn [null, null];\n})();","globalFunctionConfiguration":[],"outputs":2,"variables":""},"name":"Open or close?","type":"branch"},"db-ms-sql3":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"insert into ve_tv_machineReservation (\n\t_id\n\t,_version\n\t,location\n\t,userId\n\t,playerId\n\t,reservationTime\n\t,reservationStatusId\n\t,siteId\n) values (\n\tnewId()\n\t,0\n\t,'{{payload.standId}}'\n\t,'{{payload.userId}}'\n\t,'{{payload.playerId}}'\n\t,'{{payload.reservationTimeId}}'\n\t,'{{payload.reservationStatusId}}'\n    ,'{{payload.siteId}}'\n)","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Open reservation","type":"db-ms-sql"},"db-ms-sql6":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_machineReservation\nset reservationStatusId = 1\nwhere location = '{{payload.standId}}'\nand siteId = '{{payload.siteId}}'","expressionType":"","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Close reservation","type":"db-ms-sql"},"rabbitmq-consumer8":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"errorHandling":"","exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"mobile.reservation.update","routingKeyPattern":"mobile.reservation.update"},"name":"From mobile.reservation.update","type":"rabbitmq-consumer"},"rabbitmq-producer9":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.reservation.update.{{payload.deviceId}}","ttl":0},"name":"To mobile.reservation.update.{{payload.deviceId}}","type":"rabbitmq-producer"},"transform10":{"config":{"errorHandling":"","expression":"(function() {\n\tpayload.sentAt = new Date().toISOString();\n\treturn payload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add sentAt date","type":"transform"}},"links":[{"from":"branch5:0","to":"db-ms-sql3"},{"from":"branch5:1","to":"db-ms-sql6"},{"from":"rabbitmq-consumer8","to":"branch5"},{"from":"transform10","to":"rabbitmq-producer9"},{"from":"db-ms-sql6","to":"transform10"},{"from":"db-ms-sql3","to":"transform10"}]},"description":"<div><!--block-->Example message:<br><br>{<br>&nbsp;standId: '010203',<br>&nbsp;userId: 'someUser',<br>&nbsp;playerId: 123456,<br>&nbsp;reservationTimeId: 15,<br>&nbsp;reservationStatusId: 1,<br>&nbsp;siteId: 1<br>&nbsp;};</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":1,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":3}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_machineReservation\nset reservationStatusId = 1\nwhere location = '{{payload.standId}}'\nand siteId = '{{payload.siteId}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Close reservation","outputConnectors":[{"name":"Out"}],"width":175,"x":995.6906127929688,"y":293.03363037109375},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"insert into ve_tv_machineReservation (\n\t_id\n\t,_version\n\t,location\n\t,userId\n\t,playerId\n\t,reservationTime\n\t,reservationStatusId\n\t,siteId\n) values (\n\tnewId()\n\t,0\n\t,'{{payload.standId}}'\n\t,'{{payload.userId}}'\n\t,'{{payload.playerId}}'\n\t,'{{payload.reservationTimeId}}'\n\t,'{{payload.reservationStatusId}}'\n    ,'{{payload.siteId}}'\n)","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Open reservation","outputConnectors":[{"name":"Out"}],"width":175,"x":995.949462890625,"y":180.658203125},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output.\n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n\n**Using our available helpers Lodash, Moment and UUID**:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date.\n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want.\n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tif (payload.reservationStatusId === 0) {\n\t    return [payload, null];\n\t}\n\tif (payload.reservationStatusId === 1) {\n\t    return [null, payload];\n\t}\n\treturn [null, null];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":5,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Open or close?","outputConnectors":[{"name":"Out 1"},{"name":"Out 2"}],"width":175,"x":705.5213012695312,"y":226.56300354003906},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"mobile.reservation.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"mobile.reservation.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":8,"inputConnectors":[],"invalid":false,"name":"From mobile.reservation.update","outputConnectors":[{"name":"Out"}],"width":175,"x":471.2422790527344,"y":232.02651977539062},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.reservation.update.{{payload.deviceId}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":9,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.reservation.update.{{payload.deviceId}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1500.095947265625,"y":244.84591674804688},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tpayload.sentAt = new Date().toISOString();\n\treturn payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add sentAt date","outputConnectors":[{"name":"Out"}],"width":175,"x":1265.786376953125,"y":244.84591674804688}]},"id":"04c3fb23-92c0-4679-ade2-76782334c07f","lastUpdated":"2019-03-11T22:34:34.742Z","name":"M-08 Reservation Update","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":28},{"dateCreated":"2018-11-28T02:42:40.152Z","definition":{"components":{"branch7":{"config":{"expression":"(function() {\n    if (payload.event.actionTypeID === 5) {\n        return [payload, payload, null, null];\n    } else if (payload.event.actionTypeID === 11) {\n        return [null, payload, payload, null];\n    } else if (payload.event.actionTypeID === 12){\n        return [null, payload, null, payload];\n    } else if (payload.event.actionTypeID === 3) {\n        return [null, null, null, null];\n    }\n    return [null, payload, null, null];\n})();","globalFunctionConfiguration":[],"outputs":4,"variables":""},"name":"Create?","type":"branch"},"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"insert into ve_tv_techevent (\r\n\teventcode1\r\n\t,eventcode2\r\n\t,machineid\r\n\t,actiontypeid\r\n\t,tasktypeid\r\n\t,playerid\r\n\t,amount\r\n\t,location\r\n\t,eventdesc\r\n\t,transdate\r\n\t,staffid\r\n\t,loggedAt\r\n\t,siteid\r\n\t)\r\nvalues (\r\n\tnullif('{{payload.event.eventCode1}}', '')\r\n\t,coalesce(nullif('{{payload.event.eventCode2}}', ''), -1)\r\n\t,nullif('{{payload.event.mnum}}', '')\r\n\t,nullif('{{payload.event.actionTypeID}}', '')\r\n\t,nullif('{{payload.event.taskTypeID}}', '')\r\n\t,nullif('{{payload.event.playerID}}', '')\r\n\t,nullif('{{payload.event.amount}}', '')\r\n\t,nullif('{{payload.event.location}}', '')\r\n\t,nullif('{{payload.event.description}}', '')\r\n\t,nullif('{{payload.event.date}}', '')\r\n\t,nullif('{{payload.event.staffID}}', '')\r\n\t,getDate()\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t)","expressionType":"","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"event","split":false},"name":"Insert tech event","type":"db-ms-sql"},"db-ms-sql8":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    _id as _ID\r\nfrom ve_vw_tv_workorder\r\nwhere taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand eventcode1 = '{{payload.event.eventCode1}}'\r\nand coalesce(eventcode2, '') = '{{payload.event.eventCode2}}'\r\nand siteid = '{{payload.siteID}}'\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select work orders","type":"db-ms-sql"},"filter18":{"config":{"expression":"(function() {\n\treturn payload.count === 0\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter out if work order","type":"filter"},"rabbitmq-consumer2":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.aggregate","routingKeyPattern":"event.aggregate"},"name":"From event.aggregate","type":"rabbitmq-consumer"},"rabbitmq-producer10":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"event.aggregate.wo","ttl":0},"name":"To event.aggregate.wo","type":"rabbitmq-producer"},"rabbitmq-producer19":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"event.machineonline","ttl":1000},"name":"To event.machineonline","type":"rabbitmq-producer"},"rabbitmq-producer20":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"event.machineoffline","ttl":1000},"name":"To event.machineoffline","type":"rabbitmq-producer"},"rabbitmq-producer6":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"event.regular","ttl":0},"name":"To event.regular","type":"rabbitmq-producer"},"transform17":{"config":{"expression":"(function() {\n    return payload.__input;    \n})();","globalFunctionConfiguration":[],"variables":""},"name":"Tidy","type":"transform"}},"links":[{"from":"db-ms-sql4","to":"branch7"},{"from":"branch7:1","to":"db-ms-sql8"},{"from":"rabbitmq-consumer2","to":"db-ms-sql4"},{"from":"branch7:0","to":"rabbitmq-producer6"},{"from":"db-ms-sql8","to":"filter18"},{"from":"filter18","to":"transform17"},{"from":"transform17","to":"rabbitmq-producer10"},{"from":"branch7:2","to":"rabbitmq-producer19"},{"from":"branch7:3","to":"rabbitmq-producer20"}]},"description":"<div><!--block-->event.aggregate ==&gt; task.create, event.aggregate.wo</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":1,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":18},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":18}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":17}},{"dest":{"connectorIndex":0,"nodeID":19},"source":{"connectorIndex":2,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":20},"source":{"connectorIndex":3,"nodeID":7}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.aggregate","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.aggregate","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":2,"inputConnectors":[],"name":"From event.aggregate","outputConnectors":[{"name":"Out"}],"width":175,"x":-810.1657180786133,"y":278.62732696533203},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output. \n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n\n**Using our available helpers Lodash, Moment and UUID**: \n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date. \n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want. \n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n","name":"Branch","properties":[{"defaultValue":4,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    if (payload.event.actionTypeID === 5) {\n        return [payload, payload, null, null];\n    } else if (payload.event.actionTypeID === 11) {\n        return [null, payload, payload, null];\n    } else if (payload.event.actionTypeID === 12){\n        return [null, payload, null, payload];\n    } else if (payload.event.actionTypeID === 3) {\n        return [null, null, null, null];\n    }\n    return [null, payload, null, null];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":7,"inputConnectors":[{"name":""}],"name":"Create?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"},{"name":"Out:3"},{"name":"Out 4"}],"width":175,"x":-371.59324645996094,"y":276.495304107666},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"event","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"insert into ve_tv_techevent (\r\n\teventcode1\r\n\t,eventcode2\r\n\t,machineid\r\n\t,actiontypeid\r\n\t,tasktypeid\r\n\t,playerid\r\n\t,amount\r\n\t,location\r\n\t,eventdesc\r\n\t,transdate\r\n\t,staffid\r\n\t,loggedAt\r\n\t,siteid\r\n\t)\r\nvalues (\r\n\tnullif('{{payload.event.eventCode1}}', '')\r\n\t,coalesce(nullif('{{payload.event.eventCode2}}', ''), -1)\r\n\t,nullif('{{payload.event.mnum}}', '')\r\n\t,nullif('{{payload.event.actionTypeID}}', '')\r\n\t,nullif('{{payload.event.taskTypeID}}', '')\r\n\t,nullif('{{payload.event.playerID}}', '')\r\n\t,nullif('{{payload.event.amount}}', '')\r\n\t,nullif('{{payload.event.location}}', '')\r\n\t,nullif('{{payload.event.description}}', '')\r\n\t,nullif('{{payload.event.date}}', '')\r\n\t,nullif('{{payload.event.staffID}}', '')\r\n\t,getDate()\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t)","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":""}],"invalid":false,"name":"Insert tech event","outputConnectors":[{"name":"Out"}],"width":175,"x":-587.8567695617676,"y":279.14775466918945},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"event.aggregate.wo","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":10,"inputConnectors":[{"name":""}],"name":"To event.aggregate.wo","outputConnectors":[{"name":"Out"}],"width":175,"x":503.74329376220703,"y":298.90865325927734},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"event.regular","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":6,"inputConnectors":[{"name":""}],"name":"To event.regular","outputConnectors":[{"name":"Out"}],"width":175,"x":-129.2534870505333,"y":183.50246047973633},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    _id as _ID\r\nfrom ve_vw_tv_workorder\r\nwhere taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand eventcode1 = '{{payload.event.eventCode1}}'\r\nand coalesce(eventcode2, '') = '{{payload.event.eventCode2}}'\r\nand siteid = '{{payload.siteID}}'\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":8,"inputConnectors":[{"name":""}],"name":"Select work orders","outputConnectors":[{"name":"Out"}],"width":175,"x":-132.92331981658936,"y":297.7231788635254},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn payload.count === 0\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":18,"inputConnectors":[{"name":""}],"name":"Filter out if work order","outputConnectors":[{"name":"Out"}],"width":175,"x":83.0595760345459,"y":300.2839126586914},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.__input;    \n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":17,"inputConnectors":[{"name":""}],"name":"Tidy","outputConnectors":[{"name":"Out"}],"width":175,"x":297.77647972106934,"y":299.65299224853516},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"event.machineonline","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":1000,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":19,"inputConnectors":[{"name":""}],"name":"To event.machineonline","outputConnectors":[{"name":"Out"}],"width":175,"x":-131.2600683569908,"y":403.86173248291016},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"event.machineoffline","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":1000,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":20,"inputConnectors":[{"name":"In"}],"name":"To event.machineoffline","outputConnectors":[{"name":"Out"}],"width":175,"x":-126.34980010986328,"y":507.98809814453125}],"viewBox":[-62,45,1,822.8993530273438]},"id":"0eac3c8e-6081-4b94-b560-c6274252bdd4","lastUpdated":"2019-01-30T00:59:10.093Z","name":"05-01 Aggregate Event","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":3},{"dateCreated":"2019-01-25T00:30:36.104Z","definition":{"components":{"db-ms-sql6":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"date","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    e.uniqueId\r\n    ,e.date\r\n\t,e.transDate\r\n\t,e.mnum\r\n\t,e.eventCode1\r\n\t,e.eventCode2\r\n\t,e.description\r\n\t,e.amount\r\n\t,e.playerId\r\n\t,e.staffId\r\n\t,e.location\r\n\t,e.siteId\r\nfrom ve_vw_tv_event e\r\ninner join ve_tv_meal m with (noLock)\r\non e.mnum = m.machineId\r\nand e.siteId = m.siteId\r\nand m.isClosed = 0\r\nand m.startTime < e.date\r\nwhere e.machineAccess = 2\r\nand e.IsSubscribed = 1\r\nand date > dateadd(ss, -30, '{{delta}}')\r\norder by date","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select events","type":"db-ms-sql"},"rabbitmq-producer3":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.meal","ttl":0},"name":"To sql.meal","type":"rabbitmq-producer"},"time5":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 seconds","type":"time"},"transform2":{"config":{"expression":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\nupdate ve_tv_meal\nset\n    isClosed = 1\n    ,endTime = '${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,endEventId = '${payload.uniqueId}'\nwhere machineId = ${payload.mnum}\nand siteId = ${payload.siteId}\nand startTime < '${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\nand isClosed = 0;\n\ndelete ml\nfrom ve_tv_meallog ml with (nolock)\ninner join ve_tv_meal m with (nolock)\non ml.meal_id = m._id\nwhere m.isClosed = 1\nand m.endEventId =  '${payload.uniqueId}'\nand ml.transDate > m.endTime;\n`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add sql","type":"transform"}},"links":[{"from":"transform2","to":"rabbitmq-producer3"},{"from":"time5","to":"db-ms-sql6"},{"from":"db-ms-sql6","to":"transform2"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":6}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\nupdate ve_tv_meal\nset\n    isClosed = 1\n    ,endTime = '${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,endEventId = '${payload.uniqueId}'\nwhere machineId = ${payload.mnum}\nand siteId = ${payload.siteId}\nand startTime < '${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\nand isClosed = 0;\n\ndelete ml\nfrom ve_tv_meallog ml with (nolock)\ninner join ve_tv_meal m with (nolock)\non ml.meal_id = m._id\nwhere m.isClosed = 1\nand m.endEventId =  '${payload.uniqueId}'\nand ml.transDate > m.endTime;\n`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add sql","outputConnectors":[{"name":"Out"}],"width":175,"x":844.943359375,"y":203.69808959960938},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.meal","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.meal","outputConnectors":[{"name":"Out"}],"width":175,"x":1073.9716796875,"y":201.3490447998047},{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":5,"inputConnectors":[],"invalid":false,"name":"5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":386.478759765625,"y":201.52598571777344},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"date","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    e.uniqueId\r\n    ,e.date\r\n\t,e.transDate\r\n\t,e.mnum\r\n\t,e.eventCode1\r\n\t,e.eventCode2\r\n\t,e.description\r\n\t,e.amount\r\n\t,e.playerId\r\n\t,e.staffId\r\n\t,e.location\r\n\t,e.siteId\r\nfrom ve_vw_tv_event e\r\ninner join ve_tv_meal m with (noLock)\r\non e.mnum = m.machineId\r\nand e.siteId = m.siteId\r\nand m.isClosed = 0\r\nand m.startTime < e.date\r\nwhere e.machineAccess = 2\r\nand e.IsSubscribed = 1\r\nand date > dateadd(ss, -30, '{{delta}}')\r\norder by date","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select events","outputConnectors":[{"name":"Out"}],"width":175,"x":595.478759765625,"y":199.52598571777344}]},"id":"133deb52-063c-42b3-a39c-1bbfd24f8a06","lastUpdated":"2019-01-31T01:12:28.316Z","name":"04-02 MEAL - Close","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":9},{"dateCreated":"2019-07-26T00:58:54.867Z","definition":{"components":{"branch3":{"config":{"errorHandling":"","expression":"(function() {\n\treturn payload.count === 0 ? [payload.__input, null] : [null, payload.__input];\n})();","globalFunctionConfiguration":[],"outputs":2,"variables":""},"name":"Device exists?","type":"branch"},"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"select\n    DeviceID\nfrom ve_vw_tv_Device\nwhere DeviceID = '{{payload.deviceID}}'","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Check for device","type":"db-ms-sql"},"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"insert into ve_tv_Device (DeviceID, UserID, Model, OSName, OSVersion)\nvalues (\n    '{{payload.deviceID}}'\n    ,'{{payload.userID}}'\n    ,'{{payload.model}}'\n    ,'{{payload.OSName}}'\n    ,'{{payload.OSVersion}}'\n)","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Insert device","type":"db-ms-sql"},"db-ms-sql5":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_Device\nset UserID = '{{payload.userID}}'\nwhere DeviceID = '{{payload.deviceID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Update device","type":"db-ms-sql"},"db-ms-sql7":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"Update VE_TV_User\n\nSet ObjectID = '{{payload.deviceID}}' \nwhere UserID = '{{payload.userID}}'\n","expressionType":"","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Update User Table","type":"db-ms-sql"},"db-ms-sql8":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"Update VE_TV_User\n\nSet ObjectID = '{{payload.deviceID}}' \nwhere UserID = '{{payload.userID}}'\n","expressionType":"","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"MS SQL","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"errorHandling":"","exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"mobile.device.update","routingKeyPattern":"mobile.device.update"},"name":"From mobile.device.update","type":"rabbitmq-consumer"},"rabbitmq-producer6":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.device.update.{{payload.deviceID}}","ttl":0},"name":"To mobile.device.update.{{payload.deviceID}}","type":"rabbitmq-producer"}},"links":[{"from":"rabbitmq-consumer1","to":"db-ms-sql2"},{"from":"db-ms-sql2","to":"branch3"},{"from":"branch3:0","to":"db-ms-sql4"},{"from":"branch3:1","to":"db-ms-sql5"},{"from":"db-ms-sql5","to":"db-ms-sql8"},{"from":"db-ms-sql4","to":"db-ms-sql7"},{"from":"db-ms-sql7","to":"rabbitmq-producer6"},{"from":"db-ms-sql8","to":"rabbitmq-producer6"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->In:<ul><li><!--block-->mobile.device.update</li><li><pre><!--block-->{\n  deviceID,\n  userID,\n  model,\n  OSName,\n  OSVersion\n}</pre></li></ul></li></ul><div><!--block-->Notes</div><ul><li><!--block-->update ve_tv_device to either insert (deviceID, userID) row or update deviceID row with new user (this is a many-1 relationship)</li><li><!--block-->there may also be other device information to be logged</li><li><!--block-->will need to create device table</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":1,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":8}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"mobile.device.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"mobile.device.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"invalid":false,"name":"From mobile.device.update","outputConnectors":[{"name":"Out"}],"width":175,"x":362,"y":257},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    DeviceID\nfrom ve_vw_tv_Device\nwhere DeviceID = '{{payload.deviceID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Check for device","outputConnectors":[{"name":"Out"}],"width":175,"x":602,"y":254},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output.\n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n\n**Using our available helpers Lodash, Moment and UUID**:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date.\n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want.\n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn payload.count === 0 ? [payload.__input, null] : [null, payload.__input];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Device exists?","outputConnectors":[{"name":"Out 1"},{"name":"Out 2"}],"width":175,"x":821,"y":254},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"insert into ve_tv_Device (DeviceID, UserID, Model, OSName, OSVersion)\nvalues (\n    '{{payload.deviceID}}'\n    ,'{{payload.userID}}'\n    ,'{{payload.model}}'\n    ,'{{payload.OSName}}'\n    ,'{{payload.OSVersion}}'\n)","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Insert device","outputConnectors":[{"name":"Out"}],"width":175,"x":1051,"y":199},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_Device\nset UserID = '{{payload.userID}}'\nwhere DeviceID = '{{payload.deviceID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":5,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Update device","outputConnectors":[{"name":"Out"}],"width":175,"x":1059,"y":345},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.device.update.{{payload.deviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.device.update.{{payload.deviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1540,"y":261.5},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"Update VE_TV_User\n\nSet ObjectID = '{{payload.deviceID}}' \nwhere UserID = '{{payload.userID}}'\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":7,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Update User Table","outputConnectors":[{"name":"Out"}],"width":175,"x":1313.0078125,"y":177.5},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"Update VE_TV_User\n\nSet ObjectID = '{{payload.deviceID}}' \nwhere UserID = '{{payload.userID}}'\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":8,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"MS SQL","outputConnectors":[{"name":"Out"}],"width":175,"x":1307.0078125,"y":374.5}]},"id":"3f58b67b-7940-43a6-959b-6ea0a12f5061","lastUpdated":"2019-08-28T05:53:39.649Z","name":"M-01 Device Update","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":1},{"dateCreated":"2017-11-26T21:17:26.671Z","definition":{"components":{"branch6":{"config":{"expression":"(function() {\n    if (typeof payload.counter === \"undefined\") {\n        payload.counter = 1\n    } else {\n        payload.counter++;\n    }\n    if (!payload.ERROR) {\n        return [payload, null, null]        \n    }\n    if (payload.counter < variables.maxAttempts) {\n        return [null, payload, null];\n    }\n    return [null, null, payload];\n})();","outputs":3,"variables":"{\n    \"maxAttempts\": 2\n}\n\n"},"name":"Success?","type":"branch"},"log4":{"config":{"template":"Success: \"{{payload.email.subject}}\" to {{payload.email.to}}"},"name":"Success logged","type":"log"},"log5":{"config":{"template":"Failure: \"{{payload.email.subject}}\" to {{payload.email.to}}"},"name":"Failure logged","type":"log"},"mail-sender2":{"config":{"assetConfiguration":"","attachments":[],"connectionConfiguration":"a2736cb8-2cc0-4e2f-8680-67cbebe677df","continuesOnError":true,"from":"techViz@VizActionFactory.com","html":"","subject":"{{payload.email.subject}}","text":"{{payload.email.text}}","to":"{{payload.email.to}}"},"name":"Send email","type":"mail-sender"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"email.send","routingKeyPattern":"email.send"},"name":"From email.send","type":"rabbitmq-consumer"},"rabbitmq-producer3":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.send","ttl":0},"name":"To email.send","type":"rabbitmq-producer"}},"links":[{"from":"mail-sender2","to":"branch6"},{"from":"branch6:0","to":"log4"},{"from":"branch6:1","to":"rabbitmq-producer3"},{"from":"branch6:2","to":"log5"},{"from":"rabbitmq-consumer1","to":"mail-sender2"}]},"description":"<div><!--block-->email.send ==&gt; email.send</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":1,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":2,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Logging the data","name":"Logger","properties":[{"defaultValue":"Success: \"{{payload.email.subject}}\" to {{payload.email.to}}","description":"Template. Accepts expression like {{payload._ID}}","name":"template","type":"text"}],"type":"log"},"icon":"./assets/vizflow/components/log.svg","id":4,"inputConnectors":[{"name":""}],"name":"Success logged","outputConnectors":[{"name":"Out"}],"width":175,"x":284.0915298461914,"y":203.86617279052734},{"color":"#9ba8b0","component":{"description":"Logging the data","name":"Logger","properties":[{"defaultValue":"Failure: \"{{payload.email.subject}}\" to {{payload.email.to}}","description":"Template. Accepts expression like {{payload._ID}}","name":"template","type":"text"}],"type":"log"},"icon":"./assets/vizflow/components/log.svg","id":5,"inputConnectors":[{"name":""}],"name":"Failure logged","outputConnectors":[{"name":"Out"}],"width":175,"x":287.95072174072266,"y":425.63377380371094},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"email.send","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"email.send","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":-347.9014358520508,"y":298.21119689941406},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.send","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":3,"inputConnectors":[{"name":""}],"name":"To email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":287.3168640136719,"y":316.98594665527344},{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":3,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\n    if (typeof payload.counter === \"undefined\") {\n        payload.counter = 1\n    } else {\n        payload.counter++;\n    }\n    if (!payload.ERROR) {\n        return [payload, null, null]        \n    }\n    if (payload.counter < variables.maxAttempts) {\n        return [null, payload, null];\n    }\n    return [null, null, payload];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"{\n    \"maxAttempts\": 2\n}\n\n","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":6,"inputConnectors":[{"name":""}],"name":"Success?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"},{"name":"Out:3"}],"width":175,"x":65.12674713134766,"y":296.6689910888672},{"color":"#9ba8b0","component":{"metadata":"## Mail Sender\n\n### Connection\n> *Required* field with all connection related to the mail configuration the component will be using (e.g. SMTP server config)\n\n### Asset\n*Optional* field with all assets available. You can use this feature inside the **HTML Expression box**.\n\n\n### From\n> *Required* field Who will be the sender in the email.\n\n### to\n> *Required* field. The recipient(s) of this email. It is possible to comma-separate them so one email to many recipients\n\n> *Example*: <code>foo@email.com, bar@email.com</code>\n\n### Subject\n> *Optional* field. Text to be included as the mail's subject presented to the recipient.\n\n### Text\n> *Optional* field. Text to be added as the mail's body. **PS: HTML has precedence over the Text.**\n\n### HTML\n> *Optional* field. You can include any HTML tag here to have better presentation to the recipient. **HTML has precedence over the text.**\n\n#### Example using whatever values comes with the payload: \n```html\n<div>\n  <h1>{{payload.title}}</h1>  \n  <h2>{{payload.subTitle}}</h2>\n  <p>{{payload.bodyMessage}}</p>\n</div>\n```\n\n#### Example using an Asset-Type CSS:\n```html\n<html>\n  <head>\n     <style>\n      {{asset.style}}\n    </style>\n  </head>\n  <body>\n      <h1>{{payload.title}}</h1>\n  </body>\n</html>\n```\n\n#### Result from above example:\n```html\n<html>\n  <head>\n     <style type=\"text/css\">\n      .h1 {\n        color:red;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Foo Bar Title</h1>\n</body>\n</html>\n```\n\n## Asset access by type:\n1. CSS Type\n    1. <code>asset.style</code> \n2. HTML Type\n    2. <code>asset.html</code> \n\n### Continues on Error\nEven if the email fail for whatever reason(e.g the SMTP server is down) the flow should keep going and the payload will be passed to the next\ncomponent.\n\n### Attachments\n> *Optional field. You can include multiple attachments in an email.\n\n#### Email content can be string or Buffer.\n\n#### Each attachment has these three properties:\n\n  * dataPath\n    The attachment content from the payload. If it is empty, the whole input payload will be used as attachment content.\n\n    Example:\n\n    ```\n    {\n      email: {\n        content: 'This is the content of email',\n      }\n    }\n    ```\n    With the above input payload, we can specify `email.content` as the *dataPath* property, to generate attachment content from the payload.\n\n  * filename\n    Filename to be reported as the name of the attached file\n\n  * encoding\n    If the attachment content is string, then it encodes the content to a Buffer using the specified encoding.\n","name":"E-mail Sender","properties":[{"connectionType":"mail-smtp","defaultValue":"a2736cb8-2cc0-4e2f-8680-67cbebe677df","description":"Connection defined to access to an mail server using SMTP.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Asset to be used in the HTML Expression box. Optional","name":"assetConfiguration","type":"asset"},{"defaultValue":"techViz@VizActionFactory.com","description":"From","name":"from","type":"text","validators":{"required":true}},{"defaultValue":"{{payload.email.to}}","description":"To","name":"to","type":"text","validators":{"required":true}},{"defaultValue":"{{payload.email.subject}}","description":"Subject","name":"subject","type":"text"},{"defaultValue":"{{payload.email.text}}","description":"Text","name":"text","type":"textarea"},{"defaultValue":"","description":"HTML","name":"html","type":"html"},{"attributeModel":{"dataPath":"","encoding":"","filename":""},"defaultValue":[],"description":"Attachments to be sent in the mail","name":"attachments","title":"Attachments","type":"attributes"},{"defaultValue":true,"description":"Pass the payload through even getting an error","name":"continuesOnError","type":"boolean"}],"type":"mail-sender"},"icon":"./assets/vizflow/components/mail-sender.svg","id":2,"inputConnectors":[{"name":""}],"name":"Send email","outputConnectors":[{"name":"Out"}],"width":175,"x":-139.87325286865234,"y":299.6689910888672}],"viewBox":[6,60,1,732]},"id":"1dacda8c-d058-4104-9dbc-1f8282a30b23","lastUpdated":"2018-11-28T02:47:37.001Z","name":"10-02 Email Sender","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":4},{"dateCreated":"2019-01-25T00:47:10.647Z","definition":{"components":{"branch9":{"config":{"errorHandling":"","expression":"(function() {\n    if (payload.mealUserId === null && payload.userId !== null) {\n        return [payload, payload];\n    }\n\treturn [payload, null];\n})();","globalFunctionConfiguration":[],"outputs":2,"variables":""},"name":"Branch","type":"branch"},"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"date","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"select\n    e.date\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.staffId\n\t,e.mnum\n\t,e.description\n\t,e.siteId\n\t,e.uniqueId\n\t,m._id as mealId\n\t,m.note\n\t,m.staffId as mealStaffId\n\t,m.userId as mealUserId\n\t,u.userId\nfrom ve_vw_tv_event e\ninner join (\n\tselect\n\t\t*\n\tfrom ve_tv_meal ml with (nolock)\n\twhere ml.isClosed = 0\n\tor ml.startTime > dateAdd(hh, -1, getDate())\n) m\non e.mnum = m.machineId\nand e.siteId = m.siteId\nand e.date >= m.startTime\nand (e.date <= m.endTime or m.endTime is null)\nleft join ve_tv_mealLog ml with (nolock)\non cast(e.uniqueId as varchar(36)) = ml.eventId\nleft join ve_tv_user u with (noLock)\non e.staffId = u.staffId\nand e.siteId = u.siteId\nwhere ml.eventId is null\nand date > dateadd(ss, -30, getDate())\norder by date","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select events","type":"db-ms-sql"},"rabbitmq-producer8":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.meal","ttl":0},"name":"To sql.meal","type":"rabbitmq-producer"},"time1":{"config":{"errorHandling":"","format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":10000},"name":"10 seconds","type":"time"},"transform10":{"config":{"errorHandling":"","expression":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n    \treturn `\nupdate ve_tv_meal\nset\n    userId = ${payload.userId !== null ? \"'\" + payload.userId + \"'\" : null}\n    ,staffId = ${payload.staffId}\nwhere _id = '${payload.mealId}'\n`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Update user sql","type":"transform"},"transform4":{"config":{"errorHandling":"","expression":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: 10000000000000\n    };\n    return payload;\n    \n    function query(payload) {\n    \treturn `\ninsert into ve_tv_mealLog (\n    _id\n    ,_version\n    ,transDate\n    ,insertDate\n    ,eventCode1\n    ,eventCode2\n    ,staffId\n    ,meal_id\n    ,mnum\n    ,note\n    ,eventDesc\n    ,siteId\n    ,eventId\n) values (\n    newId()\n    ,0\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,current_timestamp\n    ,${payload.eventCode1}\n    ,${payload.eventCode2}\n    ,${payload.staffId}\n    ,'${payload.mealId}'\n    ,${payload.mnum}\n    ,${payload.note === null ? 'null' : '\\'' + payload.note + '\\''}\n    ,'${payload.description}'\n    ,${payload.siteId}\n    ,'${payload.uniqueId}'\n);`\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Insert sql","type":"transform"}},"links":[{"from":"time1","to":"db-ms-sql2"},{"from":"transform4","to":"rabbitmq-producer8"},{"from":"db-ms-sql2","to":"branch9"},{"from":"branch9:0","to":"transform4"},{"from":"branch9:1","to":"transform10"},{"from":"transform10","to":"rabbitmq-producer8"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":1,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":10}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":10000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"invalid":false,"name":"10 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":26.122421264648438,"y":255.9349365234375},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: 10000000000000\n    };\n    return payload;\n    \n    function query(payload) {\n    \treturn `\ninsert into ve_tv_mealLog (\n    _id\n    ,_version\n    ,transDate\n    ,insertDate\n    ,eventCode1\n    ,eventCode2\n    ,staffId\n    ,meal_id\n    ,mnum\n    ,note\n    ,eventDesc\n    ,siteId\n    ,eventId\n) values (\n    newId()\n    ,0\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,current_timestamp\n    ,${payload.eventCode1}\n    ,${payload.eventCode2}\n    ,${payload.staffId}\n    ,'${payload.mealId}'\n    ,${payload.mnum}\n    ,${payload.note === null ? 'null' : '\\'' + payload.note + '\\''}\n    ,'${payload.description}'\n    ,${payload.siteId}\n    ,'${payload.uniqueId}'\n);`\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Insert sql","outputConnectors":[{"name":"Out"}],"width":175,"x":683,"y":224},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.meal","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":8,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.meal","outputConnectors":[{"name":"Out"}],"width":175,"x":909.2222290039062,"y":262.75},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"date","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    e.date\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.staffId\n\t,e.mnum\n\t,e.description\n\t,e.siteId\n\t,e.uniqueId\n\t,m._id as mealId\n\t,m.note\n\t,m.staffId as mealStaffId\n\t,m.userId as mealUserId\n\t,u.userId\nfrom ve_vw_tv_event e\ninner join (\n\tselect\n\t\t*\n\tfrom ve_tv_meal ml with (nolock)\n\twhere ml.isClosed = 0\n\tor ml.startTime > dateAdd(hh, -1, getDate())\n) m\non e.mnum = m.machineId\nand e.siteId = m.siteId\nand e.date >= m.startTime\nand (e.date <= m.endTime or m.endTime is null)\nleft join ve_tv_mealLog ml with (nolock)\non cast(e.uniqueId as varchar(36)) = ml.eventId\nleft join ve_tv_user u with (noLock)\non e.staffId = u.staffId\nand e.siteId = u.siteId\nwhere ml.eventId is null\nand date > dateadd(ss, -30, getDate())\norder by date","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select events","outputConnectors":[{"name":"Out"}],"width":175,"x":246.05734252929688,"y":256.9349060058594},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output.\n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n\n**Using our available helpers Lodash, Moment and UUID**:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date.\n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want.\n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    if (payload.mealUserId === null && payload.userId !== null) {\n        return [payload, payload];\n    }\n\treturn [payload, null];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":9,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Branch","outputConnectors":[{"name":"Out 1"},{"name":"Out 2"}],"width":175,"x":450.6722717285156,"y":260.34246826171875},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n    \treturn `\nupdate ve_tv_meal\nset\n    userId = ${payload.userId !== null ? \"'\" + payload.userId + \"'\" : null}\n    ,staffId = ${payload.staffId}\nwhere _id = '${payload.mealId}'\n`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Update user sql","outputConnectors":[{"name":"Out"}],"width":175,"x":685.1723022460938,"y":329.6387023925781}]},"id":"1ea2167f-ca6d-4911-a138-2d3377ce402d","lastUpdated":"2019-03-17T20:40:38.604Z","name":"04-03 MEAL - Logger","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":33},{"dateCreated":"2018-11-27T04:11:35.203Z","definition":{"components":{"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"{{payload}}\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Run query","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{"count":1000,"timeSpan":1000},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":true,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"sql.techEvent","routingKeyPattern":"sql.techEvent"},"name":"From sql.techEvent","type":"rabbitmq-consumer"},"transform2":{"config":{"expression":"(function() {\n\tlet result = payload.sort(compareTime);\n\tresult = result.map(message => message.__sql.query);\n\tresult = result.join('\\n');\n\treturn result;\n\t\n\tfunction compareTime(messageA, messageB) {\n\t    return messageA.__sql.time - messageB.__sql.time;\n\t}\n})();","variables":""},"name":"Convert to sql","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"transform2"},{"from":"transform2","to":"db-ms-sql4"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"sql.techEvent","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"sql.techEvent","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":true,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{"count":1000,"timeSpan":1000},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"invalid":false,"name":"From sql.techEvent","outputConnectors":[{"name":"Out"}],"width":175,"x":574,"y":204},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n\tlet result = payload.sort(compareTime);\n\tresult = result.map(message => message.__sql.query);\n\tresult = result.join('\\n');\n\treturn result;\n\t\n\tfunction compareTime(messageA, messageB) {\n\t    return messageA.__sql.time - messageB.__sql.time;\n\t}\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Convert to sql","outputConnectors":[{"name":"Out"}],"width":175,"x":800.943359375,"y":204.6980743408203},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload}}\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Run query","outputConnectors":[{"name":"Out"}],"width":175,"x":1015.9716796875,"y":203.34906005859375}]},"id":"3453a44c-c04a-45a7-9078-3ad6eb45314a","lastUpdated":"2019-01-31T01:13:42.832Z","name":"99-03 SQL - Tech Event","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":7},{"dateCreated":"2017-12-18T01:53:22.800Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    name as name,\r\n    value as value,\r\n    escalate_supervisor as escalateSupervisor,\r\n    escalate_manager as escalateManager\r\nfrom ve_vw_tv_applicationPreference\r\nwhere name in (\r\n    'Viz_Machine_Offline_List_Email'\r\n    ,'Viz_Machine_Offline_List_Enabled'\r\n    ,'Viz_Machine_Offline_List_Start_Hour'\r\n    ,'Viz_Machine_Offline_List_End_Hour'\r\n    ,'Viz_Default_Tech_Task_Enabled'\r\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n\tmachineID\r\n\t,siteID\r\n\t,changedAt as offlineDate\r\nfrom ve_vw_tv_machineOffline\r\nwhere isOnline = 0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select offline machines","type":"db-ms-sql"},"filter9":{"config":{"expression":"(function() {\n    var hour = parseInt(payload.timestamp.substring(11, 13));\n\treturn payload.appPrefs.machineOfflineListEnabled.value == 1\n\t    && payload.appPrefs.machineOfflineListStartHour.value <= hour\n\t    && payload.appPrefs.machineOfflineListEndHour.value >= hour;\n})();","variables":""},"name":"Filter for enabled","type":"filter"},"rabbitmq-producer10":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.send","ttl":0},"name":"To email.send","type":"rabbitmq-producer"},"schedule16":{"config":{"cron":"0 * * * *"},"name":"Every hour","type":"schedule"},"transform3":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform6":{"config":{"expression":"(function() {\n    var newPayload = payload.__input;\n    newPayload.machineList = payload.data;\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"},"transform8":{"config":{"expression":"(function() {\n    function getText(machineList) {\n        var result = '';\n        for (var i = 0; i < machineList.length; i++) {\n            var m = machineList[i];\n            result += 'Machine ' + m.machineID + ' offline at ' + m.offlineDate + '\\r\\n';\n        }\n        return result;\n    }\n\n    var email = {};\n    email.to = payload.appPrefs.machineOfflineListEmail.value;\n    email.subject = 'Machines Offline: ' + payload.machineList.length;\n    email.text = getText(payload.machineList);\n    payload.email = email;\n    return payload;\n})();","variables":""},"name":"Add email","type":"transform"}},"links":[{"from":"db-ms-sql2","to":"transform3"},{"from":"transform3","to":"db-ms-sql4"},{"from":"db-ms-sql4","to":"transform6"},{"from":"transform6","to":"filter9"},{"from":"filter9","to":"transform8"},{"from":"transform8","to":"rabbitmq-producer10"},{"from":"schedule16","to":"db-ms-sql2"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":16}}],"nodes":[{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var newPayload = payload.__input;\n    newPayload.machineList = payload.data;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":"In"}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":984.5943603515625,"y":266.6680603027344},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":3,"inputConnectors":[{"name":"In"}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":547.6512451171875,"y":266.6679992675781},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    name as name,\r\n    value as value,\r\n    escalate_supervisor as escalateSupervisor,\r\n    escalate_manager as escalateManager\r\nfrom ve_vw_tv_applicationPreference\r\nwhere name in (\r\n    'Viz_Machine_Offline_List_Email'\r\n    ,'Viz_Machine_Offline_List_Enabled'\r\n    ,'Viz_Machine_Offline_List_Start_Hour'\r\n    ,'Viz_Machine_Offline_List_End_Hour'\r\n    ,'Viz_Default_Tech_Task_Enabled'\r\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":"In"}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":319.6015625,"y":264.8436279296875},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.send","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":10,"inputConnectors":[{"name":"In"}],"name":"To email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":1624.8548583984375,"y":271.2997131347656},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function getText(machineList) {\n        var result = '';\n        for (var i = 0; i < machineList.length; i++) {\n            var m = machineList[i];\n            result += 'Machine ' + m.machineID + ' offline at ' + m.offlineDate + '\\r\\n';\n        }\n        return result;\n    }\n\n    var email = {};\n    email.to = payload.appPrefs.machineOfflineListEmail.value;\n    email.subject = 'Machines Offline: ' + payload.machineList.length;\n    email.text = getText(payload.machineList);\n    payload.email = email;\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":8,"inputConnectors":[{"name":"In"}],"name":"Add email","outputConnectors":[{"name":"Out"}],"width":175,"x":1405.1177978515625,"y":270.31683349609375},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    var hour = parseInt(payload.timestamp.substring(11, 13));\n\treturn payload.appPrefs.machineOfflineListEnabled.value == 1\n\t    && payload.appPrefs.machineOfflineListStartHour.value <= hour\n\t    && payload.appPrefs.machineOfflineListEndHour.value >= hour;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":9,"inputConnectors":[{"name":"In"}],"name":"Filter for enabled","outputConnectors":[{"name":"Out"}],"width":175,"x":1194.39990234375,"y":268.49249267578125},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n\tmachineID\r\n\t,siteID\r\n\t,changedAt as offlineDate\r\nfrom ve_vw_tv_machineOffline\r\nwhere isOnline = 0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select offline machines","outputConnectors":[{"name":"Out"}],"width":175,"x":776.613037109375,"y":266.6679992675781},{"color":"#9ba8b0","component":{"metadata":"","name":"Scheduler","properties":[{"defaultValue":"0 * * * *","description":"Cron expression","name":"cron","type":"crontab"}],"type":"schedule"},"icon":"./assets/vizflow/components/schedule.svg","id":16,"inputConnectors":[],"invalid":false,"name":"Every hour","outputConnectors":[{"name":"Out"}],"width":175,"x":109.25224304199219,"y":262.0714416503906}]},"id":"0ffdc5c2-d7a3-41e1-a17d-33aa2964a00e","lastUpdated":"2019-01-17T03:52:12.317Z","name":"12-01 Machine Offline List Alert","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":14},{"dateCreated":"2019-01-25T01:27:30.144Z","definition":{"components":{"rabbitmq-producer3":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.machineActionLog","ttl":29000},"name":"To sql.machineActionLog","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":30000},"name":"30 seconds","type":"time"},"transform2":{"config":{"expression":"(function() {\n    const result = {};\n    result.__sql = {\n        query: query(),\n        time: 0\n    };\n    return result;\n    \n    function query() {\n        return `\ndelete from ve_tv_machineActionLog\nwhere actionAt < dateadd(hh, -1, current_timestamp)\nand machineActionId in (1, 2);\n`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add sql","type":"transform"}},"links":[{"from":"time1","to":"transform2"},{"from":"transform2","to":"rabbitmq-producer3"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":30000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"invalid":false,"name":"30 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":436,"y":319},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    const result = {};\n    result.__sql = {\n        query: query(),\n        time: 0\n    };\n    return result;\n    \n    function query() {\n        return `\ndelete from ve_tv_machineActionLog\nwhere actionAt < dateadd(hh, -1, current_timestamp)\nand machineActionId in (1, 2);\n`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add sql","outputConnectors":[{"name":"Out"}],"width":175,"x":656,"y":315},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.machineActionLog","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":29000,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.machineActionLog","outputConnectors":[{"name":"Out"}],"width":175,"x":879,"y":314}]},"id":"1378795f-6b3e-4ef4-9a71-fb29559cbd6e","lastUpdated":"2019-01-31T01:13:07.437Z","name":"15-02 Game In Action - Delete events","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":3},{"dateCreated":"2018-09-25T05:07:49.660Z","definition":{"components":{"branch15":{"config":{"expression":"(function() {\n    return [payload, payload];\n})();","outputs":2,"variables":""},"name":"Branch for corporate email","type":"branch"},"branch3":{"config":{"expression":"(function() {\n\treturn [payload, payload];\n})();","outputs":2,"variables":""},"name":"Send to GreetViz","type":"branch"},"filter17":{"config":{"expression":"(function() {\n\treturn payload.email.to !== null;\n})();","variables":""},"name":"Filter for email address","type":"filter"},"filter6":{"config":{"expression":"(function() {\n    return payload.event.amount >= payload.appPrefs.alertLargeJackpot.value;\n})();","variables":""},"name":"Large jackpot?","type":"filter"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.jackpot","routingKeyPattern":"event.jackpot"},"name":"In event.jackpot","type":"rabbitmq-consumer"},"rabbitmq-producer4":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techviz.Jackpot","exchangeType":"topic","persistentMessage":true,"routingKey":"vizFlow","ttl":0},"name":"To techviz.Jackpot (GreetViz)","type":"rabbitmq-producer"},"rabbitmq-producer7":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.send","ttl":0},"name":"To email.send","type":"rabbitmq-producer"},"transform12":{"config":{"expression":"(function() {\n\temail = {}\n\temail.to = payload.appPrefs.alertLargeJackpotCorporateEmail.value;\n\temail.subject = `$${payload.event.amount} Jackpot @ ${payload.event.location}, Property: ${payload.event.siteDescription}`;\n\temail.text = `$${payload.event.amount} @ ${payload.event.location}, Property: ${payload.event.siteDescription}\nEvent Description: ${payload.event.description}`;\n\tpayload.email = email;\n\treturn payload;\n})();","variables":""},"name":"Add corporate email","type":"transform"},"transform16":{"config":{"expression":"(function() {\n    let propertyEmails = JSON.parse(payload.appPrefs.alertLargeJackpotPropertyEmails.value);\n    \n\temail = {}\n\temail.to = propertyEmails[payload.event.siteID];\n\temail.subject = `$${payload.event.amount} Jackpot @ ${payload.event.location}`;\n\temail.text = `$${payload.event.amount} @ ${payload.event.location}\nEvent Description: ${payload.event.description}`;\n\tpayload.email = email;\n\treturn payload;\n})();","variables":""},"name":"Add property email","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"branch3"},{"from":"branch3:1","to":"rabbitmq-producer4"},{"from":"branch3:0","to":"filter6"},{"from":"filter6","to":"branch15"},{"from":"branch15:0","to":"transform12"},{"from":"branch15:1","to":"transform16"},{"from":"transform16","to":"filter17"},{"from":"transform12","to":"filter17"},{"from":"filter17","to":"rabbitmq-producer7"}]},"description":"<div><!--block-->event.jackpot ==&gt; techviz.Jackpot (greetViz), email.send</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":1,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":15},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":12},"source":{"connectorIndex":0,"nodeID":15}},{"dest":{"connectorIndex":0,"nodeID":16},"source":{"connectorIndex":1,"nodeID":15}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":17}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\n\treturn [payload, payload];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":3,"inputConnectors":[{"name":""}],"name":"Send to GreetViz","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":-565.819940328598,"y":299.7046356201172},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techviz.Jackpot","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"vizFlow","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":4,"inputConnectors":[{"name":""}],"name":"To techviz.Jackpot (GreetViz)","outputConnectors":[{"name":"Out"}],"width":175,"x":-331.65351724624634,"y":381.4183654785156},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.jackpot","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.jackpot","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"In event.jackpot","outputConnectors":[{"name":"Out"}],"width":175,"x":-791.8521041870117,"y":302.2611846923828},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.send","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":7,"inputConnectors":[{"name":""}],"name":"To email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":694.1605987548828,"y":249.9400177001953},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    return payload.event.amount >= payload.appPrefs.alertLargeJackpot.value;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":6,"inputConnectors":[{"name":""}],"name":"Large jackpot?","outputConnectors":[{"name":"Out"}],"width":175,"x":-329.44499588012695,"y":262.7695007324219},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    let propertyEmails = JSON.parse(payload.appPrefs.alertLargeJackpotPropertyEmails.value);\n    \n\temail = {}\n\temail.to = propertyEmails[payload.event.siteID];\n\temail.subject = `$${payload.event.amount} Jackpot @ ${payload.event.location}`;\n\temail.text = `$${payload.event.amount} @ ${payload.event.location}\nEvent Description: ${payload.event.description}`;\n\tpayload.email = email;\n\treturn payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":16,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add property email","outputConnectors":[{"name":"Out"}],"width":175,"x":196.68260192871094,"y":334.2019348144531},{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\n    return [payload, payload];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":15,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Branch for corporate email","outputConnectors":[{"name":"Out 1"},{"name":"Out 2"}],"width":175,"x":-122.40628719329834,"y":263.1204833984375},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n\temail = {}\n\temail.to = payload.appPrefs.alertLargeJackpotCorporateEmail.value;\n\temail.subject = `$${payload.event.amount} Jackpot @ ${payload.event.location}, Property: ${payload.event.siteDescription}`;\n\temail.text = `$${payload.event.amount} @ ${payload.event.location}, Property: ${payload.event.siteDescription}\nEvent Description: ${payload.event.description}`;\n\tpayload.email = email;\n\treturn payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":12,"inputConnectors":[{"name":""}],"invalid":false,"name":"Add corporate email","outputConnectors":[{"name":"Out"}],"width":175,"x":197.6065034866333,"y":213.18401336669922},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n\treturn payload.email.to !== null;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":17,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Filter for email address","outputConnectors":[{"name":"Out"}],"width":175,"x":462.76611328125,"y":250.02061462402344}],"viewBox":[-94,-15,1,987.34375]},"id":"9ef1c0dd-42b8-49af-af0c-b0a7be01264d","lastUpdated":"2019-01-31T01:12:41.503Z","name":"09-08 Jackpot Alerts","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":27},{"dateCreated":"2017-11-26T21:17:26.606Z","definition":{"components":{"db-ms-sql11":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"update ve_tv_machinereservation\nset overdue = '{{payload.reservation.newOverdue}}'\nwhere _id = '{{payload.reservation._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Update reservation","type":"db-ms-sql"},"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    _ID\n    ,overdue\n    ,reservationTime * 60 as reservationSecs\n    ,datediff(ss, starttime, current_timestamp) as elapsedTime\n    ,location\n    ,siteID\nfrom ve_tv_machinereservation\nwhere reservationstatusid = 0\nand current_timestamp > endtime\n\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select reservations","type":"db-ms-sql"},"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n   'Viz_Alert_Machine_Reservation',\n   'Viz_Alert_Machine_Reservation_Enabled',\n   'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"filter13":{"config":{"expression":"(function() {\n\treturn payload.reservation.newOverdue > 1;\n})();","variables":""},"name":"Filter for overdue > 1","type":"filter"},"filter17":{"config":{"expression":"(function() {\n\treturn payload.reservation.newOverdue !== null;\n})();","variables":""},"name":"Filter for new overdue","type":"filter"},"rabbitmq-producer10":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.handle","ttl":0},"name":"To email.handle","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 seconds","type":"time"},"transform15":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.reservation = tidy(payload);\n    newPayload.siteID = payload.siteID;\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"},"transform5":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform6":{"config":{"expression":"function() {\n    function getNewOverdue(reservation, alert) {\n\t\tif (reservation.overdue === 0\n\t\t    && reservation.elapsedTime > (parseInt(alert.value) + reservation.reservationSecs)) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (reservation.overdue === 1 \n\t\t    && reservation.elapsedTime > (alert.escalateSupervisor + reservation.reservationSecs)) {\n\t\t\treturn 2;\n\t\t}\n\t\tif (reservation.overdue === 2 \n\t\t    && reservation.elapsedTime > (alert.escalateManager + reservation.reservationSecs)) {\n\t\t\treturn 3;\n\t\t}\n\t\treturn null;\n    }\n    \n    payload.reservation.newOverdue = getNewOverdue(payload.reservation, payload.appPrefs.alertMachineReservation);\n    return payload;\n}","variables":""},"name":"Add new overdue value","type":"transform"},"transform9":{"config":{"expression":"function() {\n    payload.flag = \"RESERVATION\";\n    return payload;\n}","variables":""},"name":"Set flag","type":"transform"}},"links":[{"from":"time1","to":"db-ms-sql4"},{"from":"db-ms-sql4","to":"transform5"},{"from":"transform5","to":"db-ms-sql2"},{"from":"transform9","to":"rabbitmq-producer10"},{"from":"db-ms-sql11","to":"filter13"},{"from":"filter13","to":"transform9"},{"from":"db-ms-sql2","to":"transform15"},{"from":"transform15","to":"transform6"},{"from":"transform6","to":"filter17"},{"from":"filter17","to":"db-ms-sql11"}]},"description":"<div><!--block-->==&gt; email.handle</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":15},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":15}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":17}}],"nodes":[{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-1189.0132217407227,"y":259.09464263916016},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n   'Viz_Alert_Machine_Reservation',\n   'Viz_Alert_Machine_Reservation_Enabled',\n   'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-983.7483291625977,"y":258.96606636047363},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":5,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-769.1455307006836,"y":263.17418670654297},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n\treturn payload.reservation.newOverdue > 1;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":13,"inputConnectors":[{"name":""}],"name":"Filter for overdue > 1","outputConnectors":[{"name":"Out"}],"width":175,"x":559.7544002532959,"y":270.73266220092773},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    payload.flag = \"RESERVATION\";\n    return payload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":9,"inputConnectors":[{"name":""}],"name":"Set flag","outputConnectors":[{"name":"Out"}],"width":175,"x":786.3736362457275,"y":269.8935356140137},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.handle","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":10,"inputConnectors":[{"name":""}],"name":"To email.handle","outputConnectors":[{"name":"Out"}],"width":175,"x":1010.5218715667725,"y":264.2381820678711},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.reservation = tidy(payload);\n    newPayload.siteID = payload.siteID;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":15,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-329.91172790527344,"y":263.9104537963867},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    _ID\n    ,overdue\n    ,reservationTime * 60 as reservationSecs\n    ,datediff(ss, starttime, current_timestamp) as elapsedTime\n    ,location\n    ,siteID\nfrom ve_tv_machinereservation\nwhere reservationstatusid = 0\nand current_timestamp > endtime\n\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":""}],"name":"Select reservations","outputConnectors":[{"name":"Out"}],"width":175,"x":-550.870979309082,"y":261.7743148803711},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    function getNewOverdue(reservation, alert) {\n\t\tif (reservation.overdue === 0\n\t\t    && reservation.elapsedTime > (parseInt(alert.value) + reservation.reservationSecs)) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (reservation.overdue === 1 \n\t\t    && reservation.elapsedTime > (alert.escalateSupervisor + reservation.reservationSecs)) {\n\t\t\treturn 2;\n\t\t}\n\t\tif (reservation.overdue === 2 \n\t\t    && reservation.elapsedTime > (alert.escalateManager + reservation.reservationSecs)) {\n\t\t\treturn 3;\n\t\t}\n\t\treturn null;\n    }\n    \n    payload.reservation.newOverdue = getNewOverdue(payload.reservation, payload.appPrefs.alertMachineReservation);\n    return payload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":""}],"name":"Add new overdue value","outputConnectors":[{"name":"Out"}],"width":175,"x":-107.08848762512207,"y":267.07203674316406},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_machinereservation\nset overdue = '{{payload.reservation.newOverdue}}'\nwhere _id = '{{payload.reservation._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":11,"inputConnectors":[{"name":""}],"name":"Update reservation","outputConnectors":[{"name":"Out"}],"width":175,"x":325.51649284362793,"y":267.82257080078125},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n\treturn payload.reservation.newOverdue !== null;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":17,"inputConnectors":[{"name":""}],"name":"Filter for new overdue","outputConnectors":[{"name":"Out"}],"width":175,"x":106.3478889465332,"y":271.0417785644531}],"viewBox":[321,-330,1,1562.8993530273438]},"id":"1d8a12f3-67cb-454d-bb73-874b2ce305af","lastUpdated":"2018-11-28T02:46:19.893Z","name":"09-04 Machine Reservation Alerts","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":9},{"dateCreated":"2018-12-11T01:13:46.108Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"{{payload.__sql}}","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Update user","type":"db-ms-sql"},"rabbitmq-consumer5":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"errorHandling":"","exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"mobile.user.update","routingKeyPattern":"mobile.user.update"},"name":"From mobile.user.update","type":"rabbitmq-consumer"},"rabbitmq-producer6":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.user.update.{{payload.deviceID}}","ttl":0},"name":"Key mobile.user.update.{{payload.deviceID}}","type":"rabbitmq-producer"},"transform4":{"config":{"errorHandling":"","expression":"(function() {\n    let payloadIn = Object.assign({}, (payload));\n    var sql = 'UPDATE VE_tv_User\\nSET ';\n    \n\tfor(var key in payload){\n\t    // Ignore the userID and deviceID keys.\n\t    if(key != 'userID' && key != 'deviceID'){\n\t        sql += `${key} = CAST('${payload[key]}' AS ${typeof payload[key] === 'string' ? 'VARCHAR' : 'INT'}),\\n`;\n\t    }\n\t}\n\t\n\t// Drop the last comma\n\tsql = sql.slice(0, -2);\n\tsql += `\\nWHERE UserID = '${payload.userID}'`;\n\tpayloadIn.__sql = sql;\n\treturn payloadIn;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Translate message to SQL","type":"transform"}},"links":[{"from":"transform4","to":"db-ms-sql2"},{"from":"rabbitmq-consumer5","to":"transform4"},{"from":"db-ms-sql2","to":"rabbitmq-producer6"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->In:<ul><li><!--block-->mobile.user.update</li><li><pre><!--block-->{\n  deviceID,\n  userID,\n  userStatusID (optional),\n  userRoleID (optional),\n  ...\n}</pre></li></ul></li></ul><div><!--block-->Notes</div><ul><li><!--block-->update ve_tv_user</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload.__sql}}","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Update user","outputConnectors":[{"name":"Out"}],"width":175,"x":1277.0899658203125,"y":297.42124938964844},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    let payloadIn = Object.assign({}, (payload));\n    var sql = 'UPDATE VE_tv_User\\nSET ';\n    \n\tfor(var key in payload){\n\t    // Ignore the userID and deviceID keys.\n\t    if(key != 'userID' && key != 'deviceID'){\n\t        sql += `${key} = CAST('${payload[key]}' AS ${typeof payload[key] === 'string' ? 'VARCHAR' : 'INT'}),\\n`;\n\t    }\n\t}\n\t\n\t// Drop the last comma\n\tsql = sql.slice(0, -2);\n\tsql += `\\nWHERE UserID = '${payload.userID}'`;\n\tpayloadIn.__sql = sql;\n\treturn payloadIn;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Translate message to SQL","outputConnectors":[{"name":"Out"}],"width":175,"x":1031.25,"y":298.5},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"mobile.user.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"mobile.user.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":5,"inputConnectors":[],"invalid":false,"name":"From mobile.user.update","outputConnectors":[{"name":"Out"}],"width":175,"x":820.8306274414062,"y":298.08941650390625},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.user.update.{{payload.deviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Key mobile.user.update.{{payload.deviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1485.460205078125,"y":296.46063232421875}]},"id":"221aa47f-8f3c-4b3f-a19a-5537e6fd0ba5","lastUpdated":"2019-03-11T22:31:13.527Z","name":"M-02 User Update","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":15},{"dateCreated":"2018-07-31T16:53:00.215Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"delta","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select top 1\n    SiteID\n    ,_ID\n    ,_Version\n    ,cast(birthDate as varchar(36)) as DateofBirth\n    ,left(gender, 1) as Gender\n    ,firstname as FirstName\n    ,nickName as PreferredName\n    ,middleName as MiddleName \n    ,lastName as LastName\n    ,suffix as Suffix\n    ,address1 as Address1 \n    ,city as City\n    ,state as StateProvince\n    ,zipCode as PostalCode\n    ,country as Country\n    ,idnumber as IDNumber\n    ,expirationDate as ExpirationDate\n    ,issueDate as IssueDate\n    ,issueState as IssueState\n    ,issueCountry as IssueCountry\n    ,userID as UserID\n    ,insertdatetime as delta\nfrom ve_tv_playerenrollment with (nolock)\n--where insertdatetime > '{{delta}}'","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select enrolment","type":"db-ms-sql"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":1000},"name":"Timer","type":"time"},"transform8":{"config":{"expression":"(function() {\n\nvar _attributes = {'xmlns:xsi':\"http://www.w3.org/2001/XMLSchema-instance\",\n'xsi:noNamespaceSchemaLocation':\"C:\\XSD\\CRM.xsd\"}\n\nvar Header = {\n    MessageID:Math.floor(Math.random() * 1000000000),\n    TimeStamp: (new Date()).toISOString(),\n    Operation: {\n        _attributes: {\n            Data:\"PlayerProfile\",\n            Operand:\"Add\"\n        }\n    }\n}\n\nvar Misc ={\n       DateofBirth: payload.DateofBirth,\n      CreditAccount: 'false',\n      Gender:payload.Gender,\n      WebEnabled: 'N' \n}\nvar Name =  {FirstName:payload.FirstName,\n        PreferredName:payload.PreferredName,\n       MiddleName:payload.MiddleName,\n       LastName: payload.LastName\n}\n\nvar Address = {Address1: payload.Address1,\n          City: payload.City,\n          StateProvince: payload.StateProvince,\n          PostalCode: payload.PostalCode,\n          Country: payload.Country,\n          Location : 'Home'}\n\nvar Identification = {\n Type: \"Driver's License\",\n IDNumber: payload.IDNumber\n}\n\nvar User = {\n  UserID : payload.UserID  \n}\n\n\nvar Host = {\n  UserID: payload.UserID\n}\nvar SiteInfo = {\n  SiteID : payload.SiteID,\n  Host : Host\n}\n    return {\nCRMAcresMessage:{\n_attributes: _attributes,\nHeader: Header,\n        Body:{\n            PlayerProfile:\n            {\n            DateofBirth: payload.DateofBirth,\n            CreditAccount: 'false',\n            Gender:payload.Gender,\n            WebEnabled: 'N',\n            Name: Name,\n            Addresses: {Address: Address},\n            Identifications: {Identification: Identification},\n            EnrolledBy: {User: User},\n            SiteParameters: {SiteInfo: SiteInfo},\n            }\n}\n}\n    };\n\t\n\t\n})();","variables":""},"name":"Transform","type":"transform"},"transform9":{"config":{"expression":"(function() {\n    // for (var key in payload) {\n    //     if (payload[key] !== null) {\n    //         payload[key] = payload[key];\n            \n    //     } else {\n    //         payload[key] = '';\n    //     }\n    // }\n    return payload;\n})();","variables":""},"name":"Transform","type":"transform"},"xml-converter10":{"config":{"checkValidity":true,"includeDeclarationHeader":true,"includeInputInResult":false,"inputNamespace":"__input","payloadPath":"","xmlHeader":[{"name":"version","value":"1.0"},{"name":"encoding","value":"utf-8"}]},"name":"XML Converter","type":"xml-converter"}},"links":[{"from":"time1","to":"db-ms-sql2"},{"from":"db-ms-sql2","to":"transform9"},{"from":"transform9","to":"transform8"},{"from":"transform8","to":"xml-converter10"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":8}}],"nodes":[{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":1000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"Timer","outputConnectors":[{"name":"Out"}],"width":175,"x":-113.93249130249023,"y":-23.38974380493164},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"delta","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select top 1\n    SiteID\n    ,_ID\n    ,_Version\n    ,cast(birthDate as varchar(36)) as DateofBirth\n    ,left(gender, 1) as Gender\n    ,firstname as FirstName\n    ,nickName as PreferredName\n    ,middleName as MiddleName \n    ,lastName as LastName\n    ,suffix as Suffix\n    ,address1 as Address1 \n    ,city as City\n    ,state as StateProvince\n    ,zipCode as PostalCode\n    ,country as Country\n    ,idnumber as IDNumber\n    ,expirationDate as ExpirationDate\n    ,issueDate as IssueDate\n    ,issueState as IssueState\n    ,issueCountry as IssueCountry\n    ,userID as UserID\n    ,insertdatetime as delta\nfrom ve_tv_playerenrollment with (nolock)\n--where insertdatetime > '{{delta}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":"In"}],"name":"Select enrolment","outputConnectors":[{"name":"Out"}],"width":175,"x":191.072021484375,"y":24.37234115600586},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n\nvar _attributes = {'xmlns:xsi':\"http://www.w3.org/2001/XMLSchema-instance\",\n'xsi:noNamespaceSchemaLocation':\"C:\\XSD\\CRM.xsd\"}\n\nvar Header = {\n    MessageID:Math.floor(Math.random() * 1000000000),\n    TimeStamp: (new Date()).toISOString(),\n    Operation: {\n        _attributes: {\n            Data:\"PlayerProfile\",\n            Operand:\"Add\"\n        }\n    }\n}\n\nvar Misc ={\n       DateofBirth: payload.DateofBirth,\n      CreditAccount: 'false',\n      Gender:payload.Gender,\n      WebEnabled: 'N' \n}\nvar Name =  {FirstName:payload.FirstName,\n        PreferredName:payload.PreferredName,\n       MiddleName:payload.MiddleName,\n       LastName: payload.LastName\n}\n\nvar Address = {Address1: payload.Address1,\n          City: payload.City,\n          StateProvince: payload.StateProvince,\n          PostalCode: payload.PostalCode,\n          Country: payload.Country,\n          Location : 'Home'}\n\nvar Identification = {\n Type: \"Driver's License\",\n IDNumber: payload.IDNumber\n}\n\nvar User = {\n  UserID : payload.UserID  \n}\n\n\nvar Host = {\n  UserID: payload.UserID\n}\nvar SiteInfo = {\n  SiteID : payload.SiteID,\n  Host : Host\n}\n    return {\nCRMAcresMessage:{\n_attributes: _attributes,\nHeader: Header,\n        Body:{\n            PlayerProfile:\n            {\n            DateofBirth: payload.DateofBirth,\n            CreditAccount: 'false',\n            Gender:payload.Gender,\n            WebEnabled: 'N',\n            Name: Name,\n            Addresses: {Address: Address},\n            Identifications: {Identification: Identification},\n            EnrolledBy: {User: User},\n            SiteParameters: {SiteInfo: SiteInfo},\n            }\n}\n}\n    };\n\t\n\t\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":8,"inputConnectors":[{"name":"In"}],"name":"Transform","outputConnectors":[{"name":"Out"}],"width":175,"x":697.7469482421875,"y":25.113616943359375},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    // for (var key in payload) {\n    //     if (payload[key] !== null) {\n    //         payload[key] = payload[key];\n            \n    //     } else {\n    //         payload[key] = '';\n    //     }\n    // }\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":9,"inputConnectors":[{"name":"In"}],"name":"Transform","outputConnectors":[{"name":"Out"}],"width":175,"x":444.7469482421875,"y":30.11361312866211},{"color":"#9ba8b0","component":{"metadata":"## XML Header\nThis is related to the first tag in an **xml** document. The default values provided are:\n\n1. version:1.0\n2. encoding:utf-8\n\nwhich will generate:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n```\n\n## Check Validity\nDefault is to check and guarantee that the XML is valid. Turn this option off if you just want to generate tags without the concern of having just one root element.\n\n## Include Declaration\nIf you don't want the ```<?xml ?>``` declaration on top just turn this option to false. Default is true.\n\n## Include input in result\nWhen the configuration is enabled, the output payload will be an `object` instead of xml `string`.\n\n### Example\n\n```json\n{\n  xml: '<?xml version=\"1.0\" encoding=\"utf-8\"?><CarList><Car>Nissan</Car><Car>Toyota</Car><Car>Bently</Car></CarList>',\n  __input: {\n    \"CarList\": {\n      \"Car\": [\n        \"Nissan\",\n        \"Toyota\",\n        \"Bently\"\n      ]\n    }\n  }\n}\n```\n\nThe namespace of input payload can be customized by `Input namespace` configuration.\n\n## Input namespace\n\nSpecify the input namespace in the output payload when `Include input in result` configuration is enabled.\n\n## Payload path\nUse this configuration to specify the data in the payload for converting. If it is empty, the whole input payload will be used for converting.\n\nThe configuration is useful when you are using the `Include input in result` configuration. You can include extra metadata in the input payload and use the metadata in the downstream components.\n\n### Example\n\nWe have a input payload as below:\n\n```json\n{\n  \"data\": {\n    \"send-email-to\": \"foo@bar.com\",\n    \"to\": {\n      \"convert\": {\n        \"CarList\": {\n          \"Car\": [\n            \"Nissan\",\n            \"Toyota\",\n            \"Bently\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\nWe can put `data.to.convert` in the `Payload path` configuration, then the component will convert xml from the object:\n\n```json\n{\n  \"CarList\": {\n    \"Car\": [\n      \"Nissan\",\n      \"Toyota\",\n      \"Bently\"\n    ]\n  }\n}\n```\n\nWith the `Include input in result` configuration enabled, the downstream component can access converted xml and the original input.\n\nFor example, using the `send-email-to` property to send xml to user on the email address.\n\n## Input and Output\n\n\n### Accepted Input\nThe input needs to be a Object which describes the XML to be generated.\n\n### Payload Example\n### Example A\n\nThe following payload input:\n\n```json\n{\n\"CRMAcresMessage\": {\n  \"_attributes\": {\n   \"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n   \"xsi:noNamespaceSchemaLocation\": \"C:\\\\XSD\\\\CRM.xsd\"\n  },\n  \"Body\": {\n   \"PlayerProfile\": {\n    \"Name\": {\n     \"FirstName\": \"JASON\",\n     \"MiddleName\": \"KYLE\",\n     \"LastName\": \"BONNER\",\n     \"PreferredName\": \"\"\n    }\n   }\n  }\n }\n}\n```\n\nis converted to the following output:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<CRMAcresMessage xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"C:\\XSD\\CRM.xsd\">\n  <Body>\n    <PlayerProfile>\n      <Name>\n        <FirstName>JASON</FirstName>\n        <MiddleName>KYLE</MiddleName>\n        <LastName>BONNER</LastName>\n        <PreferredName></PreferredName>\n      </Name>\n    </PlayerProfile>\n  </Body>\n</CRMAcresMessage>\n```\n\n### Example B\n\nThe following payload input:\n\n```json\n{\n  \"CarList\": {\n    \"Car\": [\n      \"Nissan\",\n      \"Toyota\",\n      \"Bently\"\n    ]\n  }\n}\n```\n\nis converted to the following output:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<CarList>\n\t<Car>Nissan</Car>\n\t<Car>Toyota</Car>\n\t<Car>Bently</Car>\n</CarList>\n```\n\n## Special Properties\n\nSpecial properties start with an underscore and are reserved for generating xml.\n\n### _attributes\n\nTo add an attribute to a tag use the ```_attribute``` property. For example:\n\n```json\n{\n  \"tagName\": {\n    \"_attributes\": {\n      \"attrA\": \"valA\",\n      \"attrB\": \"valB\"\n    }\n  }\n}\n```\n\nis converted to:\n\n```\n<tagName attrA=\"valA\" attrB=\"valB\"/>\n```\n\n### _cdata\n\nTo add CDATA (character data) within a tag use the ```_cdata``` property. For example:\n\n```json\n{\n  \"tagName\": {\n    \"_cdata\": \"this is <not> interpreted as </xml> markup!\"\n  }\n}\n```\n\nis converted to:\n\n```\n<tagName><![CDATA[this is <not> interpreted as </xml> markup!]]></tagName>\n```\n\n### _comment\n\nTo add a comment to the xml use the ```_comment``` property. For example:\n\n```json\n{\n  \"_comment\": \"this is a comment\"\n}\n```\n\nis converted to:\n\n```\n<!--this is a comment-->\n```\n\n### _doctype\n\nTo include a DOCTYPE declaration use the ```_doctype``` property. For example:\n\n```json\n{\n  \"_doctype\": \"the doctype definition would go here...\"\n}\n```\n\nis converted to:\n\n```\n<!DOCTYPE the doctype definition would go here...>\n```\n\n### _text\n\nTo include text within a tag with attributes use the ```_text``` property. For example:\n\n```json\n{\n  \"tagName\": {\n    \"_attributes\": {\n      \"attrA\": \"valA\",\n      \"attrB\": \"valB\"\n    },\n    \"_text\": \"someText\"\n  }\n}\n```\n\nis converted to:\n\n```\n<tagName attrA=\"valA\" attrB=\"valB\">someText</tagName>\n```\n\n","name":"XML Converter","properties":[{"defaultValue":true,"description":"Implies that the XML should be valid, that means just one root element besides the declaration in the top.","name":"checkValidity","type":"boolean"},{"defaultValue":true,"description":"This is the <?xml ?> at the top.","name":"includeDeclarationHeader","type":"boolean"},{"attributeModel":{"name":"","value":""},"defaultValue":[{"name":"version","value":"1.0"},{"name":"encoding","value":"utf-8"}],"description":"This is the header declaration.","name":"xmlHeader","title":"declarationAttributes","type":"attributes"},{"defaultValue":"","description":"The path to get the object for converting","name":"payloadPath","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"}],"type":"xml-converter"},"icon":"./assets/vizflow/components/xml-converter.svg","id":10,"inputConnectors":[{"name":"In"}],"name":"XML Converter","outputConnectors":[{"name":"Out"}],"width":175,"x":960.6041870117188,"y":-86.95462226867676}]},"id":"b2b34134-a74b-4270-ae1e-31f99c584368","lastUpdated":"2018-11-28T02:48:07.618Z","name":"13-00 Player Enrolment","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":10},{"dateCreated":"2017-11-26T21:17:26.621Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    t._ID\n    ,t.isTechTask\n    ,t.taskStatusID\n    ,t.taskTypeID\n    ,t.eventDesc\n    ,t.userID\n    ,t.location\n    ,t.siteID\n    ,t.taskUrgency\n    ,t.parentuserid as parentUser\n    ,s.sectionID\n    ,s.OFL1\n    ,s.OFL2\n    ,s.OFL3\n    ,s.OFL4\n    ,0 as assigned\nfrom ve_vw_tv_task t\nleft join ve_vw_tv_section s\n    on left(t.location, '{{payload.appPrefs.sectionIDLength.value}}') = s.sectionid\n    and t.siteid = s.siteid \nleft join ve_vw_tv_tasktype tt\n\ton t.tasktypeid = tt.tasktypeid\nleft join ve_vw_tv_player p\n\ton t.playerid = p.playerid\nleft join ve_tv_tierscore ts\n\ton p.tier = ts.tier\n\tand t.siteid = ts.siteid\nwhere t.taskstatusid in (0, 30, 7)\nand (\n    t.tasktypeid <> 1\n\tor datediff(ss, t.taskcreated, current_timestamp) > '{{payload.appPrefs.changeLightAssignmentDelay.value}}'\n\t)\norder by (\n    case\n        when '{{payload.appPrefs.assignByPriorityScore.value}}' = 1\n\t\tthen ((1 + coalesce(tt.taskscore, 0)) * (1 + coalesce(ts.tierscore, 0)) + '{{payload.appPrefs.timePriorityMultiplier.value}}' * datediff(ss, t.taskcreated, current_timestamp))\n\t\telse datediff(ss, t.taskcreated, current_timestamp)\n\tend\n\t) desc\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select tasks","type":"db-ms-sql"},"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    u.userID\n    ,u.userName\n    ,u.userRoleID\n    ,u.userStatusID\n    ,u.email\n    ,u.objectID\n    ,u.phone\n    ,u.staffID\n    ,u.siteID\n    ,coalesce(sl.sectionlist, '') as sectionList\n    ,coalesce(sl.zonelist, '') as zoneList\n    ,dem.email as deviceEmail\n\t,t.taskCount\n\t,t.taskDate\n\t,coalesce(ttl.tasktypelist, '') as taskTypeList\n\t,ur.isTechnician\n\t,ur.isAttendant\nfrom (\n\tselect \n\t\tuserid \n\t\t,username\n\t\t,userroleid\n\t\t,email\n\t\t,objectid\n\t\t,phone\n\t\t,staffid\n\t\t,userstatusid\n\t\t,siteid\t\t\n\tfrom ve_vw_tv_user\n\twhere \n\t    userstatusid in (20, 30)\n\t) u\nleft join ve_vw_tv_userrole ur\non u.userroleid = ur.userroleid\nleft join (\n\tselect\n\t\tuserid,\n\t\tcount(case when taskstatusid not in (12, 13, 7) then 1 else null end) as taskcount,\n\t\tmax(case when taskstatusid not in (12) then taskcompleted else null end) as taskdate\n\tfrom ve_vw_tv_task\n\tgroup by userid\n\t) t\non u.userid = t.userid\nleft join ve_vw_tv_sectionlist sl\non u.userid = sl.userid\nleft join ve_tv_deviceemailmapping dem\non u.objectid = dem.objectid\nleft join ve_vw_tv_tasktypelist ttl\non u.userid = ttl.userid\nwhere (ur.isattendant = 1 or ur.istechnician = 1)\nand ur.userroleid in (10, 15, 42)\norder by\n    t.taskcount asc,\n    t.taskdate asc","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select users","type":"db-ms-sql"},"db-ms-sql5":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Assign_By_Priority_Score',\n    'Viz_Assign_Max_Tasks',\n    'Viz_Change_Light_Assignment_Delay',\n    'Viz_Overflow_By_Cascade',\n    'Viz_Overflow_Enabled',\n    'Viz_Overflow_Levels',\n    'Viz_Overflow_Type',\n    'Viz_Section_ID_Length',\n    'Viz_Shared_Device_Generic_Emails',\n    'Viz_Time_Priority_Multiplier',\n    'Viz_Alert_Auto_Assignment_Enabled',\n    'Viz_Reassign_On_Jackpots_Status_Enabled',\n    'Viz_Task_Skills_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"rabbitmq-producer14":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":2500},"name":"To task.update","type":"rabbitmq-producer"},"splitter8":{"config":{},"name":"Splitter","type":"splitter"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss","interval":3000},"name":"3 seconds","type":"time"},"transform10":{"config":{"expression":"function() {\n    if (!payload.task.isTechTask) {\n        payload.task.newTaskStatusID = variables.assignedTaskID;\n    } else {\n        payload.task.newTaskStatusID = variables.techAssignedTaskID;\n    }\n    payload.flag = \"AUTO_ASSIGN\";\n    return payload;\n}","variables":"{\n    \"newTaskID\": 0,\n    \"assignedTaskID\": 1,\n    \"techAssignedTaskID\": 31\n    \n}\n"},"name":"Prepare","type":"transform"},"transform13":{"config":{"expression":"function() {\n    var newPayload = payload.__input;\n    newPayload.users = payload.data;\n    return newPayload;\n}","variables":""},"name":"Tidy 3","type":"transform"},"transform16":{"config":{"expression":"function() {\n    var newPayload = payload.__input;\n    newPayload.tasks = payload.data;\n    return newPayload;\n}","variables":""},"name":"Tidy 2","type":"transform"},"transform6":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform7":{"config":{"expression":"function () {\r\n\t/*\r\n\t * Assigns users to tasks by returning an array of user, task pairs.\r\n\t */\r\n    var users = payload.users;\r\n    var tasks = payload.tasks;\r\n\r\n    var siteID = payload.siteID;\r\n    var timestamp = payload.timestamp;\r\n    var appPrefs = payload.appPrefs;\r\n    var flag = payload.flag;\r\n    var routingKey = payload.routingKey;\r\n\r\n\r\n    var newPayload = [];\r\n\r\n\t/*\r\n\t * Used to sort the users by ascending task count.\r\n\t */\r\n    function compareUsers(userA, userB) {\r\n        return userA.taskCount - userB.taskCount;\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the user has the valid role for the task\r\n\t */\r\n    function validRole(user, task) {\r\n        return (user.isAttendant == 1 && !task.isTechTask)\r\n            || (user.isTechnician == 1 && task.isTechTask);\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the task type is valid for the user\r\n\t */\r\n    function validTaskType(user, task) {\r\n        var taskTypeList = user.taskTypeList.split(',');\r\n        return taskTypeList.indexOf(' ' + task.taskTypeID) !== -1;\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the user is valid for overflow of the task\r\n\t */\r\n    function validOverflow(user, task, location, isSkilled) {\r\n        return user.siteID === task.siteID\r\n            && validRole(user, task)\r\n            && (validTaskType(user, task) || !isSkilled)\r\n            && user.taskCount < appPrefs.assignMaxTasks.value\r\n            && ((appPrefs.overflowType.value === \"Section\" && user.sectionList.indexOf(\" \" + location) !== -1)\r\n                || (appPrefs.overflowType.value === \"Zone\" && user.zoneList.indexOf(\" \" + location) !== -1));\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the user is valid for the task (no overflow)\r\n\t */\r\n    function validUser(user, task, isSkilled) {\r\n        return user.siteID === task.siteID\r\n            && validRole(user, task)\r\n            && (validTaskType(user, task) || !isSkilled)\r\n            && user.taskCount < appPrefs.assignMaxTasks.value\r\n            && (user.userID !== task.parentUser || task.taskStatusID == 7)\r\n            && user.sectionList.indexOf(\" \" + task.sectionID) !== -1;\r\n    }\r\n\r\n\t/*\r\n\t * Attempts to assign a user to the task by using overflow.\r\n\t * Returns the user and the overflow level used, or null if no user is found\r\n\t */\r\n    function overflow(task, isSkilled) {\r\n        var overflows = [task.OFL1, task.OFL2, task.OFL3, task.OFL4];\r\n        // Overflow by cascade\r\n        if (appPrefs.overflowByCascade.value === \"1\") {\r\n            for (var i = 0; i < appPrefs.overflowLevels.value; i++) {\r\n                for (var j = 0; j < users.length; j++) {\r\n                    if (validOverflow(users[j], task, overflows[i], isSkilled)) {\r\n                        return [users[j], i + 1];\r\n                    }\r\n                }\r\n            }\r\n            // Overflow by unit\r\n        } else {\r\n            for (var i = 0; i < users.length; i++) {\r\n                for (var j = 0; j < appPrefs.overflowLevels.value; j++) {\r\n                    if (validOverflow(users[i], task, overflows[j], isSkilled)) {\r\n                        return [users[i], j + 1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // No user found\r\n        return null;\r\n    }\r\n\r\n\t/*\r\n\t * Attempts to assign a user to the task.\r\n\t * Returns the user and the overflow level used (0 if not used), or null if no user is found.\r\n\t */\r\n    function getUser(task, isSkilled) {\r\n        // Attempt to assign a user in the section of the task\r\n        for (var i = 0; i < users.length; i++) {\r\n            if (validUser(users[i], task, isSkilled)) {\r\n                return [users[i], 0];\r\n            }\r\n        }\r\n        // Attempt to assign by overflow\r\n        if (appPrefs.overflowEnabled.value === \"1\") {\r\n            return overflow(task, isSkilled);\r\n        }\r\n        // No user found\r\n        return null;\r\n    }\r\n\r\n    function assign(task, user, overflow, isSkilled) {\r\n        taskCopy = JSON.parse(JSON.stringify(task));\r\n        userCopy = JSON.parse(JSON.stringify(user));\r\n\r\n        var assigned = {};\r\n        assigned.siteID = userCopy.siteID;\r\n        assigned.timestamp = timestamp;\r\n        assigned.appPrefs = appPrefs;\r\n        assigned.flag = flag;\r\n        assigned.routingKey = routingKey;\r\n\r\n        assigned.task = taskCopy;\r\n        assigned.user = userCopy;\r\n        assigned.overflowUsed = overflow;\r\n        assigned.isSkilled = isSkilled;\r\n\r\n        newPayload.push(assigned);\r\n        // Increment the task count of the assigned user\r\n        user.taskCount++;\r\n        // Sort users by ascending task count\r\n        users.sort(compareUsers);\r\n        // Mark task as assigned\r\n        task.assigned = 1;\r\n    }\r\n\r\n    for (var i = 0; i < tasks.length; i++) {\r\n        if (tasks[i].assigned == 0) {\r\n            var result = getUser(tasks[i], appPrefs.taskSkillsEnabled.value == 1);\r\n            if (result) {\r\n                assign(tasks[i], result[0], result[1], appPrefs.taskSkillsEnabled.value == 1);\r\n            }\r\n        }\r\n    }\r\n    // Return the array of user, task pairs\r\n    return newPayload;\r\n}\r\n","variables":""},"name":"Assign users","type":"transform"}},"links":[{"from":"transform7","to":"splitter8"},{"from":"splitter8","to":"transform10"},{"from":"transform6","to":"db-ms-sql2"},{"from":"db-ms-sql4","to":"transform13"},{"from":"transform13","to":"transform7"},{"from":"transform10","to":"rabbitmq-producer14"},{"from":"db-ms-sql5","to":"transform6"},{"from":"db-ms-sql2","to":"transform16"},{"from":"transform16","to":"db-ms-sql4"},{"from":"time1","to":"db-ms-sql5"}]},"description":"<div><!--block-->==&gt; task.update</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":14},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":16},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":1}}],"nodes":[{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":3000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"3 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-1563.1644394397736,"y":60.566261291503906},{"color":"#9ba8b0","component":{"description":"Splits an array into individual messages","name":"Splitter","properties":[],"type":"splitter"},"icon":"./assets/vizflow/components/splitter.svg","id":8,"inputConnectors":[{"name":""}],"name":"Splitter","outputConnectors":[{"name":"Out"}],"width":175,"x":183.31908297538757,"y":72.8556022644043},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    if (!payload.task.isTechTask) {\n        payload.task.newTaskStatusID = variables.assignedTaskID;\n    } else {\n        payload.task.newTaskStatusID = variables.techAssignedTaskID;\n    }\n    payload.flag = \"AUTO_ASSIGN\";\n    return payload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"{\n    \"newTaskID\": 0,\n    \"assignedTaskID\": 1,\n    \"techAssignedTaskID\": 31\n    \n}\n","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":10,"inputConnectors":[{"name":""}],"name":"Prepare","outputConnectors":[{"name":"Out"}],"width":175,"x":390.102486371994,"y":64.1068000793457},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-1127.3108246326447,"y":64.32775115966797},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":2500,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":14,"inputConnectors":[{"name":""}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":606.3441314697266,"y":65.72652435302734},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Assign_By_Priority_Score',\n    'Viz_Assign_Max_Tasks',\n    'Viz_Change_Light_Assignment_Delay',\n    'Viz_Overflow_By_Cascade',\n    'Viz_Overflow_Enabled',\n    'Viz_Overflow_Levels',\n    'Viz_Overflow_Type',\n    'Viz_Section_ID_Length',\n    'Viz_Shared_Device_Generic_Emails',\n    'Viz_Time_Priority_Multiplier',\n    'Viz_Alert_Auto_Assignment_Enabled',\n    'Viz_Reassign_On_Jackpots_Status_Enabled',\n    'Viz_Task_Skills_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":5,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-1348.2183220386505,"y":63.272193908691406},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function () {\r\n\t/*\r\n\t * Assigns users to tasks by returning an array of user, task pairs.\r\n\t */\r\n    var users = payload.users;\r\n    var tasks = payload.tasks;\r\n\r\n    var siteID = payload.siteID;\r\n    var timestamp = payload.timestamp;\r\n    var appPrefs = payload.appPrefs;\r\n    var flag = payload.flag;\r\n    var routingKey = payload.routingKey;\r\n\r\n\r\n    var newPayload = [];\r\n\r\n\t/*\r\n\t * Used to sort the users by ascending task count.\r\n\t */\r\n    function compareUsers(userA, userB) {\r\n        return userA.taskCount - userB.taskCount;\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the user has the valid role for the task\r\n\t */\r\n    function validRole(user, task) {\r\n        return (user.isAttendant == 1 && !task.isTechTask)\r\n            || (user.isTechnician == 1 && task.isTechTask);\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the task type is valid for the user\r\n\t */\r\n    function validTaskType(user, task) {\r\n        var taskTypeList = user.taskTypeList.split(',');\r\n        return taskTypeList.indexOf(' ' + task.taskTypeID) !== -1;\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the user is valid for overflow of the task\r\n\t */\r\n    function validOverflow(user, task, location, isSkilled) {\r\n        return user.siteID === task.siteID\r\n            && validRole(user, task)\r\n            && (validTaskType(user, task) || !isSkilled)\r\n            && user.taskCount < appPrefs.assignMaxTasks.value\r\n            && ((appPrefs.overflowType.value === \"Section\" && user.sectionList.indexOf(\" \" + location) !== -1)\r\n                || (appPrefs.overflowType.value === \"Zone\" && user.zoneList.indexOf(\" \" + location) !== -1));\r\n    }\r\n\r\n\t/*\r\n\t * Returns 'true' if the user is valid for the task (no overflow)\r\n\t */\r\n    function validUser(user, task, isSkilled) {\r\n        return user.siteID === task.siteID\r\n            && validRole(user, task)\r\n            && (validTaskType(user, task) || !isSkilled)\r\n            && user.taskCount < appPrefs.assignMaxTasks.value\r\n            && (user.userID !== task.parentUser || task.taskStatusID == 7)\r\n            && user.sectionList.indexOf(\" \" + task.sectionID) !== -1;\r\n    }\r\n\r\n\t/*\r\n\t * Attempts to assign a user to the task by using overflow.\r\n\t * Returns the user and the overflow level used, or null if no user is found\r\n\t */\r\n    function overflow(task, isSkilled) {\r\n        var overflows = [task.OFL1, task.OFL2, task.OFL3, task.OFL4];\r\n        // Overflow by cascade\r\n        if (appPrefs.overflowByCascade.value === \"1\") {\r\n            for (var i = 0; i < appPrefs.overflowLevels.value; i++) {\r\n                for (var j = 0; j < users.length; j++) {\r\n                    if (validOverflow(users[j], task, overflows[i], isSkilled)) {\r\n                        return [users[j], i + 1];\r\n                    }\r\n                }\r\n            }\r\n            // Overflow by unit\r\n        } else {\r\n            for (var i = 0; i < users.length; i++) {\r\n                for (var j = 0; j < appPrefs.overflowLevels.value; j++) {\r\n                    if (validOverflow(users[i], task, overflows[j], isSkilled)) {\r\n                        return [users[i], j + 1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // No user found\r\n        return null;\r\n    }\r\n\r\n\t/*\r\n\t * Attempts to assign a user to the task.\r\n\t * Returns the user and the overflow level used (0 if not used), or null if no user is found.\r\n\t */\r\n    function getUser(task, isSkilled) {\r\n        // Attempt to assign a user in the section of the task\r\n        for (var i = 0; i < users.length; i++) {\r\n            if (validUser(users[i], task, isSkilled)) {\r\n                return [users[i], 0];\r\n            }\r\n        }\r\n        // Attempt to assign by overflow\r\n        if (appPrefs.overflowEnabled.value === \"1\") {\r\n            return overflow(task, isSkilled);\r\n        }\r\n        // No user found\r\n        return null;\r\n    }\r\n\r\n    function assign(task, user, overflow, isSkilled) {\r\n        taskCopy = JSON.parse(JSON.stringify(task));\r\n        userCopy = JSON.parse(JSON.stringify(user));\r\n\r\n        var assigned = {};\r\n        assigned.siteID = userCopy.siteID;\r\n        assigned.timestamp = timestamp;\r\n        assigned.appPrefs = appPrefs;\r\n        assigned.flag = flag;\r\n        assigned.routingKey = routingKey;\r\n\r\n        assigned.task = taskCopy;\r\n        assigned.user = userCopy;\r\n        assigned.overflowUsed = overflow;\r\n        assigned.isSkilled = isSkilled;\r\n\r\n        newPayload.push(assigned);\r\n        // Increment the task count of the assigned user\r\n        user.taskCount++;\r\n        // Sort users by ascending task count\r\n        users.sort(compareUsers);\r\n        // Mark task as assigned\r\n        task.assigned = 1;\r\n    }\r\n\r\n    for (var i = 0; i < tasks.length; i++) {\r\n        if (tasks[i].assigned == 0) {\r\n            var result = getUser(tasks[i], appPrefs.taskSkillsEnabled.value == 1);\r\n            if (result) {\r\n                assign(tasks[i], result[0], result[1], appPrefs.taskSkillsEnabled.value == 1);\r\n            }\r\n        }\r\n    }\r\n    // Return the array of user, task pairs\r\n    return newPayload;\r\n}\r\n","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":7,"inputConnectors":[{"name":""}],"name":"Assign users","outputConnectors":[{"name":"Out"}],"width":175,"x":-40.161383867263794,"y":67.13621520996094},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    t._ID\n    ,t.isTechTask\n    ,t.taskStatusID\n    ,t.taskTypeID\n    ,t.eventDesc\n    ,t.userID\n    ,t.location\n    ,t.siteID\n    ,t.taskUrgency\n    ,t.parentuserid as parentUser\n    ,s.sectionID\n    ,s.OFL1\n    ,s.OFL2\n    ,s.OFL3\n    ,s.OFL4\n    ,0 as assigned\nfrom ve_vw_tv_task t\nleft join ve_vw_tv_section s\n    on left(t.location, '{{payload.appPrefs.sectionIDLength.value}}') = s.sectionid\n    and t.siteid = s.siteid \nleft join ve_vw_tv_tasktype tt\n\ton t.tasktypeid = tt.tasktypeid\nleft join ve_vw_tv_player p\n\ton t.playerid = p.playerid\nleft join ve_tv_tierscore ts\n\ton p.tier = ts.tier\n\tand t.siteid = ts.siteid\nwhere t.taskstatusid in (0, 30, 7)\nand (\n    t.tasktypeid <> 1\n\tor datediff(ss, t.taskcreated, current_timestamp) > '{{payload.appPrefs.changeLightAssignmentDelay.value}}'\n\t)\norder by (\n    case\n        when '{{payload.appPrefs.assignByPriorityScore.value}}' = 1\n\t\tthen ((1 + coalesce(tt.taskscore, 0)) * (1 + coalesce(ts.tierscore, 0)) + '{{payload.appPrefs.timePriorityMultiplier.value}}' * datediff(ss, t.taskcreated, current_timestamp))\n\t\telse datediff(ss, t.taskcreated, current_timestamp)\n\tend\n\t) desc\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":""}],"name":"Select tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-909.1918480396271,"y":63.63367462158203},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    u.userID\n    ,u.userName\n    ,u.userRoleID\n    ,u.userStatusID\n    ,u.email\n    ,u.objectID\n    ,u.phone\n    ,u.staffID\n    ,u.siteID\n    ,coalesce(sl.sectionlist, '') as sectionList\n    ,coalesce(sl.zonelist, '') as zoneList\n    ,dem.email as deviceEmail\n\t,t.taskCount\n\t,t.taskDate\n\t,coalesce(ttl.tasktypelist, '') as taskTypeList\n\t,ur.isTechnician\n\t,ur.isAttendant\nfrom (\n\tselect \n\t\tuserid \n\t\t,username\n\t\t,userroleid\n\t\t,email\n\t\t,objectid\n\t\t,phone\n\t\t,staffid\n\t\t,userstatusid\n\t\t,siteid\t\t\n\tfrom ve_vw_tv_user\n\twhere \n\t    userstatusid in (20, 30)\n\t) u\nleft join ve_vw_tv_userrole ur\non u.userroleid = ur.userroleid\nleft join (\n\tselect\n\t\tuserid,\n\t\tcount(case when taskstatusid not in (12, 13, 7) then 1 else null end) as taskcount,\n\t\tmax(case when taskstatusid not in (12) then taskcompleted else null end) as taskdate\n\tfrom ve_vw_tv_task\n\tgroup by userid\n\t) t\non u.userid = t.userid\nleft join ve_vw_tv_sectionlist sl\non u.userid = sl.userid\nleft join ve_tv_deviceemailmapping dem\non u.objectid = dem.objectid\nleft join ve_vw_tv_tasktypelist ttl\non u.userid = ttl.userid\nwhere (ur.isattendant = 1 or ur.istechnician = 1)\nand ur.userroleid in (10, 15, 42)\norder by\n    t.taskcount asc,\n    t.taskdate asc","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":""}],"name":"Select users","outputConnectors":[{"name":"Out"}],"width":175,"x":-466.7760384082794,"y":64.31664276123047},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    var newPayload = payload.__input;\n    newPayload.users = payload.data;\n    return newPayload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":13,"inputConnectors":[{"name":""}],"name":"Tidy 3","outputConnectors":[{"name":"Out"}],"width":175,"x":-251.89519119262695,"y":61.4903564453125},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    var newPayload = payload.__input;\n    newPayload.tasks = payload.data;\n    return newPayload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":16,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-691.3277587890625,"y":65.36290740966797}],"viewBox":[84,-300,1,1140]},"id":"4aa374d0-d184-4eaf-8e80-d3c2cbc68c2e","lastUpdated":"2018-11-28T02:45:41.460Z","name":"07-01 Auto Assignment","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":64},{"dateCreated":"2018-11-26T02:11:17.315Z","definition":{"components":{"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"{{payload}}\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Run query","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{"count":1000,"timeSpan":1000},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":true,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"sql.meal","routingKeyPattern":"sql.meal"},"name":"From sql.meal","type":"rabbitmq-consumer"},"transform2":{"config":{"expression":"(function() {\n\tlet result = payload.sort(compareTime);\n\tresult = result.map(message => message.__sql.query);\n\tresult = result.join('\\n');\n\treturn result;\n\t\n\tfunction compareTime(messageA, messageB) {\n\t    return messageA.__sql.time - messageB.__sql.time;\n\t}\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Convert to sql","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"transform2"},{"from":"transform2","to":"db-ms-sql4"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"sql.meal","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"sql.meal","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":true,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{"count":1000,"timeSpan":1000},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"invalid":false,"name":"From sql.meal","outputConnectors":[{"name":"Out"}],"width":175,"x":574,"y":204},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tlet result = payload.sort(compareTime);\n\tresult = result.map(message => message.__sql.query);\n\tresult = result.join('\\n');\n\treturn result;\n\t\n\tfunction compareTime(messageA, messageB) {\n\t    return messageA.__sql.time - messageB.__sql.time;\n\t}\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Convert to sql","outputConnectors":[{"name":"Out"}],"width":175,"x":800.943359375,"y":204.6980743408203},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload}}\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Run query","outputConnectors":[{"name":"Out"}],"width":175,"x":1015.9716796875,"y":203.34906005859375}]},"id":"e0d0c155-994c-439f-b545-8ee25aad078b","lastUpdated":"2019-01-31T01:13:33.976Z","name":"99-02 SQL - MEAL","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":22},{"dateCreated":"2017-11-26T21:17:26.611Z","definition":{"components":{"db-ms-sql14":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select \r\n    _ID\r\nfrom ve_vw_tv_task\r\nwhere (\r\n    istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n    or datediff(ss, taskcreated, current_timestamp) < '{{payload.appPrefs.ignoreOpenTechTasks.value}}'\r\n    )\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select open tasks","type":"db-ms-sql"},"filter15":{"config":{"expression":"(function() {\n\treturn payload.event.staffID === null;\n})();","variables":""},"name":"Filter out if staffID","type":"filter"},"filter20":{"config":{"expression":"(function() {\n\treturn payload.count === 0;\n})();","variables":""},"name":"Filter out if task","type":"filter"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.regular","routingKeyPattern":"event.regular"},"name":"From event.regular","type":"rabbitmq-consumer"},"rabbitmq-producer17":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.create","ttl":0},"name":"To task.create","type":"rabbitmq-producer"},"transform19":{"config":{"expression":"(function() {\n    var newPayload = payload.__input;\n    newPayload.flag = \"TASK\";\n    return newPayload;\n})();","variables":""},"name":"Set flag","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"filter15"},{"from":"filter15","to":"db-ms-sql14"},{"from":"db-ms-sql14","to":"filter20"},{"from":"filter20","to":"transform19"},{"from":"transform19","to":"rabbitmq-producer17"}]},"description":"<div><!--block-->event.regular ==&gt; task.create</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":15},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":14},"source":{"connectorIndex":0,"nodeID":15}},{"dest":{"connectorIndex":0,"nodeID":20},"source":{"connectorIndex":0,"nodeID":14}},{"dest":{"connectorIndex":0,"nodeID":19},"source":{"connectorIndex":0,"nodeID":20}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":19}}],"name":"01 - Regular - 02 - Check Machine Open Tasks in: CheckOpen || Out: Create, LogHistory","nodes":[{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.regular","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.regular","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From event.regular","outputConnectors":[{"name":"Out"}],"width":175,"x":-679.1132583618164,"y":239.01617355346684},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n\treturn payload.event.staffID === null;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":15,"inputConnectors":[{"name":""}],"name":"Filter out if staffID","outputConnectors":[{"name":"Out"}],"width":175,"x":-474.82157135009766,"y":237.01811981201172},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.create","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":17,"inputConnectors":[{"name":""}],"name":"To task.create","outputConnectors":[{"name":"Out"}],"width":175,"x":330.47013449668884,"y":245.04352569580078},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select \r\n    _ID\r\nfrom ve_vw_tv_task\r\nwhere (\r\n    istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n    or datediff(ss, taskcreated, current_timestamp) < '{{payload.appPrefs.ignoreOpenTechTasks.value}}'\r\n    )\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":14,"inputConnectors":[{"name":""}],"name":"Select open tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-271.23000717163086,"y":238.80666637420654},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var newPayload = payload.__input;\n    newPayload.flag = \"TASK\";\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":19,"inputConnectors":[{"name":""}],"name":"Set flag","outputConnectors":[{"name":"Out"}],"width":175,"x":130.57723999023438,"y":240.974853515625},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n\treturn payload.count === 0;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":20,"inputConnectors":[{"name":""}],"name":"Filter out if task","outputConnectors":[{"name":"Out"}],"width":175,"x":-70.12996101379395,"y":237.68566131591797}],"viewBox":[-38,-60,1,896]},"id":"38778641-681d-4bf3-bfdc-d39a82b078d9","lastUpdated":"2018-11-28T01:30:32.143Z","name":"02-01 Regular Event","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":14},{"dateCreated":"2019-02-18T01:57:03.300Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"select\n    ms.standId\n    ,mi.machineTypeName\n    ,mi.denom\n    ,ms.statusDescription\n    ,ms.statusId\n    ,ms.siteId\nfrom ve_vw_tv_machineStatus ms\nleft join VE_VW_tv_MachineInfo mi on ms.MachineID = mi.Mnum","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"startedAt","split":false},"name":"Get machine status","type":"db-ms-sql"},"rabbitmq-producer8":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.machineStatus","ttl":0},"name":"To mobile.machineStatus","type":"rabbitmq-producer"},"time1":{"config":{"errorHandling":"","format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 seconds","type":"time"}},"links":[{"from":"db-ms-sql2","to":"rabbitmq-producer8"},{"from":"time1","to":"db-ms-sql2"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.machineStatus","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":8,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.machineStatus","outputConnectors":[{"name":"Out"}],"width":175,"x":917.7503662109375,"y":361.5164794921875},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"startedAt","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    ms.standId\n    ,mi.machineTypeName\n    ,mi.denom\n    ,ms.statusDescription\n    ,ms.statusId\n    ,ms.siteId\nfrom ve_vw_tv_machineStatus ms\nleft join VE_VW_tv_MachineInfo mi on ms.MachineID = mi.Mnum","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Get machine status","outputConnectors":[{"name":"Out"}],"width":175,"x":628.7035522460938,"y":361.75823974609375},{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"invalid":false,"name":"5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":370.91241455078125,"y":360.4834899902344}]},"id":"36d7dca6-c8e9-45ce-849f-f16dac0304cf","lastUpdated":"2019-08-01T21:30:24.428Z","name":"M-06 Machine Status","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":11},{"dateCreated":"2018-06-25T02:58:25.702Z","definition":{"components":{"branch7":{"config":{"expression":"(function() {\n    if (payload.flag === \"AUTO_ASSIGN\"\n        && payload.appPrefs.alertAutoAssignmentEnabled.value === \"1\") {\n        return [payload, null];\n    }\n    if (payload.flag === \"URGENCY\"\n        && payload.appPrefs.alertUrgencyEnabled.value === \"1\") {\n        return [null, payload];\n    }\n    if (payload.flag === \"COMPLIANCE\"\n        && payload.appPrefs.alertComplianceEnabled.value === \"1\"\n        && payload.user.userComplianceID > 0) {\n        return [null, payload];\n    }\n    if (payload.flag === \"COMPLETE_ALERT\"\n        && payload.appPrefs.alertCompletionEnabled.value === \"1\") {\n        return [null, payload];\n    }\n    if (payload.flag === \"RESERVATION\"\n        && payload.appPrefs.alertMachineReservationEnabled.value === \"1\") {\n    return [null, payload];\n    }\n    return [null, null];\n})();","outputs":2,"variables":""},"name":"Flag and enabled?","type":"branch"},"db-ms-sql29":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    _id\r\nfrom ve_vw_tv_task \r\nwhere _id = '{{payload.task._ID}}'\r\nand userid = '{{payload.user.userID}}'\r\nand taskstatusid not in (12, 13)\r\nand emailsent = 0","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Filter out if email sent","type":"db-ms-sql"},"db-ms-sql32":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"update\n    ve_tv_task\nset\n    emailsent = 1\n    ,lastmodifiedbymodule = 'Flow 10-01 Email Handler: Flag email sent'\n    ,modificationdescription = 'Email sent flag set for auto-assignment alert'\nwhere _id = '{{payload.task._ID}}'","expressionType":"","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Flag email sent","type":"db-ms-sql"},"db-ms-sql41":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    email\nfrom ve_vw_tv_user\nwhere userroleid = '{{payload.email.userRoleID}}'\nand userstatusid not in (0, '{{payload.email.userStatusID}}')\nand email is not null\nand siteid = '{{payload.siteID}}'","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select emails","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"email.handle","routingKeyPattern":"email.handle"},"name":"From email.handle","type":"rabbitmq-consumer"},"rabbitmq-producer46":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.send","ttl":0},"name":"To email.send","type":"rabbitmq-producer"},"transform34":{"config":{"expression":"function() {\n    return payload.__input;\n}","variables":""},"name":"Transform","type":"transform"},"transform35":{"config":{"expression":"function() {\r\n    function formatTime(elapsed) {\r\n        h = Math.floor(elapsed / 3600);\r\n        mi = Math.floor((elapsed % 3600) / 60);\r\n        mi = mi < 10 ? \"0\" + mi : mi; \r\n        ss = elapsed % 60;\r\n        ss = ss < 10 ? \"0\" + ss : ss;\r\n        return h + \":\" + mi + \":\" + ss;\r\n    }\r\n    \r\n    var email = {};\r\n    email.to = null;\r\n    email.subject = null;\r\n    email.text = null;\r\n    email.userRoleID = null;\r\n    email.userStatusID = null;\r\n    \r\n    if (payload.flag === \"URGENCY\") {\r\n    \telapsed = formatTime(payload.task.elapsedTime);\r\n    \t\r\n    \temail.subject = \"Overdue task at \" + payload.task.location;\r\n    \temail.text = \"Task at location \" + payload.task.location\r\n    \t    + \" has been going on for: \" + elapsed + \".\";\r\n    \t\r\n    \tif ([0, 1, 2].indexOf(payload.task.taskStatusID) !== -1) {\r\n    \t    if (payload.task.newTaskUrgency === 4) {\r\n    \t        email.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.task.newTaskUrgency === 5) {\r\n    \t        email.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t} else if ([30, 31, 32].indexOf(payload.task.taskStatusID) !== -1) {\r\n    \t    if (payload.task.newTaskUrgency === 4) {\r\n    \t        email.userRoleID = 35;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.task.newTaskUrgency === 5) {\r\n    \t        email.userRoleID = 40;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t}\r\n    }\r\n    if (payload.flag === \"COMPLIANCE\") {\r\n    \telapsed = formatTime(payload.user.statusElapsedTime);\r\n    \t\r\n    \temail.subject = \"Overdue user \" + payload.user.userName;\r\n    \temail.text = \"User \" + payload.user.userName  \r\n    \t    + \" has been on break for: \" + elapsed + \".\";\r\n    \t\r\n    \tif ([10, 20, 25].indexOf(payload.user.userRoleID) !== -1) {\r\n    \t    if (payload.user.userComplianceID === 1) {\r\n    \t        email.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.user.userComplianceID === 2) {\r\n    \t        email.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t} else if ([15, 35, 40].indexOf(payload.user.userRoleID) !== -1) {\r\n    \t    if (payload.user.userComplianceID === 1) {\r\n    \t        email.userRoleID = 35;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.user.userComplianceID === 2) {\r\n    \t        email.userRoleID = 40;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t}\r\n    }\r\n\tif (payload.flag === \"COMPLETE_ALERT\") {\r\n    \telapsed = formatTime(payload.task.elapsedTime);\r\n\t\r\n\t\temail.subject = \"Task completion alert at \" + payload.task.location;\r\n        email.text = \"Task at \" + payload.task.location\r\n\t\t\t+ \" not completed after: \" + elapsed + \".\";\r\n\t\r\n    \tif (payload.task.completionAlert == 2) {\r\n\t\t\tif (!payload.task.parentID) {\r\n\t\t\t\temail.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n\t\t\t} else {\r\n\t\t\t\temail.userRoleID = 40;\r\n    \t        email.userStatusID = '';\r\n\t\t\t}\r\n    \t} else if (payload.task.completionAlert == 1) {\r\n\t\t\tif (!payload.task.parentID) {\r\n\t\t\t\temail.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n\t\t\t} else {\r\n\t\t\t\temail.userRoleID = 35;\r\n    \t        email.userStatusID = 10;\r\n\t\t\t}\r\n    \t}\r\n    }\r\n\t\r\n\t\r\n\tif (payload.flag === \"RESERVATION\") {\r\n    \telapsed = formatTime(payload.reservation.elapsedTime);\r\n\t\r\n\t\temail.subject = \"Machine Reservation alert at \" + payload.reservation.location;\r\n        email.text = \"Reservation at \" + payload.reservation.location\r\n\t\t\t+ \" on going for: \" + elapsed + \".\";\r\n\t\r\n    \tif (payload.reservation.newOverdue == 3) {\r\n\t\t\t    email.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n    \t} else if (payload.reservation.newOverdue == 2) {\r\n\t\t\t\temail.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n    \t}\r\n    }\r\n    payload.email = email;\r\n    return payload;\r\n}","variables":""},"name":"Add email 2","type":"transform"},"transform4":{"config":{"expression":"function() {\n\tvar email = {};\n\t\n\tif (payload.appPrefs.sharedDeviceGenericEmails.value === \"1\") {\n\t    email.to = payload.user.deviceEmail;\n\t} else {\n\t    email.to = payload.user.email;\n\t}\n\tif (payload.overflowUsed > 0 ) {\n\t    email.subject = 'New Overflow Task at ' + payload.task.location;\n\t    email.text = 'Hi ' + payload.user.userName + ','\n\t\t\t+ '\\nA new overflow task has been auto-assigned to you.'\n\t\t\t+ '\\nOverflow task at ' + payload.task.location + '.';\n\t} else {\n        email.subject = 'New Task at ' + payload.task.location;\n        email.text = 'Hi ' + payload.user.userName + ','\n\t\t\t+ '\\nA new task has been auto-assigned to you.'\n\t\t\t+ '\\nTask at ' + payload.task.location + '.';\n\t}\n\tpayload.email = email;\n\t\n    return payload;\n}","variables":""},"name":"Add email 1","type":"transform"},"transform43":{"config":{"expression":"function() {\r\n    var to = '';\r\n    for (var i = 0; i < payload.count - 1; i++) {\r\n        to += payload.data[i].email + \",\";\r\n    }\r\n    to += payload.data[payload.count - 1].email;\r\n    \r\n    var newPayload = payload.__input;\r\n    newPayload.email.to = to;\r\n    return newPayload;\r\n}","variables":""},"name":"Concat emails","type":"transform"}},"links":[{"from":"db-ms-sql41","to":"transform43"},{"from":"transform34","to":"db-ms-sql32"},{"from":"branch7:0","to":"transform4"},{"from":"transform4","to":"db-ms-sql29"},{"from":"db-ms-sql29","to":"transform34"},{"from":"transform35","to":"db-ms-sql41"},{"from":"branch7:1","to":"transform35"},{"from":"rabbitmq-consumer1","to":"branch7"},{"from":"transform43","to":"rabbitmq-producer46"},{"from":"db-ms-sql32","to":"rabbitmq-producer46"}]},"description":"<div><!--block-->email.handle ==&gt; email.send</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":43},"source":{"connectorIndex":0,"nodeID":41}},{"dest":{"connectorIndex":0,"nodeID":32},"source":{"connectorIndex":0,"nodeID":34}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":29},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":34},"source":{"connectorIndex":0,"nodeID":29}},{"dest":{"connectorIndex":0,"nodeID":41},"source":{"connectorIndex":0,"nodeID":35}},{"dest":{"connectorIndex":0,"nodeID":35},"source":{"connectorIndex":1,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":46},"source":{"connectorIndex":0,"nodeID":43}},{"dest":{"connectorIndex":0,"nodeID":46},"source":{"connectorIndex":0,"nodeID":32}}],"name":"7 IV Auto Assignment - Generate Email [Multi Device]","nodes":[{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update\n    ve_tv_task\nset\n    emailsent = 1\n    ,lastmodifiedbymodule = 'Flow 10-01 Email Handler: Flag email sent'\n    ,modificationdescription = 'Email sent flag set for auto-assignment alert'\nwhere _id = '{{payload.task._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":32,"inputConnectors":[{"name":""}],"name":"Flag email sent","outputConnectors":[{"name":"Out"}],"width":175,"x":375.94202423095703,"y":146.77506637573242},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    _id\r\nfrom ve_vw_tv_task \r\nwhere _id = '{{payload.task._ID}}'\r\nand userid = '{{payload.user.userID}}'\r\nand taskstatusid not in (12, 13)\r\nand emailsent = 0","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":29,"inputConnectors":[{"name":""}],"invalid":false,"name":"Filter out if email sent","outputConnectors":[{"name":"Out"}],"width":175,"x":-50.48056489229202,"y":147.18120002746582},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    return payload.__input;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":34,"inputConnectors":[{"name":""}],"name":"Transform","outputConnectors":[{"name":"Out"}],"width":175,"x":162.3615255355835,"y":146.19865798950195},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.send","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":46,"inputConnectors":[{"name":""}],"name":"To email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":620.7828140258789,"y":204.67074584960938},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"email.handle","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"email.handle","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From email.handle","outputConnectors":[{"name":"Out"}],"width":175,"x":-706.2379703521729,"y":198.97360134124756},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\r\n    var to = '';\r\n    for (var i = 0; i < payload.count - 1; i++) {\r\n        to += payload.data[i].email + \",\";\r\n    }\r\n    to += payload.data[payload.count - 1].email;\r\n    \r\n    var newPayload = payload.__input;\r\n    newPayload.email.to = to;\r\n    return newPayload;\r\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":43,"inputConnectors":[{"name":""}],"name":"Concat emails","outputConnectors":[{"name":"Out"}],"width":175,"x":379.2167434692383,"y":280.02398681640625},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    email\nfrom ve_vw_tv_user\nwhere userroleid = '{{payload.email.userRoleID}}'\nand userstatusid not in (0, '{{payload.email.userStatusID}}')\nand email is not null\nand siteid = '{{payload.siteID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":41,"inputConnectors":[{"name":""}],"name":"Select emails","outputConnectors":[{"name":"Out"}],"width":175,"x":-54.38419437408447,"y":279.37841796875},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n\tvar email = {};\n\t\n\tif (payload.appPrefs.sharedDeviceGenericEmails.value === \"1\") {\n\t    email.to = payload.user.deviceEmail;\n\t} else {\n\t    email.to = payload.user.email;\n\t}\n\tif (payload.overflowUsed > 0 ) {\n\t    email.subject = 'New Overflow Task at ' + payload.task.location;\n\t    email.text = 'Hi ' + payload.user.userName + ','\n\t\t\t+ '\\nA new overflow task has been auto-assigned to you.'\n\t\t\t+ '\\nOverflow task at ' + payload.task.location + '.';\n\t} else {\n        email.subject = 'New Task at ' + payload.task.location;\n        email.text = 'Hi ' + payload.user.userName + ','\n\t\t\t+ '\\nA new task has been auto-assigned to you.'\n\t\t\t+ '\\nTask at ' + payload.task.location + '.';\n\t}\n\tpayload.email = email;\n\t\n    return payload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":4,"inputConnectors":[{"name":""}],"name":"Add email 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-265.205735206604,"y":147.04322242736816},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\r\n    function formatTime(elapsed) {\r\n        h = Math.floor(elapsed / 3600);\r\n        mi = Math.floor((elapsed % 3600) / 60);\r\n        mi = mi < 10 ? \"0\" + mi : mi; \r\n        ss = elapsed % 60;\r\n        ss = ss < 10 ? \"0\" + ss : ss;\r\n        return h + \":\" + mi + \":\" + ss;\r\n    }\r\n    \r\n    var email = {};\r\n    email.to = null;\r\n    email.subject = null;\r\n    email.text = null;\r\n    email.userRoleID = null;\r\n    email.userStatusID = null;\r\n    \r\n    if (payload.flag === \"URGENCY\") {\r\n    \telapsed = formatTime(payload.task.elapsedTime);\r\n    \t\r\n    \temail.subject = \"Overdue task at \" + payload.task.location;\r\n    \temail.text = \"Task at location \" + payload.task.location\r\n    \t    + \" has been going on for: \" + elapsed + \".\";\r\n    \t\r\n    \tif ([0, 1, 2].indexOf(payload.task.taskStatusID) !== -1) {\r\n    \t    if (payload.task.newTaskUrgency === 4) {\r\n    \t        email.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.task.newTaskUrgency === 5) {\r\n    \t        email.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t} else if ([30, 31, 32].indexOf(payload.task.taskStatusID) !== -1) {\r\n    \t    if (payload.task.newTaskUrgency === 4) {\r\n    \t        email.userRoleID = 35;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.task.newTaskUrgency === 5) {\r\n    \t        email.userRoleID = 40;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t}\r\n    }\r\n    if (payload.flag === \"COMPLIANCE\") {\r\n    \telapsed = formatTime(payload.user.statusElapsedTime);\r\n    \t\r\n    \temail.subject = \"Overdue user \" + payload.user.userName;\r\n    \temail.text = \"User \" + payload.user.userName  \r\n    \t    + \" has been on break for: \" + elapsed + \".\";\r\n    \t\r\n    \tif ([10, 20, 25].indexOf(payload.user.userRoleID) !== -1) {\r\n    \t    if (payload.user.userComplianceID === 1) {\r\n    \t        email.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.user.userComplianceID === 2) {\r\n    \t        email.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t} else if ([15, 35, 40].indexOf(payload.user.userRoleID) !== -1) {\r\n    \t    if (payload.user.userComplianceID === 1) {\r\n    \t        email.userRoleID = 35;\r\n    \t        email.userStatusID = 10;\r\n    \t    } else if (payload.user.userComplianceID === 2) {\r\n    \t        email.userRoleID = 40;\r\n    \t        email.userStatusID = '';\r\n    \t    }\r\n    \t}\r\n    }\r\n\tif (payload.flag === \"COMPLETE_ALERT\") {\r\n    \telapsed = formatTime(payload.task.elapsedTime);\r\n\t\r\n\t\temail.subject = \"Task completion alert at \" + payload.task.location;\r\n        email.text = \"Task at \" + payload.task.location\r\n\t\t\t+ \" not completed after: \" + elapsed + \".\";\r\n\t\r\n    \tif (payload.task.completionAlert == 2) {\r\n\t\t\tif (!payload.task.parentID) {\r\n\t\t\t\temail.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n\t\t\t} else {\r\n\t\t\t\temail.userRoleID = 40;\r\n    \t        email.userStatusID = '';\r\n\t\t\t}\r\n    \t} else if (payload.task.completionAlert == 1) {\r\n\t\t\tif (!payload.task.parentID) {\r\n\t\t\t\temail.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n\t\t\t} else {\r\n\t\t\t\temail.userRoleID = 35;\r\n    \t        email.userStatusID = 10;\r\n\t\t\t}\r\n    \t}\r\n    }\r\n\t\r\n\t\r\n\tif (payload.flag === \"RESERVATION\") {\r\n    \telapsed = formatTime(payload.reservation.elapsedTime);\r\n\t\r\n\t\temail.subject = \"Machine Reservation alert at \" + payload.reservation.location;\r\n        email.text = \"Reservation at \" + payload.reservation.location\r\n\t\t\t+ \" on going for: \" + elapsed + \".\";\r\n\t\r\n    \tif (payload.reservation.newOverdue == 3) {\r\n\t\t\t    email.userRoleID = 25;\r\n    \t        email.userStatusID = '';\r\n    \t} else if (payload.reservation.newOverdue == 2) {\r\n\t\t\t\temail.userRoleID = 20;\r\n    \t        email.userStatusID = 10;\r\n    \t}\r\n    }\r\n    payload.email = email;\r\n    return payload;\r\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":35,"inputConnectors":[{"name":""}],"name":"Add email 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-266.28796577453613,"y":277.8127212524414},{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\n    if (payload.flag === \"AUTO_ASSIGN\"\n        && payload.appPrefs.alertAutoAssignmentEnabled.value === \"1\") {\n        return [payload, null];\n    }\n    if (payload.flag === \"URGENCY\"\n        && payload.appPrefs.alertUrgencyEnabled.value === \"1\") {\n        return [null, payload];\n    }\n    if (payload.flag === \"COMPLIANCE\"\n        && payload.appPrefs.alertComplianceEnabled.value === \"1\"\n        && payload.user.userComplianceID > 0) {\n        return [null, payload];\n    }\n    if (payload.flag === \"COMPLETE_ALERT\"\n        && payload.appPrefs.alertCompletionEnabled.value === \"1\") {\n        return [null, payload];\n    }\n    if (payload.flag === \"RESERVATION\"\n        && payload.appPrefs.alertMachineReservationEnabled.value === \"1\") {\n    return [null, payload];\n    }\n    return [null, null];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":7,"inputConnectors":[{"name":""}],"name":"Flag and enabled?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":-498.6998839378357,"y":196.6182985305786}],"viewBox":[-47,-30,1,872]},"id":"15add36f-a6b3-4368-8885-79d31c82ea20","lastUpdated":"2019-01-31T01:12:48.446Z","name":"10-01 Email Handler","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":7},{"dateCreated":"2019-03-10T22:45:22.377Z","definition":{"components":{"branch32":{"config":{"errorHandling":"","expression":"(function() {\r\n    if (payload.flag === \"UPDATE\" ) {\r\n        return [payload, null, null, null, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"AUTO_ASSIGN\") {\r\n        return [null, payload, null, null, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"URGENCY\") {\r\n        return [null, null, payload, null, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"TECH_ESC\" || payload.flag === \"WORK_ORDER_ESC\") {\r\n        return [null, null, null, payload, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"COMPLETE_ALERT\") {\r\n        return [null, null, null, null, payload, null, null, null];\r\n    }\r\n    if (payload.flag === \"JP_VERIFIER\") {\r\n        return [null, null, null, null, null, payload, null, null];\r\n    }\r\n    if (payload.flag === \"REASSIGN\") {\r\n        return [null, null, null, null, null, null, payload, null];\r\n    }\r\n    if (payload.flag === \"MOBILE\") {\r\n        return [null, null, null, null, null, null, null, payload];\r\n    }\r\n})();","globalFunctionConfiguration":[],"outputs":8,"variables":""},"name":"Flag?","type":"branch"},"db-ms-sql29":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_task\nset\n    taskurgency = nullif('{{payload.task.newTaskUrgency}}', '')\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Task urgency'\n    ,modificationdescription = 'Task urgency updated'\nwhere _id = '{{payload.task._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Task urgency","type":"db-ms-sql"},"db-ms-sql30":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_task\nset \n    taskstatusid = nullif('{{payload.task.newTaskStatusID}}', '')\n    ,staffid = nullif('{{payload.user.staffID}}', '')\n    ,userid = nullif('{{payload.user.userID}}' , '')\n    ,taskassigned = current_timestamp\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Auto assignment'\n    ,modificationdescription = 'Task assigned - Polled At: {{payload.timestamp}}, User ID: {{payload.user.userID}}, User Status ID: {{payload.user.userStatusID}}, User Section List: {{payload.user.sectionList}}, User Zone List: {{payload.user.zoneList}}, User Task Count: {{payload.user.taskCount}}, User Task Types: {{payload.user.taskTypeList}}, Is Technician: {{payload.user.isTechnician}}, Is Attendant: {{payload.user.isAttendant}}, Overflow Used: {{payload.overflowUsed}}'\nwhere _id = '{{payload.task._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Auto assignment","type":"db-ms-sql"},"db-ms-sql31":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_task\nset\n    taskstatusid = coalesce(nullif('{{payload.task.newTaskStatusID}}', ''), taskstatusid)\n    ,taskcompleted = coalesce(nullif('{{payload.task.newTaskCompleted}}', ''), taskcompleted)\n    ,staffid = coalesce(nullif('{{payload.task.newStaffID}}', ''), staffid)\n    ,userid = coalesce(nullif('{{payload.task.newUserID}}', ''), userid)\n    ,taskreset = coalesce(nullif('{{payload.task.newTaskReset}}', ''), taskreset)\n    ,parentid = coalesce(nullif('{{payload.task.newParentID}}', ''), parentid)\n    ,istechtask = coalesce(nullif('{{payload.task.newIsTechTask}}', ''), istechtask)\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Update task'\n    ,modificationdescription = ''\nwhere _id = nullif('{{payload.task._ID}}', '')","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Update task","type":"db-ms-sql"},"db-ms-sql33":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_task \r\nset\r\n    techescalated = 'True'\r\n    ,taskcompleted = current_timestamp\r\n    ,taskstatusid = 13\r\n    ,_version = _version + 1\r\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Tech escalation'\r\n    ,modificationdescription = 'Parent to tech task status updated to completed'\r\nwhere _ID =  '{{payload.task._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Tech escalation","type":"db-ms-sql"},"db-ms-sql35":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"select _id\nfrom ve_vw_tv_task\nwhere _id = '{{payload.task._ID}}'\nand taskstatusid not in (1, 12, 13)\nand (\n    (staffid is null and userid is null)\n    or taskstatusid = 7\n    )\nand '{{payload.appPrefs.assignMaxTasks.value}}' > (\n\tselect\n\t\tcount(t._id)\n\tfrom (\n\t    select\n\t        _id\n\t    from ve_vw_tv_task\n\t    where taskstatusid not in (12, 13, 7)\n\t    and userid = '{{payload.user.userID}}'\n\t    ) t\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Filter by task count","type":"db-ms-sql"},"db-ms-sql39":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_task\nset\n    completionalert = completionalert + 1\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Task completion alert'\n    ,modificationdescription = 'Completion alert incremented'\nwhere _id = '{{payload.task._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Task completion alert","type":"db-ms-sql"},"db-ms-sql40":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_task \r\nset\r\n    taskstatusid = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 33 else 3 end\r\n    ,_version = _version + 1\r\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Jackpot verifier'\r\n    ,modificationdescription = 'Parent task status updated to carded'\r\nwhere _ID =  '{{payload.task._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Jackpot verifier","type":"db-ms-sql"},"db-ms-sql41":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_task\nset \n    taskstatusid = 7\n    ,parentuserid = '{{payload.task.userID}}'\n    ,taskassigned = null\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Reassign'\n    ,modificationdescription = 'Task status set to reassign, parent user set, task assigned date set to null'\nwhere _id = nullif('{{payload.task._ID}}', '')","expressionType":"","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Reassign","type":"db-ms-sql"},"db-ms-sql49":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"ignore","expression":"{{payload._sql}}","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Mobile","type":"db-ms-sql"},"filter42":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Email?","type":"filter"},"filter43":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Email?","type":"filter"},"filter44":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Email?","type":"filter"},"filter45":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Email?","type":"filter"},"filter46":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Email?","type":"filter"},"filter47":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Email?","type":"filter"},"filter48":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Email?","type":"filter"},"rabbitmq-consumer2":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"errorHandling":"","exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"task.update","routingKeyPattern":"task.update"},"name":"From task.update","type":"rabbitmq-consumer"},"rabbitmq-producer11":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.handle","ttl":0},"name":"To email.handle","type":"rabbitmq-producer"},"rabbitmq-producer51":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.task.update.{{payload.deviceID}}","ttl":0},"name":"To mobile.task.update.{{payload.deviceID}}","type":"rabbitmq-producer"},"transform38":{"config":{"errorHandling":"","expression":"(function() {\n    return payload.__input;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Tidy 1","type":"transform"},"transform50":{"config":{"errorHandling":"","expression":"(function() {\n    let sql = `\nupdate ve_tv_task\nset\n    ${Object.entries(payload.task)\n        .filter(entry => {\n            return entry[0].toLowerCase() !== 'taskid'\n                && entry[0].toLowerCase() !== 'deviceid'\n                && entry[1] !== undefined\n        })\n        .map(entry => formatEntry(...entry))\n        .join('\\n    ,')},\n_version = _version + 1 \nwhere _id = '${payload.task.taskID}'\n`;\n\tpayload._sql = sql;\n    return payload;\n\t\n\tfunction formatEntry(key, value) {\n\t    if (value !== null) {\n\t        if (key.toLowerCase() === 'tasknote') {\n\t            // symbols to escape\n\t            const patt = /[\\']/gi;\n\t            value = value.replace(/'/g, \"''\");\n\t           //value = value.replace(patt, '\\\\$&');\n\t        }\n\t        value = `'${value}'`;\n\t    }\n\t    return `${key} = ${value}`; \n\t}\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Mobile Format sql","type":"transform"},"transform52":{"config":{"errorHandling":"","expression":"(function() {\n\treturn payload.task;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Tidy 2","type":"transform"}},"links":[{"from":"branch32:2","to":"db-ms-sql29"},{"from":"branch32:3","to":"db-ms-sql33"},{"from":"branch32:0","to":"db-ms-sql31"},{"from":"rabbitmq-consumer2","to":"branch32"},{"from":"db-ms-sql35","to":"transform38"},{"from":"branch32:1","to":"db-ms-sql35"},{"from":"branch32:4","to":"db-ms-sql39"},{"from":"branch32:5","to":"db-ms-sql40"},{"from":"branch32:6","to":"db-ms-sql41"},{"from":"transform38","to":"db-ms-sql30"},{"from":"filter42","to":"rabbitmq-producer11"},{"from":"db-ms-sql31","to":"filter48"},{"from":"db-ms-sql29","to":"filter43"},{"from":"db-ms-sql33","to":"filter44"},{"from":"db-ms-sql39","to":"filter45"},{"from":"db-ms-sql40","to":"filter46"},{"from":"db-ms-sql41","to":"filter47"},{"from":"filter43","to":"rabbitmq-producer11"},{"from":"filter44","to":"rabbitmq-producer11"},{"from":"filter45","to":"rabbitmq-producer11"},{"from":"filter46","to":"rabbitmq-producer11"},{"from":"filter47","to":"rabbitmq-producer11"},{"from":"filter48","to":"rabbitmq-producer11"},{"from":"db-ms-sql30","to":"filter42"},{"from":"branch32:7","to":"transform50"},{"from":"transform50","to":"db-ms-sql49"},{"from":"db-ms-sql49","to":"transform52"},{"from":"transform52","to":"rabbitmq-producer51"}]},"description":"<div><!--block-->task.update ==&gt; email.handle, task.history</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":29},"source":{"connectorIndex":2,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":33},"source":{"connectorIndex":3,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":31},"source":{"connectorIndex":0,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":32},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":38},"source":{"connectorIndex":0,"nodeID":35}},{"dest":{"connectorIndex":0,"nodeID":35},"source":{"connectorIndex":1,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":39},"source":{"connectorIndex":4,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":40},"source":{"connectorIndex":5,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":41},"source":{"connectorIndex":6,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":30},"source":{"connectorIndex":0,"nodeID":38}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":42}},{"dest":{"connectorIndex":0,"nodeID":48},"source":{"connectorIndex":0,"nodeID":31}},{"dest":{"connectorIndex":0,"nodeID":43},"source":{"connectorIndex":0,"nodeID":29}},{"dest":{"connectorIndex":0,"nodeID":44},"source":{"connectorIndex":0,"nodeID":33}},{"dest":{"connectorIndex":0,"nodeID":45},"source":{"connectorIndex":0,"nodeID":39}},{"dest":{"connectorIndex":0,"nodeID":46},"source":{"connectorIndex":0,"nodeID":40}},{"dest":{"connectorIndex":0,"nodeID":47},"source":{"connectorIndex":0,"nodeID":41}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":43}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":44}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":45}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":46}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":47}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":48}},{"dest":{"connectorIndex":0,"nodeID":42},"source":{"connectorIndex":0,"nodeID":30}},{"dest":{"connectorIndex":0,"nodeID":50},"source":{"connectorIndex":7,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":49},"source":{"connectorIndex":0,"nodeID":50}},{"dest":{"connectorIndex":0,"nodeID":52},"source":{"connectorIndex":0,"nodeID":49}},{"dest":{"connectorIndex":0,"nodeID":51},"source":{"connectorIndex":0,"nodeID":52}}],"name":"01 - Update Task - NEWs","nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"task.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"task.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":2,"inputConnectors":[],"name":"From task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":-667.5209238529205,"y":150.64034271240234},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select _id\nfrom ve_vw_tv_task\nwhere _id = '{{payload.task._ID}}'\nand taskstatusid not in (1, 12, 13)\nand (\n    (staffid is null and userid is null)\n    or taskstatusid = 7\n    )\nand '{{payload.appPrefs.assignMaxTasks.value}}' > (\n\tselect\n\t\tcount(t._id)\n\tfrom (\n\t    select\n\t        _id\n\t    from ve_vw_tv_task\n\t    where taskstatusid not in (12, 13, 7)\n\t    and userid = '{{payload.user.userID}}'\n\t    ) t\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":35,"inputConnectors":[{"name":""}],"name":"Filter by task count","outputConnectors":[{"name":"Out"}],"width":175,"x":-194.46541595458984,"y":175.40016174316406},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.__input;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":38,"inputConnectors":[{"name":""}],"invalid":false,"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":6.326975762844086,"y":174.40074920654297},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_task\nset\n    taskurgency = nullif('{{payload.task.newTaskUrgency}}', '')\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Task urgency'\n    ,modificationdescription = 'Task urgency updated'\nwhere _id = '{{payload.task._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":29,"inputConnectors":[{"name":""}],"name":"Task urgency","outputConnectors":[{"name":"Out"}],"width":175,"x":5.132828235626221,"y":294.06601905822754},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_task \r\nset\r\n    techescalated = 'True'\r\n    ,taskcompleted = current_timestamp\r\n    ,taskstatusid = 13\r\n    ,_version = _version + 1\r\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Tech escalation'\r\n    ,modificationdescription = 'Parent to tech task status updated to completed'\r\nwhere _ID =  '{{payload.task._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":33,"inputConnectors":[{"name":""}],"name":"Tech escalation","outputConnectors":[{"name":"Out"}],"width":175,"x":-1.7190957069396973,"y":400.063627243042},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_task\nset\n    completionalert = completionalert + 1\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Task completion alert'\n    ,modificationdescription = 'Completion alert incremented'\nwhere _id = '{{payload.task._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":39,"inputConnectors":[{"name":""}],"name":"Task completion alert","outputConnectors":[{"name":"Out"}],"width":175,"x":0.9730720520019531,"y":504.32755279541016},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_task\nset \n    taskstatusid = 7\n    ,parentuserid = '{{payload.task.userID}}'\n    ,taskassigned = null\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Reassign'\n    ,modificationdescription = 'Task status set to reassign, parent user set, task assigned date set to null'\nwhere _id = nullif('{{payload.task._ID}}', '')","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":41,"inputConnectors":[{"name":"In"}],"name":"Reassign","outputConnectors":[{"name":"Out"}],"width":175,"x":7.190620422363281,"y":713.712646484375},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_task \r\nset\r\n    taskstatusid = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 33 else 3 end\r\n    ,_version = _version + 1\r\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Jackpot verifier'\r\n    ,modificationdescription = 'Parent task status updated to carded'\r\nwhere _ID =  '{{payload.task._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":40,"inputConnectors":[{"name":""}],"name":"Jackpot verifier","outputConnectors":[{"name":"Out"}],"width":175,"x":5.444934844970703,"y":604.1541748046875},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":42,"inputConnectors":[{"name":"In"}],"name":"Email?","outputConnectors":[{"name":"Out"}],"width":175,"x":420.9286193847656,"y":179.46060180664062},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_task\nset\n    taskstatusid = coalesce(nullif('{{payload.task.newTaskStatusID}}', ''), taskstatusid)\n    ,taskcompleted = coalesce(nullif('{{payload.task.newTaskCompleted}}', ''), taskcompleted)\n    ,staffid = coalesce(nullif('{{payload.task.newStaffID}}', ''), staffid)\n    ,userid = coalesce(nullif('{{payload.task.newUserID}}', ''), userid)\n    ,taskreset = coalesce(nullif('{{payload.task.newTaskReset}}', ''), taskreset)\n    ,parentid = coalesce(nullif('{{payload.task.newParentID}}', ''), parentid)\n    ,istechtask = coalesce(nullif('{{payload.task.newIsTechTask}}', ''), istechtask)\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Update task'\n    ,modificationdescription = ''\nwhere _id = nullif('{{payload.task._ID}}', '')","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":31,"inputConnectors":[{"name":""}],"name":"Update task","outputConnectors":[{"name":"Out"}],"width":175,"x":0.46001482009887695,"y":43.0172438621521},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_task\nset \n    taskstatusid = nullif('{{payload.task.newTaskStatusID}}', '')\n    ,staffid = nullif('{{payload.user.staffID}}', '')\n    ,userid = nullif('{{payload.user.userID}}' , '')\n    ,taskassigned = current_timestamp\n    ,_version = _version + 1\n    ,lastmodifiedbymodule = 'Flow 06-02 Update Task: Auto assignment'\n    ,modificationdescription = 'Task assigned - Polled At: {{payload.timestamp}}, User ID: {{payload.user.userID}}, User Status ID: {{payload.user.userStatusID}}, User Section List: {{payload.user.sectionList}}, User Zone List: {{payload.user.zoneList}}, User Task Count: {{payload.user.taskCount}}, User Task Types: {{payload.user.taskTypeList}}, Is Technician: {{payload.user.isTechnician}}, Is Attendant: {{payload.user.isAttendant}}, Overflow Used: {{payload.overflowUsed}}'\nwhere _id = '{{payload.task._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":30,"inputConnectors":[{"name":""}],"name":"Auto assignment","outputConnectors":[{"name":"Out"}],"width":175,"x":214.5338158607483,"y":177.4864730834961},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.handle","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":11,"inputConnectors":[{"name":""}],"name":"To email.handle","outputConnectors":[{"name":"Out"}],"width":175,"x":683.3735318183899,"y":179.67740631103516},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":43,"inputConnectors":[{"name":"In"}],"name":"Email?","outputConnectors":[{"name":"Out"}],"width":175,"x":215.82644653320312,"y":289.6387023925781},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":44,"inputConnectors":[{"name":"In"}],"name":"Email?","outputConnectors":[{"name":"Out"}],"width":175,"x":221.32232666015625,"y":402.3043212890625},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":45,"inputConnectors":[{"name":"In"}],"name":"Email?","outputConnectors":[{"name":"Out"}],"width":175,"x":219.75018310546875,"y":512.668212890625},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":46,"inputConnectors":[{"name":"In"}],"name":"Email?","outputConnectors":[{"name":"Out"}],"width":175,"x":215.952392578125,"y":611.4091186523438},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":48,"inputConnectors":[{"name":"In"}],"name":"Email?","outputConnectors":[{"name":"Out"}],"width":175,"x":214.05352783203125,"y":45.54750061035156},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output.\n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n\n**Using our available helpers Lodash, Moment and UUID**:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date.\n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want.\n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n","name":"Branch","properties":[{"defaultValue":8,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\r\n    if (payload.flag === \"UPDATE\" ) {\r\n        return [payload, null, null, null, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"AUTO_ASSIGN\") {\r\n        return [null, payload, null, null, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"URGENCY\") {\r\n        return [null, null, payload, null, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"TECH_ESC\" || payload.flag === \"WORK_ORDER_ESC\") {\r\n        return [null, null, null, payload, null, null, null, null];\r\n    }\r\n    if (payload.flag === \"COMPLETE_ALERT\") {\r\n        return [null, null, null, null, payload, null, null, null];\r\n    }\r\n    if (payload.flag === \"JP_VERIFIER\") {\r\n        return [null, null, null, null, null, payload, null, null];\r\n    }\r\n    if (payload.flag === \"REASSIGN\") {\r\n        return [null, null, null, null, null, null, payload, null];\r\n    }\r\n    if (payload.flag === \"MOBILE\") {\r\n        return [null, null, null, null, null, null, null, payload];\r\n    }\r\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":32,"inputConnectors":[{"name":""}],"invalid":false,"name":"Flag?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"},{"name":"Out:3"},{"name":"Out:4"},{"name":"Out:5"},{"name":"Out:6"},{"name":"Out 7"},{"name":"Out 8"}],"width":175,"x":-454.96475529670715,"y":150.6477928161621},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.flag === \"AUTO_ASSIGN\"\n        || (payload.flag === \"URGENCY\" && payload.task.newTaskUrgency >= 4)\n        || (payload.flag === \"COMPLETE_ALERT\" && payload.task.completionAlert > 0);\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":47,"inputConnectors":[{"name":"In"}],"name":"Email?","outputConnectors":[{"name":"Out"}],"width":175,"x":221.64898681640625,"y":713.94775390625},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    let sql = `\nupdate ve_tv_task\nset\n    ${Object.entries(payload.task)\n        .filter(entry => {\n            return entry[0].toLowerCase() !== 'taskid'\n                && entry[0].toLowerCase() !== 'deviceid'\n                && entry[1] !== undefined\n        })\n        .map(entry => formatEntry(...entry))\n        .join('\\n    ,')},\n_version = _version + 1 \nwhere _id = '${payload.task.taskID}'\n`;\n\tpayload._sql = sql;\n    return payload;\n\t\n\tfunction formatEntry(key, value) {\n\t    if (value !== null) {\n\t        if (key.toLowerCase() === 'tasknote') {\n\t            // symbols to escape\n\t            const patt = /[\\']/gi;\n\t            value = value.replace(/'/g, \"''\");\n\t           //value = value.replace(patt, '\\\\$&');\n\t        }\n\t        value = `'${value}'`;\n\t    }\n\t    return `${key} = ${value}`; \n\t}\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":50,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Mobile Format sql","outputConnectors":[{"name":"Out"}],"width":175,"x":10.685075759887695,"y":821.103515625},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload._sql}}","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"ignore","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":49,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Mobile","outputConnectors":[{"name":"Out"}],"width":175,"x":225.44387817382812,"y":822.4962158203125},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.task.update.{{payload.deviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":51,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.task.update.{{payload.deviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":660.7133483886719,"y":824.2201538085938},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn payload.task;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":52,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":435.64703369140625,"y":825.0323486328125}],"viewBox":[29,-150,1,1076]},"id":"8e957ca6-c663-40c6-b19d-2ed5c5240531","lastUpdated":"2019-09-03T02:15:48.185Z","name":"06-02 Update Task","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":33},{"dateCreated":"2019-01-27T22:04:51.809Z","definition":{"components":{"db-ms-sql6":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"date","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    e.uniqueId\n    ,e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,u.userId\n\t,t1._id as taskId\n\t,t1.taskStatusId\n\t,t1.note\n\t,t1.source\n\t,t1.taskTypeId\n\t,t1.userid as taskUserId\nfrom ve_vw_tv_event e\nleft join ve_tv_user u with (noLock)\non e.staffId = u.staffId\nand e.siteId = u.siteId\nleft join ve_tv_meal m with (noLock)\non e.mnum = m.machineId\nand e.siteId = m.siteId\nand (\n\tm.isClosed = 0\n\tor e.date < m.endTime\n)\nleft join (\n\tselect\n\t\trow_number() over(partition by siteid, machineid order by createdat desc) as rownum \n\t\t,machineid\n\t\t,siteid\n\t\t,_id\n\t\t,taskstatusid\n\t\t,source\n\t\t,tasktypeid\n\t\t,userid\n\t\t,createdat\n\t\t,note\n\tfrom (\n\t\tselect\n\t\t\tmachineid\n\t\t\t,siteid\n\t\t\t,_id\n\t\t\t,taskstatusid\n\t\t\t,'Task' as source\n\t\t\t,tasktypeid\n\t\t\t,userid\n\t\t\t,taskcreated as createdat\n\t\t\t,tasknote as note\n\t\tfrom ve_vw_tv_task\n\t\twhere taskstatusid not in (12, 13)\n\t\tunion all \n\t\tselect\n\t\t\tmachineid\n\t\t\t,siteid\n\t\t\t,_id\n\t\t\t,taskstatusid\n\t\t\t,'Work Order' as source\n\t\t\t,tasktypeid\n\t\t\t,userid\n\t\t\t,createdat\n\t\t\t,note\n\t\tfrom ve_vw_tv_workorder\n\t\twhere taskstatusid not in (12, 13)\n\t) t2\n) t1\non t1.rownum = 1\nand e.mnum = t1.machineid\nand e.siteid = t1.siteid\nwhere m._id is null\nand e.machineAccess = 1\nand e.IsSubscribed = 1\nand date > '{{delta}}'\norder by date","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select events","type":"db-ms-sql"},"rabbitmq-producer7":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.meal","ttl":0},"name":"To sql.meal","type":"rabbitmq-producer"},"time5":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 second","type":"time"},"transform2":{"config":{"expression":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\nif not exists(\n    select\n        1\n    from ve_tv_meal with (nolock)\n    where machineId = ${payload.mnum}\n    and siteId = ${payload.siteId}\n    and (\n        isClosed = 0\n        or endTime > '${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    )\n)\n    insert into ve_tv_meal (\n    \t_id\n    \t,_version\n    \t,siteID\n    \t,location\n    \t,machineId\n    \t,startTime\n    \t,staffId\n    \t,userId\n    \t,eventCode1\n    \t,eventCode2\n    \t,eventDesc\n    \t,startEventId\n    \t,source\n    \t,taskId\n    \t,taskStatusId\n    \t,taskTypeId\n    \t,note\n    ) values (\n    \tnewid()\n    \t,0\n    \t,${payload.siteId}\n    \t,'${payload.location}'\n    \t,${payload.mnum}\n        ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    \t,${payload.staffId}\n    \t,${formatString(payload.userId)}\n    \t,${payload.eventCode1}\n    \t,${payload.eventCode2}\n    \t,'${payload.description}'\n    \t,'${payload.uniqueId}'\n    \t,${formatString(payload.source)}\n    \t,${formatString(payload.taskId)}\n    \t,${payload.taskStatusId}\n    \t,${payload.taskTypeId}\n    \t,${formatString(payload.note)}\n    )\n`;\n    }\n    \n    function formatString(string) {\n        if (string === null) {\n            return null;\n        }\n        return `'${string}'`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add sql","type":"transform"}},"links":[{"from":"time5","to":"db-ms-sql6"},{"from":"db-ms-sql6","to":"transform2"},{"from":"transform2","to":"rabbitmq-producer7"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":5,"inputConnectors":[],"invalid":false,"name":"5 second","outputConnectors":[{"name":"Out"}],"width":175,"x":386.478759765625,"y":201.52598571777344},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\nif not exists(\n    select\n        1\n    from ve_tv_meal with (nolock)\n    where machineId = ${payload.mnum}\n    and siteId = ${payload.siteId}\n    and (\n        isClosed = 0\n        or endTime > '${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    )\n)\n    insert into ve_tv_meal (\n    \t_id\n    \t,_version\n    \t,siteID\n    \t,location\n    \t,machineId\n    \t,startTime\n    \t,staffId\n    \t,userId\n    \t,eventCode1\n    \t,eventCode2\n    \t,eventDesc\n    \t,startEventId\n    \t,source\n    \t,taskId\n    \t,taskStatusId\n    \t,taskTypeId\n    \t,note\n    ) values (\n    \tnewid()\n    \t,0\n    \t,${payload.siteId}\n    \t,'${payload.location}'\n    \t,${payload.mnum}\n        ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    \t,${payload.staffId}\n    \t,${formatString(payload.userId)}\n    \t,${payload.eventCode1}\n    \t,${payload.eventCode2}\n    \t,'${payload.description}'\n    \t,'${payload.uniqueId}'\n    \t,${formatString(payload.source)}\n    \t,${formatString(payload.taskId)}\n    \t,${payload.taskStatusId}\n    \t,${payload.taskTypeId}\n    \t,${formatString(payload.note)}\n    )\n`;\n    }\n    \n    function formatString(string) {\n        if (string === null) {\n            return null;\n        }\n        return `'${string}'`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add sql","outputConnectors":[{"name":"Out"}],"width":175,"x":812.3643798828125,"y":199.93492126464844},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"date","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    e.uniqueId\n    ,e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,u.userId\n\t,t1._id as taskId\n\t,t1.taskStatusId\n\t,t1.note\n\t,t1.source\n\t,t1.taskTypeId\n\t,t1.userid as taskUserId\nfrom ve_vw_tv_event e\nleft join ve_tv_user u with (noLock)\non e.staffId = u.staffId\nand e.siteId = u.siteId\nleft join ve_tv_meal m with (noLock)\non e.mnum = m.machineId\nand e.siteId = m.siteId\nand (\n\tm.isClosed = 0\n\tor e.date < m.endTime\n)\nleft join (\n\tselect\n\t\trow_number() over(partition by siteid, machineid order by createdat desc) as rownum \n\t\t,machineid\n\t\t,siteid\n\t\t,_id\n\t\t,taskstatusid\n\t\t,source\n\t\t,tasktypeid\n\t\t,userid\n\t\t,createdat\n\t\t,note\n\tfrom (\n\t\tselect\n\t\t\tmachineid\n\t\t\t,siteid\n\t\t\t,_id\n\t\t\t,taskstatusid\n\t\t\t,'Task' as source\n\t\t\t,tasktypeid\n\t\t\t,userid\n\t\t\t,taskcreated as createdat\n\t\t\t,tasknote as note\n\t\tfrom ve_vw_tv_task\n\t\twhere taskstatusid not in (12, 13)\n\t\tunion all \n\t\tselect\n\t\t\tmachineid\n\t\t\t,siteid\n\t\t\t,_id\n\t\t\t,taskstatusid\n\t\t\t,'Work Order' as source\n\t\t\t,tasktypeid\n\t\t\t,userid\n\t\t\t,createdat\n\t\t\t,note\n\t\tfrom ve_vw_tv_workorder\n\t\twhere taskstatusid not in (12, 13)\n\t) t2\n) t1\non t1.rownum = 1\nand e.mnum = t1.machineid\nand e.siteid = t1.siteid\nwhere m._id is null\nand e.machineAccess = 1\nand e.IsSubscribed = 1\nand date > '{{delta}}'\norder by date","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select events","outputConnectors":[{"name":"Out"}],"width":175,"x":595.478759765625,"y":199.52598571777344},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.meal","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":7,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.meal","outputConnectors":[{"name":"Out"}],"width":175,"x":1026.921630859375,"y":198.52598571777344}]},"id":"61655f34-c2ce-44aa-8ada-e2b2425967c2","lastUpdated":"2019-01-31T01:12:22.308Z","name":"04-01 MEAL - Open","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":15},{"dateCreated":"2017-11-26T21:17:26.600Z","definition":{"components":{"db-ms-sql3":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_Task_Completion_Time',\n    'Viz_Alert_Completion_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"db-ms-sql5":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    isTechTask\n    ,_ID\n    ,location\n    ,parentID\n    ,datediff(ss, taskcreated, getdate()) as elapsedTime\n    ,completionAlert\n    ,siteID\nfrom ve_vw_tv_task\nwhere taskstatusid not in (12, 13)\nand completionalert < 3\norder by taskcreated asc","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select tasks","type":"db-ms-sql"},"filter9":{"config":{"expression":"(function() {\n    var elapsedTime = payload.task.elapsedTime ;\n    \n    if (payload.task.completionAlert == 0) {\n        return elapsedTime > payload.appPrefs.alertTaskCompletionTime.value;\n    }\n    if (payload.task.completionAlert == 1) {\n        return elapsedTime > payload.appPrefs.alertTaskCompletionTime.escalateSupervisor;\n    }\n    if (payload.task.completionAlert == 2) {\n        return elapsedTime > payload.appPrefs.alertTaskCompletionTime.escalateManager;\n    }\n    return false;\n})();","variables":""},"name":"Filter","type":"filter"},"rabbitmq-producer7":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":7500},"name":"To task.update","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":10000},"name":"10 seconds","type":"time"},"transform4":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform6":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    newPayload.siteID = newPayload.task.siteID;\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"},"transform8":{"config":{"expression":"(function() {\n    payload.flag = \"COMPLETE_ALERT\";\n    return payload;\n})();","variables":""},"name":"Set flag","type":"transform"}},"links":[{"from":"db-ms-sql3","to":"transform4"},{"from":"transform4","to":"db-ms-sql5"},{"from":"db-ms-sql5","to":"transform6"},{"from":"transform8","to":"rabbitmq-producer7"},{"from":"time1","to":"db-ms-sql3"},{"from":"transform6","to":"filter9"},{"from":"filter9","to":"transform8"}]},"description":"<div><!--block-->==&gt; task.update</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":9}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":7500,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":7,"inputConnectors":[{"name":""}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":653.8287620544434,"y":264.1514663696289},{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":10000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"10 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-821.5273742675781,"y":264.117431640625},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":4,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-389.9794158935547,"y":261.58880615234375},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    payload.flag = \"COMPLETE_ALERT\";\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":8,"inputConnectors":[{"name":""}],"name":"Set flag","outputConnectors":[{"name":"Out"}],"width":175,"x":445.4636344909668,"y":264.7168426513672},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_Task_Completion_Time',\n    'Viz_Alert_Completion_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":3,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-598.9330291748047,"y":262.05303955078125},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    isTechTask\n    ,_ID\n    ,location\n    ,parentID\n    ,datediff(ss, taskcreated, getdate()) as elapsedTime\n    ,completionAlert\n    ,siteID\nfrom ve_vw_tv_task\nwhere taskstatusid not in (12, 13)\nand completionalert < 3\norder by taskcreated asc","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":5,"inputConnectors":[{"name":""}],"name":"Select tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-183.63241577148438,"y":262.58880615234375},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    newPayload.siteID = newPayload.task.siteID;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":21.207454681396484,"y":263.30712890625},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    var elapsedTime = payload.task.elapsedTime ;\n    \n    if (payload.task.completionAlert == 0) {\n        return elapsedTime > payload.appPrefs.alertTaskCompletionTime.value;\n    }\n    if (payload.task.completionAlert == 1) {\n        return elapsedTime > payload.appPrefs.alertTaskCompletionTime.escalateSupervisor;\n    }\n    if (payload.task.completionAlert == 2) {\n        return elapsedTime > payload.appPrefs.alertTaskCompletionTime.escalateManager;\n    }\n    return false;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":9,"inputConnectors":[{"name":""}],"name":"Filter","outputConnectors":[{"name":"Out"}],"width":175,"x":232.72307968139648,"y":264.0183410644531}],"viewBox":[66,-105,1,1062]},"id":"512dd652-fc11-4aef-bc96-4db7956a313b","lastUpdated":"2018-11-28T02:46:12.497Z","name":"09-03 Task Completion Alert","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":9},{"dateCreated":"2018-11-29T00:46:10.308Z","definition":{"components":{"db-ms-sql5":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"{{payload.__sql}}","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":false},"name":"Run Query","type":"db-ms-sql"},"rabbitmq-consumer4":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"errorHandling":"","exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"mobile.section.update","routingKeyPattern":"mobile.section.update"},"name":"From mobile.section.update","type":"rabbitmq-consumer"},"rabbitmq-producer6":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.section.update.{{payload.deviceID}}","ttl":0},"name":"To mobile.section.update.{{payload.deviceID}}","type":"rabbitmq-producer"},"transform3":{"config":{"errorHandling":"","expression":"(function() {\n\tlet strSections = payload.sections.map(section => \"'\" + section + \"'\");\n\t\n\tvar query = `DELETE FROM [VE_tv_UserSection] WHERE UserID = '${payload.userID}'\n\tAND SectionID NOT IN (${strSections});\\n`;\n\t\n\tfor(var i = 0; i < payload.sections.length; i++){\n\t    query += `IF NOT EXISTS (SELECT * FROM [VE_tv_UserSection] WHERE UserID = '${payload.userID}' AND SectionID = '${payload.sections[i]}')\t\n\t    INSERT INTO [VE_tv_UserSection] (UserID, SectionID)\n\t    VALUES ('${payload.userID}', '${payload.sections[i]}');\\n`;\n\t}\n\tpayload.__sql = payload.sections.length === 0 ? `DELETE FROM [VE_tv_UserSection] WHERE UserID = '${payload.userID}'` : query;\n\treturn payload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Format Query","type":"transform"}},"links":[{"from":"rabbitmq-consumer4","to":"transform3"},{"from":"transform3","to":"db-ms-sql5"},{"from":"db-ms-sql5","to":"rabbitmq-producer6"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->In:<ul><li><!--block-->mobile.section.update</li><li><pre><!--block-->{\n  userID,\n  sections,\n  deviceID\n}</pre></li></ul></li></ul><div><!--block-->Notes</div><ul><li><!--block-->Deletes sections not appearing in payload.sections</li><li><!--block-->Checks if each section is assigned and inserts.</li><li><!--block-->Returns payload as response</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":5}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tlet strSections = payload.sections.map(section => \"'\" + section + \"'\");\n\t\n\tvar query = `DELETE FROM [VE_tv_UserSection] WHERE UserID = '${payload.userID}'\n\tAND SectionID NOT IN (${strSections});\\n`;\n\t\n\tfor(var i = 0; i < payload.sections.length; i++){\n\t    query += `IF NOT EXISTS (SELECT * FROM [VE_tv_UserSection] WHERE UserID = '${payload.userID}' AND SectionID = '${payload.sections[i]}')\t\n\t    INSERT INTO [VE_tv_UserSection] (UserID, SectionID)\n\t    VALUES ('${payload.userID}', '${payload.sections[i]}');\\n`;\n\t}\n\tpayload.__sql = payload.sections.length === 0 ? `DELETE FROM [VE_tv_UserSection] WHERE UserID = '${payload.userID}'` : query;\n\treturn payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Format Query","outputConnectors":[{"name":"Out"}],"width":175,"x":714,"y":253},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"mobile.section.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"mobile.section.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":4,"inputConnectors":[],"invalid":false,"name":"From mobile.section.update","outputConnectors":[{"name":"Out"}],"width":175,"x":464.5,"y":242.5},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload.__sql}}","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":5,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Run Query","outputConnectors":[{"name":"Out"}],"width":175,"x":952.5,"y":258.5},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.section.update.{{payload.deviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.section.update.{{payload.deviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1165.71630859375,"y":260.2678527832031}]},"id":"40962a84-ad70-44a7-9fb7-ccee17763725","lastUpdated":"2019-03-11T22:33:41.473Z","name":"M-05 Section Update","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":3},{"dateCreated":"2017-11-26T21:17:26.639Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"{{payload}}\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Run sql","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{"count":100,"timeSpan":1000},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":true,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"player.reservation","routingKeyPattern":"player.reservation"},"name":"From player.reservation","type":"rabbitmq-consumer"},"transform9":{"config":{"expression":"(function() {\n\treturn payload.map(message => `\nupdate ve_tv_machinereservation\nset reservationstatusid = 1\nwhere reservationstatusid = 0\nand machineid = ${message.event.mnum}\nand playerid = '${message.event.playerID}'\nand siteid = '${message.siteID}';\n`).join('');\n})();","variables":""},"name":"Add sql","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"transform9"},{"from":"transform9","to":"db-ms-sql10"}]},"description":"<div><!--block-->player.reservation ==&gt;</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":9}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"player.reservation","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"player.reservation","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":true,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{"count":100,"timeSpan":1000},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"invalid":false,"name":"From player.reservation","outputConnectors":[{"name":"Out"}],"width":175,"x":414.66417694091797,"y":435.1727523803711},{"color":"#9ba8b0","component":{"metadata":"","name":"Transform","properties":[{"defaultValue":"(function() {\n\treturn payload.map(message => `\nupdate ve_tv_machinereservation\nset reservationstatusid = 1\nwhere reservationstatusid = 0\nand machineid = ${message.event.mnum}\nand playerid = '${message.event.playerID}'\nand siteid = '${message.siteID}';\n`).join('');\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":9,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add sql","outputConnectors":[{"name":"Out"}],"width":175,"x":617.7913208007812,"y":433.62860107421875},{"color":"#9ba8b0","component":{"metadata":"","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload}}\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Run sql","outputConnectors":[{"name":"Out"}],"width":175,"x":822.7913208007812,"y":431.62860107421875}],"viewBox":[757,105,1,747.34375]},"id":"e7b9d23d-7b5d-42ba-90e2-d56f828fb921","lastUpdated":"2018-12-04T01:22:40.214Z","name":"03-02 Machine Reservation","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":8},{"dateCreated":"2018-11-25T22:20:06.935Z","definition":{"components":{"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"{{payload}}\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Run query","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{"count":1000,"timeSpan":2000},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":true,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"sql.machineActionLog","routingKeyPattern":"sql.machineActionLog"},"name":"From sql.machineActionLog","type":"rabbitmq-consumer"},"transform2":{"config":{"expression":"(function() {\n\tlet result = payload.sort(compareTime);\n\tresult = result.map(message => message.__sql.query);\n\tresult = result.join('\\n');\n\treturn result;\n\t\n\tfunction compareTime(messageA, messageB) {\n\t    return messageA.__sql.time - messageB.__sql.time;\n\t}\n})();","variables":""},"name":"Convert to sql","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"transform2"},{"from":"transform2","to":"db-ms-sql4"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"sql.machineActionLog","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"sql.machineActionLog","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":true,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{"count":1000,"timeSpan":2000},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"invalid":false,"name":"From sql.machineActionLog","outputConnectors":[{"name":"Out"}],"width":175,"x":574,"y":204},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n\tlet result = payload.sort(compareTime);\n\tresult = result.map(message => message.__sql.query);\n\tresult = result.join('\\n');\n\treturn result;\n\t\n\tfunction compareTime(messageA, messageB) {\n\t    return messageA.__sql.time - messageB.__sql.time;\n\t}\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Convert to sql","outputConnectors":[{"name":"Out"}],"width":175,"x":800.943359375,"y":204.6980743408203},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload}}\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Run query","outputConnectors":[{"name":"Out"}],"width":175,"x":1015.9716796875,"y":203.34906005859375}]},"id":"53d618a2-6522-4751-b642-42f5b8dad52f","lastUpdated":"2019-01-31T01:13:27.316Z","name":"99-01 SQL - Machine Action Log","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":22},{"dateCreated":"2019-08-29T12:31:36.751Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"timestamp","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"select \nt._ID,\nt._Version,\nt.UserId,\nt.taskAssigned,\nt.taskCreated,\nt.taskStatusID,\nts.TaskStatusDescription as taskStatusDescription,\nt.taskUrgency as taskUrgencyID,\nt.taskTypeID,\ntt.TaskTypeDescription as taskTypeDescription,\nt.eventDesc,\nt.location,\nt.machineID,\nt.amount,\nt.playerID,\nt.IsTechTask,\np.firstName,\np.lastName,\np.tier,\ntierscore.tierColorHex\nfrom ve_tv_task t\ninner join VE_tv_TaskStatus ts on t.TaskStatusID = ts.TaskStatusID\ninner join VE_tv_TaskType tt on t.TaskTypeID = tt.TaskTypeID\nleft join ve_vw_tv_player p on t.playerid = p.playerid\nleft join ve_vw_tv_tierscore tierscore on p.tier = tierscore.tier\nwhere t.taskStatusId not in (12,13)","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":false},"name":"Select Open Tasks","type":"db-ms-sql"},"db-ms-sql28":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"select \nu._ID,\nu.UserID,\nIsManagerSupervisor = CASE WHEN EXISTS(select 1 from VE_tv_UserRole ur where ur.UserRoleID = u.UserRoleID and (ur.IsManager  = 1 or ur.IsSupervisor = 1)) THEN 1 ELSE 0 END,\nIsTechManagerSupervisor = CASE WHEN EXISTS(select 1 from VE_tv_UserRole ur where ur.UserRoleID = u.UserRoleID and (ur.IsTechManager  = 1 or ur.IsTechSupervisor = 1)) THEN 1 ELSE 0 END,\nDeviceID = (select top 1 d.DeviceID from VE_tv_Device d where d.UserID = u.UserID order by d.UpdatedTimestamp desc)\nfrom ve_tv_user u\nwhere \nu.UserID in (select UserID from VE_tv_Device d)\nand\n(u.userstatusid not in (0) or (u.userid in (select userid from ve_vw_tv_task where taskstatusid not in (12,13))))","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__tasks","split":false},"name":"Select Online users and devices","type":"db-ms-sql"},"rabbitmq-producer22":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.opentasks.{{payload.DeviceID}}","ttl":0},"name":"To mobile.task.{{deviceID}}","type":"rabbitmq-producer"},"splitter31":{"config":{},"name":"Splitter by Users","type":"splitter"},"time12":{"config":{"errorHandling":"","format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"Every 5 seconds","type":"time"},"transform30":{"config":{"errorHandling":"","expression":"(function() {\n    function filterAttTechTasks(arr,userId){\n        return arr.filter(task => {\n            return task.UserId == userId && task.taskStatusID !== 7;\n        });\n    }\n    \n    function filterManagerSupervisorTasks(arr,isTechTask){\n        return arr.filter(task => {\n            return task.IsTechTask == isTechTask;\n        });\n    }\n    //IsManagerSupervisor\n    var tasks = payload.data.map(user => {\n       if(user.IsManagerSupervisor === 0 && user.IsTechManagerSupervisor === 0){\n           user.tasks = filterAttTechTasks(payload.__tasks.data, user.UserID);\n       }\n       else{\n           user.tasks = filterManagerSupervisorTasks(payload.__tasks.data, user.IsTechManagerSupervisor);\n       }\n       \n       if(user.hasOwnProperty('tasks') === false){\n           user.tasks = [];\n       }\n       return user;\n    });\n    \n    return tasks;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Transform","type":"transform"}},"links":[{"from":"time12","to":"db-ms-sql10"},{"from":"db-ms-sql10","to":"db-ms-sql28"},{"from":"db-ms-sql28","to":"transform30"},{"from":"transform30","to":"splitter31"},{"from":"splitter31","to":"rabbitmq-producer22"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->Out:<ul><li><!--block-->mobile.task.&lt;deviceID&gt;</li><li><pre><!--block-->{\n    deviceID,\n    action,\n    timestamp,\n    _ID,\n    userID,\n    prevUserID,\n    taskAssigned,\n    taskCreated,\n    taskStatusID,\n    taskTypeID,\n    eventDesc,\n    location,\n    machineID,\n    amount,\n    playerID,\n    firstName,\n    lastName,\n    tier,\n    tierColorHex\n}</pre></li></ul></li></ul><div><!--block-->Notes</div><ul><li><!--block-->every x seconds (1 - 5) select tasks which have recently been updated/created/deleted (inner join on tasklog table - may have to add oldUserID column to table), select devices corresponding to users (see example query below)</li><li><pre><!--block-->select t.* from [dbo].[VE_tv_Task] t\nwhere t._ID in(\n\tselect _ID from\t[dbo].[VE_tv_TaskLog]\n\twhere [Timestamp]  &gt; '2018-07-31 06:50:03.483'\n)</pre></li><li><!--block-->may want to send payload to another generic flow to add the device ids and then split (allows this logic to be reused)</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":28},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":30},"source":{"connectorIndex":0,"nodeID":28}},{"dest":{"connectorIndex":0,"nodeID":31},"source":{"connectorIndex":0,"nodeID":30}},{"dest":{"connectorIndex":0,"nodeID":22},"source":{"connectorIndex":0,"nodeID":31}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":12,"inputConnectors":[],"invalid":false,"name":"Every 5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":126.96180725097656,"y":-187.95997619628906},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"timestamp","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select \nt._ID,\nt._Version,\nt.UserId,\nt.taskAssigned,\nt.taskCreated,\nt.taskStatusID,\nts.TaskStatusDescription as taskStatusDescription,\nt.taskUrgency as taskUrgencyID,\nt.taskTypeID,\ntt.TaskTypeDescription as taskTypeDescription,\nt.eventDesc,\nt.location,\nt.machineID,\nt.amount,\nt.playerID,\nt.IsTechTask,\np.firstName,\np.lastName,\np.tier,\ntierscore.tierColorHex\nfrom ve_tv_task t\ninner join VE_tv_TaskStatus ts on t.TaskStatusID = ts.TaskStatusID\ninner join VE_tv_TaskType tt on t.TaskTypeID = tt.TaskTypeID\nleft join ve_vw_tv_player p on t.playerid = p.playerid\nleft join ve_vw_tv_tierscore tierscore on p.tier = tierscore.tier\nwhere t.taskStatusId not in (12,13)","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select Open Tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":388.0462951660156,"y":-129.49847412109375},{"color":"#9ba8b0","component":{"metadata":"# Splitter\n\n* When the input payload is an array, the component sends each element in the array as separate messages to the next components.\n* When the input payload is not an array, the component passes the original input payload to the next components.\n","name":"Splitter","properties":[],"type":"splitter"},"icon":"./assets/vizflow/components/splitter.svg","id":31,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Splitter by Users","outputConnectors":[{"name":"Out"}],"width":175,"x":1138.996337890625,"y":-58.79108810424805},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.opentasks.{{payload.DeviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":22,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.task.{{deviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1396.8868408203125,"y":-85.70306491851807},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    function filterAttTechTasks(arr,userId){\n        return arr.filter(task => {\n            return task.UserId == userId && task.taskStatusID !== 7;\n        });\n    }\n    \n    function filterManagerSupervisorTasks(arr,isTechTask){\n        return arr.filter(task => {\n            return task.IsTechTask == isTechTask;\n        });\n    }\n    //IsManagerSupervisor\n    var tasks = payload.data.map(user => {\n       if(user.IsManagerSupervisor === 0 && user.IsTechManagerSupervisor === 0){\n           user.tasks = filterAttTechTasks(payload.__tasks.data, user.UserID);\n       }\n       else{\n           user.tasks = filterManagerSupervisorTasks(payload.__tasks.data, user.IsTechManagerSupervisor);\n       }\n       \n       if(user.hasOwnProperty('tasks') === false){\n           user.tasks = [];\n       }\n       return user;\n    });\n    \n    return tasks;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":30,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Transform","outputConnectors":[{"name":"Out"}],"width":175,"x":864.2861938476562,"y":-22.23225212097168},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__tasks","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select \nu._ID,\nu.UserID,\nIsManagerSupervisor = CASE WHEN EXISTS(select 1 from VE_tv_UserRole ur where ur.UserRoleID = u.UserRoleID and (ur.IsManager  = 1 or ur.IsSupervisor = 1)) THEN 1 ELSE 0 END,\nIsTechManagerSupervisor = CASE WHEN EXISTS(select 1 from VE_tv_UserRole ur where ur.UserRoleID = u.UserRoleID and (ur.IsTechManager  = 1 or ur.IsTechSupervisor = 1)) THEN 1 ELSE 0 END,\nDeviceID = (select top 1 d.DeviceID from VE_tv_Device d where d.UserID = u.UserID order by d.UpdatedTimestamp desc)\nfrom ve_tv_user u\nwhere \nu.UserID in (select UserID from VE_tv_Device d)\nand\n(u.userstatusid not in (0) or (u.userid in (select userid from ve_vw_tv_task where taskstatusid not in (12,13))))","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":28,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select Online users and devices","outputConnectors":[{"name":"Out"}],"width":175,"x":617.0244750976562,"y":-76.38267517089844}]},"id":"5919e5b3-2cf8-4df5-a259-d0a08dd46f36","lastUpdated":"2019-09-03T05:04:50.116Z","name":"M-04 Task Info - New","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":18},{"dateCreated":"2017-12-15T01:25:13.275Z","definition":{"components":{"filter2":{"config":{"expression":"(function() {\n    return payload.appPrefs.alertMachineOffline.value == 1;\n})();","variables":""},"name":"Enabled?","type":"filter"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.machineoffline","routingKeyPattern":"event.machineoffline"},"name":"From event.machineoffline","type":"rabbitmq-consumer"},"rabbitmq-producer7":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.send","ttl":0},"name":"To email.send","type":"rabbitmq-producer"},"transform6":{"config":{"expression":"(function() {\n\tvar email = {};\n\temail.to = payload.appPrefs.alertMachineOfflineEmail.value;\n\temail.subject = 'Machine Offline @ ' + payload.event.location;\n\temail.text = 'A Machine has gone offline at '+ payload.event.location + '\\r\\n';\n\temail.text += 'Machine Number: ' + payload.event.mnum  + '\\r\\n';\n\temail.text += 'Reported Time: ' + payload.event.date  + '\\r\\n';\n\t\n\tpayload.email = email;\n\treturn payload;\n})();","variables":""},"name":"Add email","type":"transform"}},"links":[{"from":"transform6","to":"rabbitmq-producer7"},{"from":"rabbitmq-consumer1","to":"filter2"},{"from":"filter2","to":"transform6"}]},"description":"<div><!--block-->event.machineonline ==&gt; email.send</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n\tvar email = {};\n\temail.to = payload.appPrefs.alertMachineOfflineEmail.value;\n\temail.subject = 'Machine Offline @ ' + payload.event.location;\n\temail.text = 'A Machine has gone offline at '+ payload.event.location + '\\r\\n';\n\temail.text += 'Machine Number: ' + payload.event.mnum  + '\\r\\n';\n\temail.text += 'Reported Time: ' + payload.event.date  + '\\r\\n';\n\t\n\tpayload.email = email;\n\treturn payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":""}],"name":"Add email","outputConnectors":[{"name":"Out"}],"width":175,"x":782.6756210327148,"y":286.6094665527344},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.send","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":7,"inputConnectors":[{"name":""}],"name":"To email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":1009.2831039428711,"y":288.9653015136719},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.machineoffline","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.machineoffline","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From event.machineoffline","outputConnectors":[{"name":"Out"}],"width":175,"x":344.34337615966797,"y":284.3597869873047},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    return payload.appPrefs.alertMachineOffline.value == 1;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":2,"inputConnectors":[{"name":""}],"name":"Enabled?","outputConnectors":[{"name":"Out"}],"width":175,"x":561.4803085327148,"y":285.82838439941406}],"viewBox":[847,15,1,927.34375]},"id":"1a988629-9db1-4712-ab3a-f1d1171ced30","lastUpdated":"2018-11-28T02:46:30.736Z","name":"09-06 Machine Offline Alert","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":6},{"dateCreated":"2019-01-11T00:09:57.223Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"timestamp","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    d.deviceID\r\n    ,usl.userID\r\n    ,usl.userStatusID\r\n    ,usl.userRoleID\r\n    ,usl.timestamp\r\nfrom ve_vw_tv_device d\r\ninner join ve_vw_tv_userstatuslog usl\r\non d.userid = usl.userid\r\nwhere usl.timestamp > '{{delta}}'","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select user status","type":"db-ms-sql"},"rabbitmq-producer22":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.userStatus.{{payload.deviceID}}","ttl":0},"name":"To mobile.userStatus.{{deviceID}}","type":"rabbitmq-producer"},"time12":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"Every 5 seconds","type":"time"}},"links":[{"from":"time12","to":"db-ms-sql10"},{"from":"db-ms-sql10","to":"rabbitmq-producer22"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->Out:<ul><li><!--block-->mobile.userStatus.&lt;deviceID&gt;</li><li><pre><!--block-->{\n    deviceID,\n    userID,\n    userStatusID,\n    userRoleID,\n    timestamp\n}</pre></li></ul></li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":22},"source":{"connectorIndex":0,"nodeID":10}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.userStatus.{{payload.deviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":22,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.userStatus.{{deviceID}}","outputConnectors":[{"badge":0,"name":"Out"}],"width":175,"x":1254.587646484375,"y":130.27716064453125},{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":12,"inputConnectors":[],"invalid":false,"name":"Every 5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":798.8890075683594,"y":128.0479278564453},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"timestamp","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    d.deviceID\r\n    ,usl.userID\r\n    ,usl.userStatusID\r\n    ,usl.userRoleID\r\n    ,usl.timestamp\r\nfrom ve_vw_tv_device d\r\ninner join ve_vw_tv_userstatuslog usl\r\non d.userid = usl.userid\r\nwhere usl.timestamp > '{{delta}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select user status","outputConnectors":[{"badge":0,"name":"Out"}],"width":175,"x":1030.8946533203125,"y":128.6282196044922}]},"id":"71b6b7db-ba4a-43cf-a6d1-c718c9e56d07","lastUpdated":"2019-01-31T01:14:11.432Z","name":"M-07 User Info","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":3},{"dateCreated":"2017-11-26T21:17:26.539Z","definition":{"components":{"branch11":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    if (payload.count === 0) {\n        return [null, payload.__input];    \n    }\n    var task = tidy(payload.data[0]);\n    var newPayload = payload.__input;\n    newPayload.task = task;\n\n    return [newPayload, null];\n})();","outputs":2,"variables":""},"name":"Wait?","type":"branch"},"branch16":{"config":{"expression":"(function() {\n    if (typeof payload.counter === \"undefined\") {\n        payload.counter = 0;\n        return [payload, null];\n    }\n    payload.counter++;\n    if (payload.count <= 2) {\n        return [null, payload];    \n    }\n    return [null, null];\n})();","outputs":2,"variables":""},"name":"Counter?","type":"branch"},"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    _id as _ID,\r\n    taskstatusid as taskStatusID,\r\n    userid as userID\r\nfrom ve_vw_tv_task\r\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\nand eventcode1 = '{{payload.event.linkedEventCode1}}'\r\nand coalesce(eventcode2, '') = '{{payload.event.linkedEventCode2}}'\r\norder by taskcreated desc","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select open task","type":"db-ms-sql"},"db-ms-sql13":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"waitfor delay '00:00:02'","expressionType":"","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Wait 2 seconds","type":"db-ms-sql"},"db-ms-sql5":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    linkedeventcode1 as linkedEventCode1,\n    linkedeventcode2 as linkedEventCode2\nfrom ve_vw_tv_subscribedevents\nwhere eventcode1 = '{{payload.event.eventCode1}}'\nand (\n    eventcode2 = '{{payload.event.eventCode2}}'\n    or (eventcode2 = -1 and '{{payload.event.eventCode2}}' = '')\n    )\nand linkedeventcode1 is not null","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select linked event code","type":"db-ms-sql"},"db-ms-sql8":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"waitfor delay '00:00:02'","expressionType":"","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Wait 2 seconds","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.close","routingKeyPattern":"event.close"},"name":"From event.close","type":"rabbitmq-consumer"},"rabbitmq-producer15":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"event.close","ttl":0},"name":"To event.close","type":"rabbitmq-producer"},"rabbitmq-producer18":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":0},"name":"To task.update","type":"rabbitmq-producer"},"transform20":{"config":{"expression":"(function() {\n    if (payload.task.userID === null\n        || payload.task.taskStatusID === 0\n        || payload.task.taskStatusID === 1\n        || payload.task.taskStatusID === 30\n        || payload.task.taskStatusID === 31\n        || payload.task.taskStatusID === 7) {\n        payload.task.newTaskStatusID = 12;\n    } else {\n       payload.task.newTaskStatusID = 13; \n    }\n    payload.flag = \"UPDATE\";\n    return payload;\n})();","variables":""},"name":"Prepare","type":"transform"},"transform6":{"config":{"expression":"(function() {\n    var newPayload = payload.__input;\n    newPayload.event.linkedEventCode1 = payload.linkedEventCode1;\n    newPayload.event.linkedEventCode2 = payload.linkedEventCode2;\n    return newPayload;\n})();","variables":""},"name":"Tidy","type":"transform"}},"links":[{"from":"db-ms-sql5","to":"transform6"},{"from":"transform6","to":"db-ms-sql8"},{"from":"db-ms-sql10","to":"branch11"},{"from":"branch11:1","to":"db-ms-sql13"},{"from":"rabbitmq-consumer1","to":"branch16"},{"from":"branch16:0","to":"db-ms-sql5"},{"from":"db-ms-sql8","to":"db-ms-sql10"},{"from":"branch11:0","to":"transform20"},{"from":"transform20","to":"rabbitmq-producer18"},{"from":"db-ms-sql13","to":"rabbitmq-producer15"},{"from":"branch16:1","to":"db-ms-sql8"}]},"description":"<div><!--block-->event.close ==&gt; event.close, task.update</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":1,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":16},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":20},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":18},"source":{"connectorIndex":0,"nodeID":20}},{"dest":{"connectorIndex":0,"nodeID":15},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":1,"nodeID":16}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.close","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.close","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From event.close","outputConnectors":[{"name":"Out"}],"width":175,"x":-852.6592063903809,"y":251.90191650390625},{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\n    if (typeof payload.counter === \"undefined\") {\n        payload.counter = 0;\n        return [payload, null];\n    }\n    payload.counter++;\n    if (payload.count <= 2) {\n        return [null, payload];    \n    }\n    return [null, null];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":16,"inputConnectors":[{"name":""}],"name":"Counter?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":-644.0654220581055,"y":252.87543487548828},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    linkedeventcode1 as linkedEventCode1,\n    linkedeventcode2 as linkedEventCode2\nfrom ve_vw_tv_subscribedevents\nwhere eventcode1 = '{{payload.event.eventCode1}}'\nand (\n    eventcode2 = '{{payload.event.eventCode2}}'\n    or (eventcode2 = -1 and '{{payload.event.eventCode2}}' = '')\n    )\nand linkedeventcode1 is not null","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":5,"inputConnectors":[{"name":""}],"name":"Select linked event code","outputConnectors":[{"name":"Out"}],"width":175,"x":-411.3082733154297,"y":209.9240951538086},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var newPayload = payload.__input;\n    newPayload.event.linkedEventCode1 = payload.linkedEventCode1;\n    newPayload.event.linkedEventCode2 = payload.linkedEventCode2;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":""}],"name":"Tidy","outputConnectors":[{"name":"Out"}],"width":175,"x":-190.22312927246094,"y":213.1527862548828},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"waitfor delay '00:00:02'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":8,"inputConnectors":[{"name":""}],"name":"Wait 2 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":30.773457527160645,"y":271.9652862548828},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"waitfor delay '00:00:02'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":13,"inputConnectors":[{"name":""}],"name":"Wait 2 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":681.890007019043,"y":322.9116973876953},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"event.close","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":15,"inputConnectors":[{"name":""}],"name":"To event.close","outputConnectors":[{"name":"Out"}],"width":175,"x":903.5388870239258,"y":322.8258361816406},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":18,"inputConnectors":[{"name":""}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":888.4317779541016,"y":200.48782348632812},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    _id as _ID,\r\n    taskstatusid as taskStatusID,\r\n    userid as userID\r\nfrom ve_vw_tv_task\r\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\nand eventcode1 = '{{payload.event.linkedEventCode1}}'\r\nand coalesce(eventcode2, '') = '{{payload.event.linkedEventCode2}}'\r\norder by taskcreated desc","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":""}],"name":"Select open task","outputConnectors":[{"name":"Out"}],"width":175,"x":239.9081573486328,"y":268.1449203491211},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    if (payload.task.userID === null\n        || payload.task.taskStatusID === 0\n        || payload.task.taskStatusID === 1\n        || payload.task.taskStatusID === 30\n        || payload.task.taskStatusID === 31\n        || payload.task.taskStatusID === 7) {\n        payload.task.newTaskStatusID = 12;\n    } else {\n       payload.task.newTaskStatusID = 13; \n    }\n    payload.flag = \"UPDATE\";\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":20,"inputConnectors":[{"name":""}],"name":"Prepare","outputConnectors":[{"name":"Out"}],"width":175,"x":681.0323715209961,"y":200.2202377319336},{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    if (payload.count === 0) {\n        return [null, payload.__input];    \n    }\n    var task = tidy(payload.data[0]);\n    var newPayload = payload.__input;\n    newPayload.task = task;\n\n    return [newPayload, null];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":11,"inputConnectors":[{"name":""}],"name":"Wait?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":450.22464752197266,"y":265.05255126953125}],"viewBox":[64,-75,1,1002]},"id":"cdc5e7dd-b42e-44a7-af84-b6805b2c7402","lastUpdated":"2018-11-28T01:30:55.190Z","name":"02-03 Close Event","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":12},{"dateCreated":"2018-12-10T00:49:13.280Z","definition":{"components":{"rabbitmq-producer3":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.meal","ttl":0},"name":"To sql.meal","type":"rabbitmq-producer"},"time5":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":60000},"name":"60 seconds","type":"time"},"transform2":{"config":{"expression":"(function() {\n    payload = {};\n    payload.__sql = {\n        query: query(payload),\n        time: 0\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ndelete ml\nfrom ve_tv_meal m with (noLock)\ninner join ve_tv_mealLog ml with (noLock)\non m._id = ml.meal_id\nwhere m.endTime is not null\nand ml.transDate > m.endTime;\n`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add sql","type":"transform"}},"links":[{"from":"transform2","to":"rabbitmq-producer3"},{"from":"time5","to":"transform2"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":5}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload = {};\n    payload.__sql = {\n        query: query(payload),\n        time: 0\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ndelete ml\nfrom ve_tv_meal m with (noLock)\ninner join ve_tv_mealLog ml with (noLock)\non m._id = ml.meal_id\nwhere m.endTime is not null\nand ml.transDate > m.endTime;\n`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add sql","outputConnectors":[{"name":"Out"}],"width":175,"x":844.943359375,"y":203.69808959960938},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.meal","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.meal","outputConnectors":[{"name":"Out"}],"width":175,"x":1073.9716796875,"y":201.3490447998047},{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":60000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":5,"inputConnectors":[],"invalid":false,"name":"60 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":623.97119140625,"y":205.2381134033203}]},"id":"667afc62-7759-4330-9e66-87a3d20fed51","lastUpdated":"2019-01-25T01:06:49.011Z","name":"04-04 MEAL - Delete Overflow Events","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":5},{"dateCreated":"2019-08-06T22:02:57.631Z","definition":{"components":{"branch16":{"config":{"errorHandling":"","expression":"(function() {\n    if(payload.validmachine == 1){\n\treturn [payload, null];\n    }\n    else {\n        return [null,payload]\n    }\n})();","globalFunctionConfiguration":[],"outputs":2,"variables":""},"name":"Branch","type":"branch"},"branch5":{"config":{"errorHandling":"","expression":"(function() {\n//\tif (payload.reservationStatusId === 0) {\n//\t    return [payload, null];\n//\t}\n//\tif (payload.reservationStatusId === 1) {\n//\t    return [null, payload];\n//\t}\n//\treturn [null, null];\n return [payload,null]\n})();","globalFunctionConfiguration":[],"outputs":2,"variables":""},"name":"Open or close?","type":"branch"},"db-ms-sql11":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"Select StandID , Mnum from VE_VW_TV_MachineInfo \nwhere\n{{payload.query}}","expressionType":"","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Query for Valid Machine","type":"db-ms-sql"},"db-ms-sql18":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"INSERT INTO [dbo].[VE_tv_WorkOrder] (\r\n\t[TaskTypeID]\r\n\t,[Note]\r\n\t,[DueDate]\r\n\t,TaskStatusID\r\n\t,location\r\n\t,machineID\r\n\t,CreatedByUserID\r\n\t)\r\nVALUES (\r\n\t'{{payload.taskTypeID}}'\r\n\t,'{{payload.notes}}'\r\n\t,'{{payload.dueDate}}'\r\n\t,'{{payload.workOrderStatusID}}'\r\n\t,nullif('{{payload.location}}','')\r\n\t,nullif('{{payload.mNum}}','')\r\n\t,'{{payload.userID}}'\r\n\t)","expressionType":"","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"MS SQL","type":"db-ms-sql"},"db-ms-sql6":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"update ve_tv_machineReservation\nset reservationStatusId = 1\nwhere location = '{{payload.standId}}'\nand siteId = '{{payload.siteId}}'","expressionType":"","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Close reservation","type":"db-ms-sql"},"rabbitmq-consumer8":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"errorHandling":"","exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"mobile.workorder.update","routingKeyPattern":"mobile.workorder.update"},"name":"From mobile.workorder.update","type":"rabbitmq-consumer"},"rabbitmq-producer9":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.workorder.update.{{payload.deviceID}}","ttl":0},"name":"To mobile device","type":"rabbitmq-producer"},"transform10":{"config":{"errorHandling":"","expression":"(function() {\n\tpayload.sentAt = new Date().toISOString();\n\treturn payload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add sentAt date","type":"transform"},"transform13":{"config":{"errorHandling":"","expression":"(function() {\n    \n    //Clean up location for querying\n\tpayload.location = payload.location.toString().replace(/-/g, '');\n\tpayload.mNum = payload.mNum.toString().replace(/\\t/g, '');\n\t\n\tif(payload.location !== \"\" && payload.mNum !== \"\"){\n\t    payload.query = 'StandID = ';\n\t    payload.query += '\\'' + payload.location + '\\'';\n\t    payload.query += \" AND \";\n\t    payload.query += 'mnum = ';\n\t    payload.query += '\\''+  payload.mNum + '\\'';\n\t    \n\t}\n\t\n\telse if (payload.location === \"\" && payload.mNum !== \"\"){\n\t    payload.query = 'mnum = ';\n\t    payload.query += '\\'' +payload.mNum +  '\\'' ;\n\t}\n\t\n\telse{\n\t    payload.query = 'StandID = ';\n\t    payload.query += '\\'' + payload.location + '\\'';\n\t}\n\treturn payload\n\t\n\t\n\t\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Build Query","type":"transform"},"transform15":{"config":{"errorHandling":"","expression":"(function() {\n\tif (payload.count == 1) {\n\t    payload = payload.__input\n\t    payload.validmachine = 1\n\t}else {\n\t    payload = payload.__input\n\t    payload.validmachine = 0\n\t}\n\treturn payload\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Evaluate Machine","type":"transform"}},"links":[{"from":"branch5:1","to":"db-ms-sql6"},{"from":"rabbitmq-consumer8","to":"branch5"},{"from":"transform10","to":"rabbitmq-producer9"},{"from":"db-ms-sql6","to":"transform10"},{"from":"branch5:0","to":"transform13"},{"from":"transform13","to":"db-ms-sql11"},{"from":"db-ms-sql11","to":"transform15"},{"from":"transform15","to":"branch16"},{"from":"branch16:0","to":"db-ms-sql18"},{"from":"branch16:1","to":"transform10"},{"from":"db-ms-sql18","to":"transform10"}]},"description":"<div><!--block-->Example message:<br><br>{<br>&nbsp;standId: '010203',<br>&nbsp;userId: 'someUser',<br>&nbsp;playerId: 123456,<br>&nbsp;reservationTimeId: 15,<br>&nbsp;reservationStatusId: 1,<br>&nbsp;siteId: 1<br>&nbsp;};</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":1,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":15},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":16},"source":{"connectorIndex":0,"nodeID":15}},{"dest":{"connectorIndex":0,"nodeID":18},"source":{"connectorIndex":0,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":1,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":18}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"mobile.workorder.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"mobile.workorder.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":8,"inputConnectors":[],"invalid":false,"name":"From mobile.workorder.update","outputConnectors":[{"name":"Out"}],"width":175,"x":404.2422790527344,"y":157.02651977539062},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.workorder.update.{{payload.deviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":9,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile device","outputConnectors":[{"name":"Out"}],"width":175,"x":2237.3665771484375,"y":214.86936950683594},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output.\n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n\n**Using our available helpers Lodash, Moment and UUID**:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date.\n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want.\n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n//\tif (payload.reservationStatusId === 0) {\n//\t    return [payload, null];\n//\t}\n//\tif (payload.reservationStatusId === 1) {\n//\t    return [null, payload];\n//\t}\n//\treturn [null, null];\n return [payload,null]\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":5,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Open or close?","outputConnectors":[{"name":"Out 1"},{"name":"Out 2"}],"width":175,"x":670.5213012695312,"y":146.56300354003906},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_machineReservation\nset reservationStatusId = 1\nwhere location = '{{payload.standId}}'\nand siteId = '{{payload.siteId}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Close reservation","outputConnectors":[{"name":"Out"}],"width":175,"x":1080.6906127929688,"y":305.03363037109375},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"Select StandID , Mnum from VE_VW_TV_MachineInfo \nwhere\n{{payload.query}}","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":11,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Query for Valid Machine","outputConnectors":[{"name":"Out"}],"width":175,"x":1096.9976806640625,"y":-16.764188289642334},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    \n    //Clean up location for querying\n\tpayload.location = payload.location.toString().replace(/-/g, '');\n\tpayload.mNum = payload.mNum.toString().replace(/\\t/g, '');\n\t\n\tif(payload.location !== \"\" && payload.mNum !== \"\"){\n\t    payload.query = 'StandID = ';\n\t    payload.query += '\\'' + payload.location + '\\'';\n\t    payload.query += \" AND \";\n\t    payload.query += 'mnum = ';\n\t    payload.query += '\\''+  payload.mNum + '\\'';\n\t    \n\t}\n\t\n\telse if (payload.location === \"\" && payload.mNum !== \"\"){\n\t    payload.query = 'mnum = ';\n\t    payload.query += '\\'' +payload.mNum +  '\\'' ;\n\t}\n\t\n\telse{\n\t    payload.query = 'StandID = ';\n\t    payload.query += '\\'' + payload.location + '\\'';\n\t}\n\treturn payload\n\t\n\t\n\t\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":13,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Build Query","outputConnectors":[{"name":"Out"}],"width":175,"x":878.1195068359375,"y":-6.305419921875},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tif (payload.count == 1) {\n\t    payload = payload.__input\n\t    payload.validmachine = 1\n\t}else {\n\t    payload = payload.__input\n\t    payload.validmachine = 0\n\t}\n\treturn payload\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":15,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Evaluate Machine","outputConnectors":[{"name":"Out"}],"width":175,"x":1317.5301513671875,"y":-14.800202697515488},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output.\n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n\n**Using our available helpers Lodash, Moment and UUID**:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date.\n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want.\n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n```\n","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    if(payload.validmachine == 1){\n\treturn [payload, null];\n    }\n    else {\n        return [null,payload]\n    }\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":16,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Branch","outputConnectors":[{"name":"Out 1"},{"name":"Out 2"}],"width":175,"x":1534.2947998046875,"y":-5.362065553665161},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"INSERT INTO [dbo].[VE_tv_WorkOrder] (\r\n\t[TaskTypeID]\r\n\t,[Note]\r\n\t,[DueDate]\r\n\t,TaskStatusID\r\n\t,location\r\n\t,machineID\r\n\t,CreatedByUserID\r\n\t)\r\nVALUES (\r\n\t'{{payload.taskTypeID}}'\r\n\t,'{{payload.notes}}'\r\n\t,'{{payload.dueDate}}'\r\n\t,'{{payload.workOrderStatusID}}'\r\n\t,nullif('{{payload.location}}','')\r\n\t,nullif('{{payload.mNum}}','')\r\n\t,'{{payload.userID}}'\r\n\t)","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":18,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"MS SQL","outputConnectors":[{"name":"Out"}],"width":175,"x":1772.3109130859375,"y":-55.407761096954346},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tpayload.sentAt = new Date().toISOString();\n\treturn payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add sentAt date","outputConnectors":[{"name":"Out"}],"width":175,"x":1972.751220703125,"y":183.11221313476562}]},"id":"60f02b08-f855-4290-92e5-3a4c34313b47","lastUpdated":"2019-08-22T22:30:16.286Z","name":"M-09 Work Order Update","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":24},{"dateCreated":"2019-01-25T01:27:27.353Z","definition":{"components":{"db-ms-sql8":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"date","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,e.machineActionId\nfrom ve_vw_tv_event e with (noLock)\nleft join ve_vw_tv_gameInAction gia\non e.mnum = gia.machineId\nand e.siteId = gia.siteId \nwhere e.date > '{{delta}}'\nand isSubscribed = 1\nand e.machineActionId in (1, 2)\nand (\n\te.machineActionId = 1 \n\tand (gia.inAction = 0 or gia.inAction is null)\n\tor e.playerId = gia.playerId\n)\norder by date desc","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select game.active actions","type":"db-ms-sql"},"rabbitmq-producer5":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.machineActionLog","ttl":4000},"name":"To sql.machineActionLog","type":"rabbitmq-producer"},"time7":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 seconds","type":"time"},"transform6":{"config":{"expression":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ninsert into ve_tv_machineActionLog (\n    _id\n    ,_version\n    ,loggedAt\n    ,actionAt\n    ,machineActionId\n    ,machineId\n    ,location\n    ,description\n    ,amount\n    ,playerId\n    ,staffId\n    ,siteId\n) values (\n    newId()\n    ,0\n    ,getDate()\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,${payload.machineActionId}\n    ,${payload.mnum}\n    ,'${payload.location}'\n    ,'${payload.description}'\n    ,${payload.amount}\n    ,${payload.playerId}\n    ,${payload.staffId}\n    ,${payload.siteId}\n);\n`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add query","type":"transform"}},"links":[{"from":"transform6","to":"rabbitmq-producer5"},{"from":"db-ms-sql8","to":"transform6"},{"from":"time7","to":"db-ms-sql8"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":7}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.machineActionLog","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":4000,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":5,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.machineActionLog","outputConnectors":[{"name":"Out"}],"width":175,"x":1014.015380859375,"y":204.91868591308594},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ninsert into ve_tv_machineActionLog (\n    _id\n    ,_version\n    ,loggedAt\n    ,actionAt\n    ,machineActionId\n    ,machineId\n    ,location\n    ,description\n    ,amount\n    ,playerId\n    ,staffId\n    ,siteId\n) values (\n    newId()\n    ,0\n    ,getDate()\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,${payload.machineActionId}\n    ,${payload.mnum}\n    ,'${payload.location}'\n    ,'${payload.description}'\n    ,${payload.amount}\n    ,${payload.playerId}\n    ,${payload.staffId}\n    ,${payload.siteId}\n);\n`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add query","outputConnectors":[{"name":"Out"}],"width":175,"x":770.5076904296875,"y":203.9593505859375},{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":7,"inputConnectors":[],"invalid":false,"name":"5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":323.5076904296875,"y":205.47967529296875},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"date","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,e.machineActionId\nfrom ve_vw_tv_event e with (noLock)\nleft join ve_vw_tv_gameInAction gia\non e.mnum = gia.machineId\nand e.siteId = gia.siteId \nwhere e.date > '{{delta}}'\nand isSubscribed = 1\nand e.machineActionId in (1, 2)\nand (\n\te.machineActionId = 1 \n\tand (gia.inAction = 0 or gia.inAction is null)\n\tor e.playerId = gia.playerId\n)\norder by date desc","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":8,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select game.active actions","outputConnectors":[{"name":"Out"}],"width":175,"x":548.5076904296875,"y":203.47967529296875}]},"id":"7413e8e3-b4c8-4015-8a75-27bd0d57401f","lastUpdated":"2019-01-31T01:13:01.439Z","name":"15-01 Game In Action - Get events","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":9},{"dateCreated":"2018-11-28T01:12:17.091Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":true,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Ignore_Open_Tech_Tasks',\n    'Viz_No_Tech_Task_Card_Ins',\n    'Viz_Greet_Suppression_Days',\n    'Viz_Card_Out_Enabled',\n    'Viz_Card_Out_ID',\n    'Viz_Card_Out_ID_Enabled',\n    'Viz_Alert_Large_Jackpot',\n    'Viz_Alert_Large_Jackpot_Corporate_Email',\n    'Viz_Alert_Large_Jackpot_Property_Emails',\n    'Viz_Alert_Machine_Online',\n    'Viz_Alert_Machine_Online_Email',\n    'Viz_Alert_Machine_Offline',\n    'Viz_Alert_Machine_Offline_Email',\n    'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"delta","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    actiontypeid as actionTypeID,\r\n    format(date, 'yyyy-MM-dd HH:mm:ss.fff') as date,\r\n    date as delta,\r\n    mnum as mnum,\r\n    uniqueid as uniqueID,\r\n    playerid as playerID,\r\n    staffid as staffID,\r\n    amount as amount,\r\n    eventcode1 as eventCode1,\r\n    eventcode2 as eventCode2,\r\n    tasktypeid as taskTypeID,\r\n    location as location,\r\n    description as description,\r\n    machineaccess as machineAccess,\r\n    siteid as siteID,\r\n    sitedescription as siteDescription\r\nfrom ve_vw_tv_event\r\nwhere issubscribed = 1\r\nand actiontypeid in (1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12)\r\nand date > '{{delta}}'\r\norder by transdate","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select events","type":"db-ms-sql"},"filter18":{"config":{"expression":"(function() {\n\treturn !!payload.routingKey;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter for routing key","type":"filter"},"rabbitmq-producer5":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"{{payload.routingKey}}","ttl":0},"name":"To {{routingKey}}","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":2500},"name":"2.5 seconds","type":"time"},"transform11":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Tidy 1","type":"transform"},"transform3":{"config":{"expression":"(function() {\n    var action = payload.event.actionTypeID;\n    switch (action) {\n        case 1:\n            payload.routingKey = \"event.regular\";\n            break;\n        case 2:\n            payload.routingKey = \"event.reset\";\n            break;\n        case 3:\n            payload.routingKey = \"event.player\";\n            break;\n        case 4:\n            payload.routingKey = \"event.aggregate\";\n            break;\n        case 5:\n            payload.routingKey = \"event.aggregate\";\n            break;\n        case 7:\n            payload.flag = \"TASK\";\n            payload.routingKey = \"task.create\";\n            break;\n        case 8:\n            payload.routingKey = \"event.close\";\n            break;\n        case 9:\n            payload.routingKey = \"event.card\";\n            break;\n        case 10:\n            payload.routingKey = \"event.card\";\n            break;\n        case 11:\n            payload.routingKey = \"event.aggregate\";\n            break;\n        case 12:\n            payload.routingKey = \"event.aggregate\";\n            break;\n    }\n    if (payload.event.taskTypeID === 2) {\n        payload.routingKey = \"event.jackpot\";\n    }\n    return payload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Set routing key","type":"transform"},"transform8":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.event = tidy(payload);\n    newPayload.siteID = newPayload.event.siteID;\n    return newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Tidy 2","type":"transform"}},"links":[{"from":"transform11","to":"db-ms-sql2"},{"from":"db-ms-sql10","to":"transform11"},{"from":"db-ms-sql2","to":"transform8"},{"from":"time1","to":"db-ms-sql10"},{"from":"transform8","to":"transform3"},{"from":"transform3","to":"filter18"},{"from":"filter18","to":"rabbitmq-producer5"}]},"description":"<div><!--block-->==&gt; event.regular, event.close, event.card, event.aggregate, task.create, event.jackpot, meal.process, meal.update</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":18},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":18}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":2500,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"2.5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-901.1309814453125,"y":194.2959747314453},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.event = tidy(payload);\n    newPayload.siteID = newPayload.event.siteID;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":8,"inputConnectors":[{"name":""}],"invalid":false,"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-22.008169174194336,"y":204.81158447265625},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":11,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-438.9620590209961,"y":199.39815521240234},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"{{payload.routingKey}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":5,"inputConnectors":[{"name":""}],"name":"To {{routingKey}}","outputConnectors":[{"name":"Out"}],"width":175,"x":596.9467360973358,"y":203.6391716003418},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Ignore_Open_Tech_Tasks',\n    'Viz_No_Tech_Task_Card_Ins',\n    'Viz_Greet_Suppression_Days',\n    'Viz_Card_Out_Enabled',\n    'Viz_Card_Out_ID',\n    'Viz_Card_Out_ID_Enabled',\n    'Viz_Alert_Large_Jackpot',\n    'Viz_Alert_Large_Jackpot_Corporate_Email',\n    'Viz_Alert_Large_Jackpot_Property_Emails',\n    'Viz_Alert_Machine_Online',\n    'Viz_Alert_Machine_Online_Email',\n    'Viz_Alert_Machine_Offline',\n    'Viz_Alert_Machine_Offline_Email',\n    'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":true,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":""}],"invalid":false,"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-660.166862487793,"y":192.3077621459961},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"delta","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    actiontypeid as actionTypeID,\r\n    format(date, 'yyyy-MM-dd HH:mm:ss.fff') as date,\r\n    date as delta,\r\n    mnum as mnum,\r\n    uniqueid as uniqueID,\r\n    playerid as playerID,\r\n    staffid as staffID,\r\n    amount as amount,\r\n    eventcode1 as eventCode1,\r\n    eventcode2 as eventCode2,\r\n    tasktypeid as taskTypeID,\r\n    location as location,\r\n    description as description,\r\n    machineaccess as machineAccess,\r\n    siteid as siteID,\r\n    sitedescription as siteDescription\r\nfrom ve_vw_tv_event\r\nwhere issubscribed = 1\r\nand actiontypeid in (1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12)\r\nand date > '{{delta}}'\r\norder by transdate","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":""}],"invalid":false,"name":"Select events","outputConnectors":[{"name":"Out"}],"width":175,"x":-229.6908905506134,"y":203.55101013183594},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    var action = payload.event.actionTypeID;\n    switch (action) {\n        case 1:\n            payload.routingKey = \"event.regular\";\n            break;\n        case 2:\n            payload.routingKey = \"event.reset\";\n            break;\n        case 3:\n            payload.routingKey = \"event.player\";\n            break;\n        case 4:\n            payload.routingKey = \"event.aggregate\";\n            break;\n        case 5:\n            payload.routingKey = \"event.aggregate\";\n            break;\n        case 7:\n            payload.flag = \"TASK\";\n            payload.routingKey = \"task.create\";\n            break;\n        case 8:\n            payload.routingKey = \"event.close\";\n            break;\n        case 9:\n            payload.routingKey = \"event.card\";\n            break;\n        case 10:\n            payload.routingKey = \"event.card\";\n            break;\n        case 11:\n            payload.routingKey = \"event.aggregate\";\n            break;\n        case 12:\n            payload.routingKey = \"event.aggregate\";\n            break;\n    }\n    if (payload.event.taskTypeID === 2) {\n        payload.routingKey = \"event.jackpot\";\n    }\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":3,"inputConnectors":[{"name":""}],"invalid":false,"name":"Set routing key","outputConnectors":[{"name":"Out"}],"width":175,"x":185.69981837272644,"y":202.30319213867188},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn !!payload.routingKey;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":18,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Filter for routing key","outputConnectors":[{"name":"Out"}],"width":175,"x":391.3631896972656,"y":202.0947265625}],"viewBox":[-35,-15,1,882]},"id":"4d83bb5d-9079-4179-9e59-4ba414719725","lastUpdated":"2019-01-31T01:12:05.345Z","name":"01-01 Event Manager","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":21},{"dateCreated":"2017-11-26T21:17:26.511Z","definition":{"components":{"branch25":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    // If nothing is returned and it's a Card Out set empty object for User\n    if (payload.count === 0 || newPayload.event.actionTypeID === 10) {\n        newPayload.user = {};\n        return [newPayload, newPayload];\n    }\n    newPayload.user = tidy(payload.data[0])\n    \n    if (newPayload.user.isTechnician == 1) {\n        return [newPayload, newPayload];\n    }\n    if (newPayload.user.isAttendant == 1) {\n\t    return [newPayload, null];\n    }\n    return [null, null];\n})();","globalFunctionConfiguration":[],"outputs":2,"variables":""},"name":"Role?","type":"branch"},"branch30":{"config":{"expression":"(function() {\n    if (payload._ID) {\n\t    return [payload, null];\n    }\n    return [null, payload.__input];        \n})();","globalFunctionConfiguration":[],"outputs":2,"variables":""},"name":"Open Task / No Open Task","type":"branch"},"db-ms-sql23":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n\t_id as _ID,\r\n\tuserid as userID,\r\n    taskstatusid as taskStatusID,\r\n    parentid as parentID\r\nfrom ve_vw_tv_task\r\nwhere istechtask = 1\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\nand (\r\n    ('{{payload.event.actionTypeID}}' = 9 and taskstatusid <> 33 and datediff(ss, taskcreated, current_timestamp) < '{{payload.appPrefs.noTechTaskCardIns.value}}')\r\n    or ('{{payload.event.actionTypeID}}' = 10 and taskstatusid = 33)\r\n    )\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select open tech tasks","type":"db-ms-sql"},"db-ms-sql24":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    u.userID\n    ,u.staffID\n    ,u.userRoleID\n    ,ur.isAttendant\n    ,ur.isTechnician\nfrom ve_vw_tv_user u\nleft join ve_vw_tv_userrole ur\non u.userroleid = ur.userroleid\nwhere u.staffid = '{{payload.event.staffID}}'\nand (\n    '{{payload.appPrefs.cardOutIDEnabled.value}}' <> 1\n    or '{{payload.event.actionTypeID}}' <> 10\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select user","type":"db-ms-sql"},"db-ms-sql26":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    _id as _ID,\r\n    userid as userID,\r\n    taskstatusid as taskStatusID,\r\n    parentid as parentID\r\nfrom ve_vw_tv_task\r\nwhere istechtask = 0 \r\nand taskstatusid not in (12, 13)\r\n-- Ignore beverage tasks if not a server \r\nand (tasktypeid <> 400 or '{{payload.user.userRoleID}}' in (42, 43, 44)) \r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\nand (\r\n    ('{{payload.event.actionTypeID}}' = 9 and taskstatusid <> 3)\r\n    or ('{{payload.event.actionTypeID}}' = 10 and taskstatusid = 3)\r\n    )\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select open attendant tasks","type":"db-ms-sql"},"db-ms-sql32":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n\t_id as _ID,\r\n\tuserid as userID,\r\n    taskstatusid as taskStatusID\r\nfrom ve_vw_tv_workorder\r\nwhere taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\n--Card out not currently supported\r\nand '{{payload.event.actionTypeID}}' = 9 and taskstatusid not in (42, 43)\r\n\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select open work order","type":"db-ms-sql"},"filter29":{"config":{"expression":"(function() {\n    if (payload.event.actionTypeID === 9) {\n        return true;\n    }\n    if (payload.appPrefs.cardOutIDEnabled.value === \"1\") {\n        return payload.event.staffID == payload.appPrefs.cardOutID.value;    \n    }\n    return payload.appPrefs.cardOutEnabled.value === \"1\";\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter out card out 1","type":"filter"},"filter36":{"config":{"expression":"(function() {\n    if (payload.event.actionTypeID === 9) {\n        return true;\n    }\n    if (payload.appPrefs.cardOutIDEnabled.value === \"1\") {\n        return payload.event.staffID == payload.appPrefs.cardOutID.value;    \n    }\n    return payload.appPrefs.cardOutEnabled.value === \"1\";\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter out card out 2","type":"filter"},"rabbitmq-consumer4":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":10,"queue":"event.card","routingKeyPattern":"event.card"},"name":"From event.card","type":"rabbitmq-consumer"},"rabbitmq-producer34":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"wo.update","ttl":0},"name":"To wo.update","type":"rabbitmq-producer"},"rabbitmq-producer9":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":0},"name":"To task.update","type":"rabbitmq-producer"},"transform28":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    \n    if (newPayload.event.actionTypeID === 9) {\n        if (newPayload.user.isAttendant == 1\n            || newPayload.user.isSupervisor == 1\n            || newPayload.user.isManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 3;    \n        }\n        if (newPayload.user.isTechnician == 1\n            || newPayload.user.isTechSupervisor == 1\n            || newPayload.user.isTechManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 33;\n    \t    newPayload.task.newIsTechTask = 1; \n    \t    if (newPayload.task.parentID == null) {\n    \t        newPayload.task.newParentID = newPayload.task._ID;\n    \t    }\n        }\n        newPayload.task.newUserID = newPayload.user.userID;\n        newPayload.task.newStaffID = newPayload.user.staffID;\n    }\n    if (newPayload.event.actionTypeID === 10) {\n        newPayload.task.newTaskStatusID = 13;\n    }\n    newPayload.flag = \"UPDATE\";\n    return newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Prepare 1","type":"transform"},"transform33":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    var newPayload = payload.__input;\n    newPayload.wo = tidy(payload);\n    \n    if (newPayload.event.actionTypeID === 9) {\n       \n        if ([15, 35, 40].indexOf(newPayload.user.userRoleID) !== -1) {\n    \t    newPayload.wo.newTaskStatusID = 42;   \n        }\n        newPayload.wo.newUserID = newPayload.user.userID;\n        newPayload.wo.newStaffID = newPayload.user.staffID;\n    }\n   \n    newPayload.flag = \"WO_CARDIN\";\n    return newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Prepare 2","type":"transform"},"transform35":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    \n    if (newPayload.event.actionTypeID === 9) {\n        if (newPayload.user.isAttendant == 1\n            || newPayload.user.isSupervisor == 1\n            || newPayload.user.isManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 3;    \n        }\n        if (newPayload.user.isTechnician == 1\n            || newPayload.user.isTechSupervisor == 1\n            || newPayload.user.isTechManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 33;\n    \t    newPayload.task.newIsTechTask = 1; \n    \t    if (newPayload.task.parentID == null) {\n    \t        newPayload.task.newParentID = newPayload.task._ID;\n    \t    }\n        }\n        newPayload.task.newUserID = newPayload.user.userID;\n        newPayload.task.newStaffID = newPayload.user.staffID;\n    }\n    if (newPayload.event.actionTypeID === 10) {\n        newPayload.task.newTaskStatusID = 13;\n    }\n    newPayload.flag = \"UPDATE\";\n    return newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Prepare 3","type":"transform"}},"links":[{"from":"db-ms-sql24","to":"branch25"},{"from":"branch25:0","to":"db-ms-sql26"},{"from":"branch25:1","to":"db-ms-sql23"},{"from":"transform28","to":"filter29"},{"from":"filter29","to":"rabbitmq-producer9"},{"from":"db-ms-sql23","to":"branch30"},{"from":"branch30:0","to":"transform28"},{"from":"branch30:1","to":"db-ms-sql32"},{"from":"db-ms-sql32","to":"transform33"},{"from":"transform33","to":"rabbitmq-producer34"},{"from":"rabbitmq-consumer4","to":"db-ms-sql24"},{"from":"db-ms-sql26","to":"transform35"},{"from":"transform35","to":"filter36"},{"from":"filter36","to":"rabbitmq-producer9"}]},"description":"<div><!--block-->event.card ==&gt; task.update, event.card, wo.update, meal.update</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":25},"source":{"connectorIndex":0,"nodeID":24}},{"dest":{"connectorIndex":0,"nodeID":26},"source":{"connectorIndex":0,"nodeID":25}},{"dest":{"connectorIndex":0,"nodeID":23},"source":{"connectorIndex":1,"nodeID":25}},{"dest":{"connectorIndex":0,"nodeID":29},"source":{"connectorIndex":0,"nodeID":28}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":29}},{"dest":{"connectorIndex":0,"nodeID":30},"source":{"connectorIndex":0,"nodeID":23}},{"dest":{"connectorIndex":0,"nodeID":28},"source":{"connectorIndex":0,"nodeID":30}},{"dest":{"connectorIndex":0,"nodeID":32},"source":{"connectorIndex":1,"nodeID":30}},{"dest":{"connectorIndex":0,"nodeID":33},"source":{"connectorIndex":0,"nodeID":32}},{"dest":{"connectorIndex":0,"nodeID":34},"source":{"connectorIndex":0,"nodeID":33}},{"dest":{"connectorIndex":0,"nodeID":24},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":35},"source":{"connectorIndex":0,"nodeID":26}},{"dest":{"connectorIndex":0,"nodeID":36},"source":{"connectorIndex":0,"nodeID":35}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":36}}],"name":"01 - Response - 01 - Initial Conditions","nodes":[{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    if (payload.event.actionTypeID === 9) {\n        return true;\n    }\n    if (payload.appPrefs.cardOutIDEnabled.value === \"1\") {\n        return payload.event.staffID == payload.appPrefs.cardOutID.value;    \n    }\n    return payload.appPrefs.cardOutEnabled.value === \"1\";\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":29,"inputConnectors":[{"name":""}],"name":"Filter out card out 1","outputConnectors":[{"name":"Out"}],"width":175,"x":587.0812225341797,"y":119.34598541259766},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":9,"inputConnectors":[{"name":"In"}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":840.9996881484985,"y":67.1617546081543},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.card","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.card","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":10,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":4,"inputConnectors":[],"name":"From event.card","outputConnectors":[{"name":"Out"}],"width":175,"x":-740.6900768280029,"y":156.0050277709961},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    _id as _ID,\r\n    userid as userID,\r\n    taskstatusid as taskStatusID,\r\n    parentid as parentID\r\nfrom ve_vw_tv_task\r\nwhere istechtask = 0 \r\nand taskstatusid not in (12, 13)\r\n-- Ignore beverage tasks if not a server \r\nand (tasktypeid <> 400 or '{{payload.user.userRoleID}}' in (42, 43, 44)) \r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\nand (\r\n    ('{{payload.event.actionTypeID}}' = 9 and taskstatusid <> 3)\r\n    or ('{{payload.event.actionTypeID}}' = 10 and taskstatusid = 3)\r\n    )\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":26,"inputConnectors":[{"name":""}],"invalid":false,"name":"Select open attendant tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-131.74293422698975,"y":117.81454467773438},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    u.userID\n    ,u.staffID\n    ,u.userRoleID\n    ,ur.isAttendant\n    ,ur.isTechnician\nfrom ve_vw_tv_user u\nleft join ve_vw_tv_userrole ur\non u.userroleid = ur.userroleid\nwhere u.staffid = '{{payload.event.staffID}}'\nand (\n    '{{payload.appPrefs.cardOutIDEnabled.value}}' <> 1\n    or '{{payload.event.actionTypeID}}' <> 10\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":24,"inputConnectors":[{"name":""}],"invalid":false,"name":"Select user","outputConnectors":[{"name":"Out"}],"width":175,"x":-544.0133543014526,"y":156.41600036621094},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n\t_id as _ID,\r\n\tuserid as userID,\r\n    taskstatusid as taskStatusID,\r\n    parentid as parentID\r\nfrom ve_vw_tv_task\r\nwhere istechtask = 1\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\nand (\r\n    ('{{payload.event.actionTypeID}}' = 9 and taskstatusid <> 33 and datediff(ss, taskcreated, current_timestamp) < '{{payload.appPrefs.noTechTaskCardIns.value}}')\r\n    or ('{{payload.event.actionTypeID}}' = 10 and taskstatusid = 33)\r\n    )\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":23,"inputConnectors":[{"name":""}],"name":"Select open tech tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-129.27471828460693,"y":224.06967163085938},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output. \n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n\n**Using our available helpers Lodash, Moment and UUID**: \n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date. \n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want. \n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    if (payload._ID) {\n\t    return [payload, null];\n    }\n    return [null, payload.__input];        \n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":30,"inputConnectors":[{"name":""}],"name":"Open Task / No Open Task","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":77.3248291015625,"y":225.64620971679688},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n\t_id as _ID,\r\n\tuserid as userID,\r\n    taskstatusid as taskStatusID\r\nfrom ve_vw_tv_workorder\r\nwhere taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\n--Card out not currently supported\r\nand '{{payload.event.actionTypeID}}' = 9 and taskstatusid not in (42, 43)\r\n\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":32,"inputConnectors":[{"name":""}],"name":"Select open work order","outputConnectors":[{"name":"Out"}],"width":175,"x":347.2974090576172,"y":245.53792572021484},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    var newPayload = payload.__input;\n    newPayload.wo = tidy(payload);\n    \n    if (newPayload.event.actionTypeID === 9) {\n       \n        if ([15, 35, 40].indexOf(newPayload.user.userRoleID) !== -1) {\n    \t    newPayload.wo.newTaskStatusID = 42;   \n        }\n        newPayload.wo.newUserID = newPayload.user.userID;\n        newPayload.wo.newStaffID = newPayload.user.staffID;\n    }\n   \n    newPayload.flag = \"WO_CARDIN\";\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":33,"inputConnectors":[{"name":""}],"name":"Prepare 2","outputConnectors":[{"name":"Out"}],"width":175,"x":600.6643371582031,"y":253.51690673828125},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"wo.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":34,"inputConnectors":[{"name":""}],"name":"To wo.update","outputConnectors":[{"name":"Out"}],"width":175,"x":818.1703796386719,"y":257.4430465698242},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output. \n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n\n**Using our available helpers Lodash, Moment and UUID**: \n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date. \n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want. \n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    // If nothing is returned and it's a Card Out set empty object for User\n    if (payload.count === 0 || newPayload.event.actionTypeID === 10) {\n        newPayload.user = {};\n        return [newPayload, newPayload];\n    }\n    newPayload.user = tidy(payload.data[0])\n    \n    if (newPayload.user.isTechnician == 1) {\n        return [newPayload, newPayload];\n    }\n    if (newPayload.user.isAttendant == 1) {\n\t    return [newPayload, null];\n    }\n    return [null, null];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":25,"inputConnectors":[{"name":""}],"invalid":false,"name":"Role?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":-340.79453563690186,"y":155.07431030273438},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    \n    if (newPayload.event.actionTypeID === 9) {\n        if (newPayload.user.isAttendant == 1\n            || newPayload.user.isSupervisor == 1\n            || newPayload.user.isManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 3;    \n        }\n        if (newPayload.user.isTechnician == 1\n            || newPayload.user.isTechSupervisor == 1\n            || newPayload.user.isTechManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 33;\n    \t    newPayload.task.newIsTechTask = 1; \n    \t    if (newPayload.task.parentID == null) {\n    \t        newPayload.task.newParentID = newPayload.task._ID;\n    \t    }\n        }\n        newPayload.task.newUserID = newPayload.user.userID;\n        newPayload.task.newStaffID = newPayload.user.staffID;\n    }\n    if (newPayload.event.actionTypeID === 10) {\n        newPayload.task.newTaskStatusID = 13;\n    }\n    newPayload.flag = \"UPDATE\";\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":28,"inputConnectors":[{"name":""}],"name":"Prepare 1","outputConnectors":[{"name":"Out"}],"width":175,"x":342.2042007446289,"y":121.72924041748047},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    \n    if (newPayload.event.actionTypeID === 9) {\n        if (newPayload.user.isAttendant == 1\n            || newPayload.user.isSupervisor == 1\n            || newPayload.user.isManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 3;    \n        }\n        if (newPayload.user.isTechnician == 1\n            || newPayload.user.isTechSupervisor == 1\n            || newPayload.user.isTechManager == 1) {\n    \t    newPayload.task.newTaskStatusID = 33;\n    \t    newPayload.task.newIsTechTask = 1; \n    \t    if (newPayload.task.parentID == null) {\n    \t        newPayload.task.newParentID = newPayload.task._ID;\n    \t    }\n        }\n        newPayload.task.newUserID = newPayload.user.userID;\n        newPayload.task.newStaffID = newPayload.user.staffID;\n    }\n    if (newPayload.event.actionTypeID === 10) {\n        newPayload.task.newTaskStatusID = 13;\n    }\n    newPayload.flag = \"UPDATE\";\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":35,"inputConnectors":[{"name":"In"}],"name":"Prepare 3","outputConnectors":[{"name":"Out"}],"width":175,"x":346.8934020996094,"y":-19.375149846076965},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    if (payload.event.actionTypeID === 9) {\n        return true;\n    }\n    if (payload.appPrefs.cardOutIDEnabled.value === \"1\") {\n        return payload.event.staffID == payload.appPrefs.cardOutID.value;    \n    }\n    return payload.appPrefs.cardOutEnabled.value === \"1\";\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":36,"inputConnectors":[{"name":"In"}],"name":"Filter out card out 2","outputConnectors":[{"name":"Out"}],"width":175,"x":579.6631469726562,"y":-12.945050239562988}],"viewBox":[69,-240,1,1256]},"id":"7c45a279-4691-4f96-a6f8-da606d3973d2","lastUpdated":"2019-01-31T01:12:10.709Z","name":"02-02 Card Event","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":28},{"dateCreated":"2018-11-28T02:54:35.510Z","definition":{"components":{"csv-converter8":{"config":{"delimiter":"","includeInput":true,"inputNamespace":"input","labelHeader":[],"payloadPath":"report","quote":"","showHeader":true,"unwindNested":true},"name":"CSV Converter","type":"csv-converter"},"db-ms-sql17":{"config":{"cacheResults":true,"cacheTTL":3600,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    name as name,\r\n    value as value\r\nfrom ve_vw_tv_applicationPreference\r\nwhere name = 'Viz_Alert_Staff_Performance_Report_Emails'","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"App Preferences","type":"db-ms-sql"},"db-ms-sql3":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select \n    u.userName as 'Attendant'\n    ,sp.businessdate as 'Date'\n    ,tt.tasktypedescription as 'Task Type'\n    ,sp.completeCount as 'Count'\n    ,sp.escalationcount as 'Escalations'\n    ,sp.avgresponsetime as 'Avg Response Time'\n    ,sp.avgworktime as 'Avg Work Time'\n    ,sp.avgtotaltime as 'Avg Total Time'\n    ,sp.minresponsetime as 'Min Response Time'\n    ,sp.minworktime as 'Min Work Time'\n    ,sp.mintotaltime as 'Min Total Time'\n    ,sp.maxresponsetime as 'Max Response Time'\n    ,sp.maxworktime as 'Max Work Time'\n    ,sp.maxtotaltime as 'Max Total Time'\n    ,sp.totalresponsetime as 'Total Response Time'\n    ,sp.totalworktime as 'Total Work Time'\n    ,sp.totaltotaltime as 'Total Total Time'\nfrom (\n    {{payload.sql}}\n) as sp \nleft join VE_VW_tv_User u \non u.userid = sp.userid\nleft join VE_VW_tv_UserRole ur\non ur.userroleid = sp.userroleid\nleft join VE_VW_tv_TaskType tt\non tt.tasktypeid = sp.tasktypeid\n\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"_input","split":false},"name":"Staff Perf + Lookups","type":"db-ms-sql"},"mail-sender9":{"config":{"assetConfiguration":"","attachments":[{"dataPath":"csv","encoding":"","filename":"staff-performance-report.csv"}],"connectionConfiguration":"a2736cb8-2cc0-4e2f-8680-67cbebe677df","continuesOnError":false,"from":"vizflow@test.com","html":"","subject":"Staff Performance Report","text":"Follow attached the Staff Performance Report.","to":"{{payload.input.emailTo}}"},"name":"Mail + Attached CSV Report","type":"mail-sender"},"schedule25":{"config":{"cron":"0 6 1 * *"},"name":"1st of the Month","type":"schedule"},"transform11":{"config":{"expression":"(function() {\n    const AVG_RESP_TIME = 'Avg Response Time';\n    const AVG_WORK_TIME = 'Avg Work Time';\n    const AVG_TOTAL_TIME = 'Avg Total Time';\n    const MIN_RESP_TIME = 'Min Response Time';\n    const MIN_WORK_TIME = 'Min Work Time';\n    const MIN_TOTAL_TIME = 'Min Total Time';\n    const MAX_RESP_TIME = 'Max Response Time';\n    const MAX_WORK_TIME = 'Max Work Time';\n    const MAX_TOTAL_TIME = 'Max Total Time';\n    const TOTAL_RESP_TIME = 'Total Response Time';\n    const TOTAL_WORK_TIME = 'Total Work Time';\n    const TOTAL_TOTAL_TIME = 'Total Total Time';\n    const ATTENDANT = 'Attendant';\n    const TASK_TYPE = 'Task Type';\n    const DATE_FORMAT = 'YYYY-MM-DD';\n    const ESCAPE_SYMBOL = '-';\n\n    let emailTo = payload._input.appPref.value;\n    let aggrAttendantsList = Object.values(aggrByAttendant(payload.data));\n    let attendantsSorted = _.sortBy(aggrAttendantsList, [ATTENDANT]);\n    let report = attendantsSorted.map(toFormattedDisplay);\n\n    return { report, emailTo };\n\n    // Private Functions\n    function toFormattedDisplay(row) {\n        let dateVal = setsPresentation(row.dateSet);\n        let taskTypeVal = setsPresentation(row.taskTypeSet);\n        row[ATTENDANT] = row[ATTENDANT] || ESCAPE_SYMBOL;\n        row.Escalations = row.Escalations || ESCAPE_SYMBOL;\n        row.Date = dateVal;\n        row[TASK_TYPE] = taskTypeVal;\n        row[AVG_RESP_TIME] = row[AVG_RESP_TIME]/row.rowCounter;\n        row[AVG_WORK_TIME] = row[AVG_WORK_TIME]/row.rowCounter;\n        row[AVG_TOTAL_TIME] = row[AVG_TOTAL_TIME]/row.rowCounter;        \n        delete row.dateSet;\n        delete row.rowCounter;\n        delete row.taskTypeSet;\n        setupDatesPresentation(row);\n        return row;\n    }\n\n    function setsPresentation(set) {\n        if(set.size === 1) {\n            return set.values().next().value;\n        } else {\n            return `[${set.size}]`;\n        }\n    }\n\t\n\tfunction formatDate(entry) {\n        entry.Date = moment(entry.Date).format(DATE_FORMAT);\n        return entry;\n    }\n\n\n    function aggrByAttendant(attendants) {\n        const atts = attendants.reduce((current, next) => {\n            next = formatDate(next);\n            if(current[next[ATTENDANT]]) {\n                let obj = current[next[ATTENDANT]];\n                obj.dateSet.add(next.Date);\n                obj.taskTypeSet.add(next[TASK_TYPE]);\n                obj.Count += next.Count;\n                obj.Escalations += next.Escalations;\n                updateAverages(obj, next);\n                updateMax(obj, next);\n                updateMin(obj, next);\n                updateTotals(obj, next);\n            } else {\n                let dateSet = new Set([next.Date]);\n                let taskTypeSet = new Set([next[TASK_TYPE]]);\n                let rowCounter = 1;\n                current[next[ATTENDANT]] = {\n                    ...next,\n                    dateSet,\n                    taskTypeSet,\n                    rowCounter\n                };\n            }\n            return current;\n        }, {});\n\n        return atts;\n    }\n\n    function updateAverages(obj, next) {\n        obj[AVG_RESP_TIME] += next[AVG_RESP_TIME];\n        obj[AVG_WORK_TIME] += next[AVG_WORK_TIME];\n        obj[AVG_TOTAL_TIME] += next[AVG_TOTAL_TIME];\n        obj.rowCounter ++;\n    }\n\n    function updateMin(obj, next) {\n        obj[MIN_WORK_TIME] = Math.min(obj[MIN_WORK_TIME], next[MIN_WORK_TIME]);\n        obj[MIN_RESP_TIME] = Math.min(obj[MIN_RESP_TIME], next[MIN_RESP_TIME]);\n        obj[MIN_TOTAL_TIME] = Math.min(obj[MIN_TOTAL_TIME], next[MIN_TOTAL_TIME]);\n    }\n\n    function updateMax(obj, next) {\n        obj[MAX_WORK_TIME] = Math.max(obj[MAX_WORK_TIME], next[MAX_WORK_TIME]);\n        obj[MAX_RESP_TIME] = Math.max(obj[MAX_RESP_TIME], next[MAX_RESP_TIME]);\n        obj[MAX_TOTAL_TIME] = Math.max(obj[MAX_TOTAL_TIME], next[MAX_TOTAL_TIME]);\n    }\n\n\n    function updateTotals(obj, next) {\n        obj[TOTAL_WORK_TIME] += next[TOTAL_WORK_TIME];\n        obj[TOTAL_RESP_TIME] += next[TOTAL_RESP_TIME];\n        obj[TOTAL_TOTAL_TIME] += next[TOTAL_TOTAL_TIME];\n    }\n\n    function setupDatesPresentation(row) {\n        row[AVG_RESP_TIME] = dateFormat(row[AVG_RESP_TIME]);\n        row[AVG_WORK_TIME] = dateFormat(row[AVG_WORK_TIME]);\n        row[AVG_TOTAL_TIME] = dateFormat(row[AVG_TOTAL_TIME]);\n\n        row[MIN_RESP_TIME] = dateFormat(row[MIN_RESP_TIME]);\n        row[MIN_WORK_TIME] = dateFormat(row[MIN_WORK_TIME]);\n        row[MIN_TOTAL_TIME] = dateFormat(row[MIN_TOTAL_TIME]);\n\n        row[MAX_RESP_TIME] = dateFormat(row[MAX_RESP_TIME]);\n        row[MAX_WORK_TIME] = dateFormat(row[MAX_WORK_TIME]);\n        row[MAX_TOTAL_TIME] = dateFormat(row[MAX_TOTAL_TIME]);\n\n        row[TOTAL_RESP_TIME] = dateFormat(row[TOTAL_RESP_TIME]);\n        row[TOTAL_WORK_TIME] = dateFormat(row[TOTAL_WORK_TIME]);\n        row[TOTAL_TOTAL_TIME] = dateFormat(row[TOTAL_TOTAL_TIME]);\n    }\n\n    function dateFormat(seconds) {\n        if(!seconds) {\n            return ESCAPE_SYMBOL;\n          }\n          seconds = Math.round(seconds);\n          let minutes = Math.floor(seconds/60);\n          let hours = Math.floor((minutes/60));\n          let days = Math.floor(hours/24);\n          let hoursRest = Math.floor(hours % 24);\n          let minutesRest = Math.floor(minutes % 60);\n          let secondsRest = Math.floor(seconds % 60);\n        \n          return `\\\"${days ? days+'D ':''}${hoursRest ? hoursRest+'H ': ''}${leadingZero(minutesRest)}:${leadingZero(secondsRest)}\\\"`;\n    }\n    \n    function leadingZero(val) {\n        return val < 10 ? '0'+val : val;\n     }\n})();","variables":""},"name":"Group + Aggr Attendants","type":"transform"},"transform4":{"config":{"expression":"(function() {\n    let datePart = 'm';\n    let number = -6;\n    \n\treturn {\n\t    appPref: payload,\n\t\tsql: `SELECT CASE \n\t\tWHEN (cast(ut_taskcombined.TaskCreated AS TIME)) >= '00:00:00'\n\t\t\tAND (cast(ut_taskcombined.TaskCreated AS TIME)) < (\n\t\t\t\tCASE \n\t\t\t\t\tWHEN (VizShift.starttime) = '00:00:00.0000000'\n\t\t\t\t\t\tTHEN (VizShift.endtime)\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tTHEN dateadd(dd, - 1, cast(ut_taskcombined.TaskCreated AS DATE))\n\t\tELSE cast(ut_taskcombined.TaskCreated AS DATE)\n\t\tEND AS BusinessDate\n\t,max(1) AS Hack\n\t,Max(1) AS HackJoin\n\t,UT_TaskCombined.TaskTypeID AS TaskTypeID\n\t,UT_TaskCombined.UserID AS UserID\n\t,VizUser.UserRoleID AS UserRoleID\n\t,avg(datediff(ss, taskcreated, taskresponded)) AS AvgResponseTime\n\t,AVG(UT_TaskCombined.TotalTime) AS AvgTotalTime\n\t,AVG(UT_TaskCombined.WorkTime) AS AvgWorkTime\n\t,sum(CASE \n\t\t\tWHEN UT_TaskCombined.taskstatusid = '13'\n\t\t\t\tTHEN 1\n\t\t\tELSE 0\n\t\t\tEND) AS CompleteCount\n\t,count(DISTINCT CASE \n\t\t\tWHEN TechEscalated = 1\n\t\t\t\tTHEN UT_TaskCombined._ID\n\t\t\tEND) AS EscalationCount\n\t,MAX(UT_TaskCombined.ResponseTime) AS MaxResponseTime\n\t,MAX(UT_TaskCombined.TotalTime) AS MaxTotalTime\n\t,MAX(UT_TaskCombined.WorkTime) AS MaxWorkTime\n\t,MIN(UT_TaskCombined.ResponseTime) AS MinResponseTime\n\t,MIN(UT_TaskCombined.TotalTime) AS MinTotalTime\n\t,MIN(UT_TaskCombined.WorkTime) AS MinWorkTime\n\t,SUM(UT_TaskCombined.ResponseTime) AS TotalResponseTime\n\t,SUM(UT_TaskCombined.TotalTime) AS TotalTotalTime\n\t,SUM(UT_TaskCombined.WorkTime) AS TotalWorkTime\nFROM (\n\t/* UnionTable: UT_TaskCombined*/ (\n\t\t/* SqlTableCalculator VizSQLTCTaskHistory. Generated as: Sql */\n\t\tSELECT AVG(DATEDIFF(ss, TaskCreated, CURRENT_TIMESTAMP)) AS ElapsedTime\n\t\t\t,VizTaskHistory.BonusID AS BonusID\n\t\t\t,VizTaskHistory.Amount AS Amount\n\t\t\t,VizTaskHistory.EventCode2 AS EventCode2\n\t\t\t,VizTaskHistory.EventID AS EventID\n\t\t\t,VizTaskHistory.EventCode1 AS EventCode1\n\t\t\t,VizTaskHistory.MachineID AS MachineID\n\t\t\t,VizTaskHistory.TaskUrgency AS TaskUrgency\n\t\t\t,VizTaskHistory.TaskTypeID AS TaskTypeID\n\t\t\t,VizTaskHistory.TaskStatusID AS TaskStatusID\n\t\t\t,VizTaskHistory._Version AS _Version\n\t\t\t,VizTaskHistory.UniqueID AS UniqueID\n\t\t\t,LEFT(VizTaskHistory.Location, 2) + '-' + SUBSTRING(VizTaskHistory.Location, 4, 2) + '-' + RIGHT(VizTaskHistory.Location, 2) AS Location\n\t\t\t,VizTaskHistory.EventDesc AS EventDesc\n\t\t\t,NULL AS CompletionAlert\n\t\t\t,VizTaskHistory.ParentUserID AS ParentUser\n\t\t\t,VizTaskHistory.ParentID AS ParentID\n\t\t\t,VizTaskHistory.MachineIP AS MachineIP\n\t\t\t,VizTaskHistory.TaskNote AS TaskNote\n\t\t\t,VizTaskHistory.StaffID AS StaffID\n\t\t\t,VizTaskHistory.PlayerID AS PlayerID\n\t\t\t,VizTaskHistory.UserID AS UserID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTaskHistory.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND AS UserAssigned\n\t\t\t,VizTaskHistory.TechEscalated AS TechEscalated\n\t\t\t,VizTaskHistory._ID AS _ID\n\t\t\t,SUM(DATEDIFF(S, VizTaskhistory.TaskResponded, VizTaskhistory.TaskCompleted)) AS WorkTime\n\t\t\t,SUM(DATEDIFF(S, VizTaskhistory.TaskCreated, VizTaskhistory.TaskCompleted)) AS TotalTime\n\t\t\t,SUM(DATEDIFF(S, VizTaskHistory.TaskCreated, VizTaskHistory.TaskResponded)) AS ResponseTime\n\t\t\t,VizTaskHistory.TaskCreated AS TaskCreated\n\t\t\t,VizTaskHistory.TaskCompleted AS TaskCompleted\n\t\t\t,VizTaskHistory.TaskResponded AS TaskResponded\n\t\t\t,VizTaskHistory.InsertDate AS InsertDate\n\t\t\t,VizTaskHistory.TaskAssigned AS TaskAssigned\n\t\t\t,VizTaskHistory.Task_Hour AS Task_Hour\n\t\t\t,VizTaskHistory.HackJoin AS HackJoin\n\t\t\t,CAST(viztaskhistory.TransDate AS DATE) AS TransDate\n\t\t\t,Datepart(hh, viztaskhistory.Task_Hour) AS HourPart\n\t\t\t,VizTaskHistory.SiteID AS SiteID\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME) AS Timeslot\n\t\t\t,VizTaskHistory.TaskReset AS TaskReset\n\t\t\t,VizTaskHistory.EscalationTypeID AS EscalationTypeID\n\t\t\t,VizTaskHistory.IsTechTask AS IsTechTask\n\t\tFROM TechViz_Template.dbo.VE_VW_tv_TaskHistory AS VizTaskHistory\n\t\tGROUP BY VizTaskHistory._ID\n\t\t\t,VizTaskHistory._Version\n\t\t\t,VizTaskHistory.Amount\n\t\t\t,VizTaskHistory.BonusID\n\t\t\t,VizTaskHistory.EscalationTypeID\n\t\t\t,VizTaskHistory.EventCode1\n\t\t\t,VizTaskHistory.EventCode2\n\t\t\t,VizTaskHistory.EventDesc\n\t\t\t,VizTaskHistory.EventID\n\t\t\t,VizTaskHistory.HackJoin\n\t\t\t,VizTaskHistory.HackJoin\n\t\t\t,Datepart(hh, viztaskhistory.Task_Hour)\n\t\t\t,VizTaskHistory.InsertDate\n\t\t\t,VizTaskHistory.IsTechTask\n\t\t\t,LEFT(VizTaskHistory.Location, 2) + '-' + SUBSTRING(VizTaskHistory.Location, 4, 2) + '-' + RIGHT(VizTaskHistory.Location, 2)\n\t\t\t,VizTaskHistory.MachineID\n\t\t\t,VizTaskHistory.MachineIP\n\t\t\t,VizTaskHistory.ParentID\n\t\t\t,VizTaskHistory.ParentUserID\n\t\t\t,VizTaskHistory.PlayerID\n\t\t\t,VizTaskHistory.SiteID\n\t\t\t,VizTaskHistory.StaffID\n\t\t\t,VizTaskHistory.Task_Hour\n\t\t\t,VizTaskHistory.TaskAssigned\n\t\t\t,VizTaskHistory.TaskCompleted\n\t\t\t,VizTaskHistory.TaskCreated\n\t\t\t,VizTaskHistory.TaskNote\n\t\t\t,VizTaskHistory.TaskReset\n\t\t\t,VizTaskHistory.TaskResponded\n\t\t\t,VizTaskHistory.TaskStatusID\n\t\t\t,VizTaskHistory.TaskTypeID\n\t\t\t,VizTaskHistory.TaskUrgency\n\t\t\t,VizTaskHistory.TechEscalated\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME)\n\t\t\t,CAST(viztaskhistory.TransDate AS DATE)\n\t\t\t,CAST(viztaskhistory.TransDate AS DATE)\n\t\t\t,VizTaskHistory.UniqueID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTaskHistory.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND\n\t\t\t,VizTaskHistory.UserID\n\t\t\t/* End: VizSQLTCTaskHistory */\n\t\t)\n\t\n\tUNION ALL\n\t\n\t(\n\t\t/* SqlTableCalculator VizSQLTCTask. Generated as: Sql */\n\t\tSELECT (DATEDIFF(ss, TaskCreated, CURRENT_TIMESTAMP)) AS ElapsedTime\n\t\t\t,VizTask.BonusID AS BonusID\n\t\t\t,VizTask.Amount AS Amount\n\t\t\t,VizTask.EventCode2 AS EventCode2\n\t\t\t,VizTask.EventID AS EventID\n\t\t\t,VizTask.EventCode1 AS EventCode1\n\t\t\t,VizTask.MachineID AS MachineID\n\t\t\t,VizTask.TaskUrgency AS TaskUrgency\n\t\t\t,VizTask.TaskTypeID AS TaskTypeID\n\t\t\t,VizTask.TaskStatusID AS TaskStatusID\n\t\t\t,VizTask._Version AS _Version\n\t\t\t,VizTask.UniqueID AS UniqueID\n\t\t\t,LEFT(VizTask.Location, 2) + '-' + SUBSTRING(VizTask.Location, 4, 2) + '-' + RIGHT(VizTask.Location, 2) AS Location\n\t\t\t,VizTask.EventDesc AS EventDesc\n\t\t\t,VizTask.CompletionAlert AS CompletionAlert\n\t\t\t,VizTask.ParentUserID AS ParentUser\n\t\t\t,VizTask.ParentID AS ParentID\n\t\t\t,VizTask.MachineIP AS MachineIP\n\t\t\t,VizTask.TaskNote AS TaskNote\n\t\t\t,VizTask.StaffID AS StaffID\n\t\t\t,VizTask.PlayerID AS PlayerID\n\t\t\t,VizTask.UserID AS UserID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTask.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND AS UserAssigned\n\t\t\t,VizTask.TechEscalated AS TechEscalated\n\t\t\t,VizTask._ID AS _ID\n\t\t\t,SUM(DATEDIFF(S, VizTask.TaskResponded, VizTask.TaskCompleted)) AS WorkTime\n\t\t\t,SUM(DATEDIFF(S, VizTask.TaskCreated, VizTask.TaskCompleted)) AS TotalTime\n\t\t\t,SUM(DATEDIFF(S, VizTask.TaskCreated, VizTask.TaskResponded)) AS ResponseTime\n\t\t\t,VizTask.TaskCreated AS TaskCreated\n\t\t\t,VizTask.TaskCompleted AS TaskCompleted\n\t\t\t,VizTask.TaskResponded AS TaskResponded\n\t\t\t,VizTask.InsertDate AS InsertDate\n\t\t\t,VizTask.TaskAssigned AS TaskAssigned\n\t\t\t,VizTask.Task_Hour AS Task_Hour\n\t\t\t,VizTask.HackJoin AS HackJoin\n\t\t\t,CAST(viztask.TransDate AS DATE) AS TransDate\n\t\t\t,Datepart(hh, viztask.Task_Hour) AS HourPart\n\t\t\t,VizTask.SiteID AS SiteID\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME) AS Timeslot\n\t\t\t,VizTask.TaskReset AS TaskReset\n\t\t\t,VizTask.EscalationTypeID AS EscalationTypeID\n\t\t\t,VizTask.IsTechTask AS IsTechTask\n\t\tFROM TechViz_Template.dbo.VE_VW_tv_Task AS VizTask\n\t\tGROUP BY VizTask._ID\n\t\t\t,VizTask._Version\n\t\t\t,VizTask.Amount\n\t\t\t,VizTask.BonusID\n\t\t\t,VizTask.CompletionAlert\n\t\t\t,(DATEDIFF(ss, TaskCreated, CURRENT_TIMESTAMP))\n\t\t\t,VizTask.EscalationTypeID\n\t\t\t,VizTask.EventCode1\n\t\t\t,VizTask.EventCode2\n\t\t\t,VizTask.EventDesc\n\t\t\t,VizTask.EventID\n\t\t\t,VizTask.HackJoin\n\t\t\t,VizTask.HackJoin\n\t\t\t,Datepart(hh, viztask.Task_Hour)\n\t\t\t,VizTask.InsertDate\n\t\t\t,VizTask.IsTechTask\n\t\t\t,LEFT(VizTask.Location, 2) + '-' + SUBSTRING(VizTask.Location, 4, 2) + '-' + RIGHT(VizTask.Location, 2)\n\t\t\t,VizTask.MachineID\n\t\t\t,VizTask.MachineIP\n\t\t\t,VizTask.ParentID\n\t\t\t,VizTask.ParentUserID\n\t\t\t,VizTask.PlayerID\n\t\t\t,VizTask.SiteID\n\t\t\t,VizTask.StaffID\n\t\t\t,VizTask.Task_Hour\n\t\t\t,VizTask.TaskAssigned\n\t\t\t,VizTask.TaskCompleted\n\t\t\t,VizTask.TaskCreated\n\t\t\t,VizTask.TaskNote\n\t\t\t,VizTask.TaskReset\n\t\t\t,VizTask.TaskResponded\n\t\t\t,VizTask.TaskStatusID\n\t\t\t,VizTask.TaskTypeID\n\t\t\t,VizTask.TaskUrgency\n\t\t\t,VizTask.TechEscalated\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME)\n\t\t\t,CAST(viztask.TransDate AS DATE)\n\t\t\t,VizTask.UniqueID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTask.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND\n\t\t\t,VizTask.UserID /* End: VizSQLTCTask */\n\t\t)\n\t) AS UT_TaskCombined\nINNER JOIN (\n\t/* SqlTableCalculator VizSQLTCLoggedInUser. Generated as: Sql */ SELECT VizUserMultiSite._ID AS _ID\n\t\t,VizUserMultiSite._Version AS _Version\n\t\t,VizUserMultiSite.DefaultValue AS DefaultValue\n\t\t,VizUserMultiSite.LookupName AS LookupName\n\t\t,VizUserMultiSite.UserName AS LookupValue\n\t\t,VizUserMultiSite.ParentKey AS ParentKey\n\t\t,VizUserMultiSite.SiteID AS SiteID\n\t\t,VizUserMultiSite.UserID AS UserID\n\tFROM TechViz_Template.dbo.VE_VW_tv_User AS VizUserMultiSite\n\tWHERE (VizUserMultiSite.UserID = 'irina')\n\tGROUP BY VizUserMultiSite._ID\n\t\t,VizUserMultiSite._Version\n\t\t,VizUserMultiSite.DefaultValue\n\t\t,VizUserMultiSite.LookupName\n\t\t,VizUserMultiSite.UserName\n\t\t,VizUserMultiSite.ParentKey\n\t\t,VizUserMultiSite.SiteID\n\t\t,VizUserMultiSite.UserID /* End: VizSQLTCLoggedInUser */\n\t) AS VizSQLTCLoggedInUser ON UT_TaskCombined.SiteID = VizSQLTCLoggedInUser.SiteID\nLEFT JOIN TechViz_Template.dbo.VE_VW_tv_Shift AS VizShift ON (\n\t\tUT_TaskCombined.Task_Hour >= VizShift.StartTime\n\t\tAND UT_TaskCombined.Task_Hour < VizShift.EndTime\n\t\t)\nLEFT JOIN TechViz_Template.dbo.VE_VW_tv_User AS VizUser ON UT_TaskCombined.UserID = VizUser.UserID\nWHERE (\n\t\t(UT_TaskCombined.TaskCreated >= dateadd(${datePart}, ${number}, CAST(CURRENT_TIMESTAMP as date)))\n\t\tAND (UT_TaskCombined.TaskCreated < CURRENT_TIMESTAMP)\n\t\tAND (UT_TaskCombined.IsTechTask = '0')\n\t\tAND (\n\t\t\tUT_TaskCombined.TaskTypeID IN (\n\t\t\t\t1\n\t\t\t\t,2\n\t\t\t\t,3\n\t\t\t\t,4\n\t\t\t\t,5\n\t\t\t\t,6\n\t\t\t\t,7\n\t\t\t\t,8\n\t\t\t\t,9\n\t\t\t\t,10\n\t\t\t\t,11\n\t\t\t\t,12\n\t\t\t\t,13\n\t\t\t\t,16\n\t\t\t\t,102\n\t\t\t\t,103\n\t\t\t\t)\n\t\t\t)\n\t\tAND (UT_TaskCombined.TaskStatusID = 13)\n\t\t)\nGROUP BY CASE \n\t\tWHEN (cast(ut_taskcombined.TaskCreated AS TIME)) >= '00:00:00'\n\t\t\tAND (cast(ut_taskcombined.TaskCreated AS TIME)) < (\n\t\t\t\tCASE \n\t\t\t\t\tWHEN (VizShift.starttime) = '00:00:00.0000000'\n\t\t\t\t\t\tTHEN (VizShift.endtime)\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tTHEN dateadd(dd, - 1, cast(ut_taskcombined.TaskCreated AS DATE))\n\t\tELSE cast(ut_taskcombined.TaskCreated AS DATE)\n\t\tEND\n\t,UT_TaskCombined.TaskTypeID\n\t,UT_TaskCombined.UserID\n\t,VizUser.UserRoleID`\n\t};\n})();","variables":""},"name":"Staff Perf (6 Month Backwards)","type":"transform"}},"links":[{"from":"transform4","to":"db-ms-sql3"},{"from":"csv-converter8","to":"mail-sender9"},{"from":"transform11","to":"csv-converter8"},{"from":"db-ms-sql3","to":"transform11"},{"from":"db-ms-sql17","to":"transform4"},{"from":"schedule25","to":"db-ms-sql17"}]},"description":"<h1><!--block-->What is it doing:</h1><div><!--block-->Reproducing the same report done from the document <strong>TV_12 Attendant Summary Reports</strong> at VizExplorer app.&nbsp;<br><br></div><div><!--block--><strong>Steps:</strong></div><ul><li><!--block-->Runs first day of the Month (Currently)</li><li><!--block-->Get the application preference looking for a preference named '<strong>Viz_Alert_Staff_Performance_Report_Emails</strong>'</li><li><!--block-->Use the query plan used on Staff Report query plan joining with Lookups</li><li><!--block-->Group the Attendants returned and apply the correct calculations for (Average, min, max and total) times. Escape those times with a <strong>extra pair of double quotes</strong> to avoid spreadsheet to read the value as a Date/Time value.</li><li><!--block-->Convert the aggregated value into CSV preserving the input to be used in the e-mail sender.</li><li><!--block-->Send the CSV as attachment to the defined e-mail in the application preferences.</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":17}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":25}}],"nodes":[{"color":"#0433ff","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    let datePart = 'm';\n    let number = -6;\n    \n\treturn {\n\t    appPref: payload,\n\t\tsql: `SELECT CASE \n\t\tWHEN (cast(ut_taskcombined.TaskCreated AS TIME)) >= '00:00:00'\n\t\t\tAND (cast(ut_taskcombined.TaskCreated AS TIME)) < (\n\t\t\t\tCASE \n\t\t\t\t\tWHEN (VizShift.starttime) = '00:00:00.0000000'\n\t\t\t\t\t\tTHEN (VizShift.endtime)\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tTHEN dateadd(dd, - 1, cast(ut_taskcombined.TaskCreated AS DATE))\n\t\tELSE cast(ut_taskcombined.TaskCreated AS DATE)\n\t\tEND AS BusinessDate\n\t,max(1) AS Hack\n\t,Max(1) AS HackJoin\n\t,UT_TaskCombined.TaskTypeID AS TaskTypeID\n\t,UT_TaskCombined.UserID AS UserID\n\t,VizUser.UserRoleID AS UserRoleID\n\t,avg(datediff(ss, taskcreated, taskresponded)) AS AvgResponseTime\n\t,AVG(UT_TaskCombined.TotalTime) AS AvgTotalTime\n\t,AVG(UT_TaskCombined.WorkTime) AS AvgWorkTime\n\t,sum(CASE \n\t\t\tWHEN UT_TaskCombined.taskstatusid = '13'\n\t\t\t\tTHEN 1\n\t\t\tELSE 0\n\t\t\tEND) AS CompleteCount\n\t,count(DISTINCT CASE \n\t\t\tWHEN TechEscalated = 1\n\t\t\t\tTHEN UT_TaskCombined._ID\n\t\t\tEND) AS EscalationCount\n\t,MAX(UT_TaskCombined.ResponseTime) AS MaxResponseTime\n\t,MAX(UT_TaskCombined.TotalTime) AS MaxTotalTime\n\t,MAX(UT_TaskCombined.WorkTime) AS MaxWorkTime\n\t,MIN(UT_TaskCombined.ResponseTime) AS MinResponseTime\n\t,MIN(UT_TaskCombined.TotalTime) AS MinTotalTime\n\t,MIN(UT_TaskCombined.WorkTime) AS MinWorkTime\n\t,SUM(UT_TaskCombined.ResponseTime) AS TotalResponseTime\n\t,SUM(UT_TaskCombined.TotalTime) AS TotalTotalTime\n\t,SUM(UT_TaskCombined.WorkTime) AS TotalWorkTime\nFROM (\n\t/* UnionTable: UT_TaskCombined*/ (\n\t\t/* SqlTableCalculator VizSQLTCTaskHistory. Generated as: Sql */\n\t\tSELECT AVG(DATEDIFF(ss, TaskCreated, CURRENT_TIMESTAMP)) AS ElapsedTime\n\t\t\t,VizTaskHistory.BonusID AS BonusID\n\t\t\t,VizTaskHistory.Amount AS Amount\n\t\t\t,VizTaskHistory.EventCode2 AS EventCode2\n\t\t\t,VizTaskHistory.EventID AS EventID\n\t\t\t,VizTaskHistory.EventCode1 AS EventCode1\n\t\t\t,VizTaskHistory.MachineID AS MachineID\n\t\t\t,VizTaskHistory.TaskUrgency AS TaskUrgency\n\t\t\t,VizTaskHistory.TaskTypeID AS TaskTypeID\n\t\t\t,VizTaskHistory.TaskStatusID AS TaskStatusID\n\t\t\t,VizTaskHistory._Version AS _Version\n\t\t\t,VizTaskHistory.UniqueID AS UniqueID\n\t\t\t,LEFT(VizTaskHistory.Location, 2) + '-' + SUBSTRING(VizTaskHistory.Location, 4, 2) + '-' + RIGHT(VizTaskHistory.Location, 2) AS Location\n\t\t\t,VizTaskHistory.EventDesc AS EventDesc\n\t\t\t,NULL AS CompletionAlert\n\t\t\t,VizTaskHistory.ParentUserID AS ParentUser\n\t\t\t,VizTaskHistory.ParentID AS ParentID\n\t\t\t,VizTaskHistory.MachineIP AS MachineIP\n\t\t\t,VizTaskHistory.TaskNote AS TaskNote\n\t\t\t,VizTaskHistory.StaffID AS StaffID\n\t\t\t,VizTaskHistory.PlayerID AS PlayerID\n\t\t\t,VizTaskHistory.UserID AS UserID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTaskHistory.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND AS UserAssigned\n\t\t\t,VizTaskHistory.TechEscalated AS TechEscalated\n\t\t\t,VizTaskHistory._ID AS _ID\n\t\t\t,SUM(DATEDIFF(S, VizTaskhistory.TaskResponded, VizTaskhistory.TaskCompleted)) AS WorkTime\n\t\t\t,SUM(DATEDIFF(S, VizTaskhistory.TaskCreated, VizTaskhistory.TaskCompleted)) AS TotalTime\n\t\t\t,SUM(DATEDIFF(S, VizTaskHistory.TaskCreated, VizTaskHistory.TaskResponded)) AS ResponseTime\n\t\t\t,VizTaskHistory.TaskCreated AS TaskCreated\n\t\t\t,VizTaskHistory.TaskCompleted AS TaskCompleted\n\t\t\t,VizTaskHistory.TaskResponded AS TaskResponded\n\t\t\t,VizTaskHistory.InsertDate AS InsertDate\n\t\t\t,VizTaskHistory.TaskAssigned AS TaskAssigned\n\t\t\t,VizTaskHistory.Task_Hour AS Task_Hour\n\t\t\t,VizTaskHistory.HackJoin AS HackJoin\n\t\t\t,CAST(viztaskhistory.TransDate AS DATE) AS TransDate\n\t\t\t,Datepart(hh, viztaskhistory.Task_Hour) AS HourPart\n\t\t\t,VizTaskHistory.SiteID AS SiteID\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME) AS Timeslot\n\t\t\t,VizTaskHistory.TaskReset AS TaskReset\n\t\t\t,VizTaskHistory.EscalationTypeID AS EscalationTypeID\n\t\t\t,VizTaskHistory.IsTechTask AS IsTechTask\n\t\tFROM TechViz_Template.dbo.VE_VW_tv_TaskHistory AS VizTaskHistory\n\t\tGROUP BY VizTaskHistory._ID\n\t\t\t,VizTaskHistory._Version\n\t\t\t,VizTaskHistory.Amount\n\t\t\t,VizTaskHistory.BonusID\n\t\t\t,VizTaskHistory.EscalationTypeID\n\t\t\t,VizTaskHistory.EventCode1\n\t\t\t,VizTaskHistory.EventCode2\n\t\t\t,VizTaskHistory.EventDesc\n\t\t\t,VizTaskHistory.EventID\n\t\t\t,VizTaskHistory.HackJoin\n\t\t\t,VizTaskHistory.HackJoin\n\t\t\t,Datepart(hh, viztaskhistory.Task_Hour)\n\t\t\t,VizTaskHistory.InsertDate\n\t\t\t,VizTaskHistory.IsTechTask\n\t\t\t,LEFT(VizTaskHistory.Location, 2) + '-' + SUBSTRING(VizTaskHistory.Location, 4, 2) + '-' + RIGHT(VizTaskHistory.Location, 2)\n\t\t\t,VizTaskHistory.MachineID\n\t\t\t,VizTaskHistory.MachineIP\n\t\t\t,VizTaskHistory.ParentID\n\t\t\t,VizTaskHistory.ParentUserID\n\t\t\t,VizTaskHistory.PlayerID\n\t\t\t,VizTaskHistory.SiteID\n\t\t\t,VizTaskHistory.StaffID\n\t\t\t,VizTaskHistory.Task_Hour\n\t\t\t,VizTaskHistory.TaskAssigned\n\t\t\t,VizTaskHistory.TaskCompleted\n\t\t\t,VizTaskHistory.TaskCreated\n\t\t\t,VizTaskHistory.TaskNote\n\t\t\t,VizTaskHistory.TaskReset\n\t\t\t,VizTaskHistory.TaskResponded\n\t\t\t,VizTaskHistory.TaskStatusID\n\t\t\t,VizTaskHistory.TaskTypeID\n\t\t\t,VizTaskHistory.TaskUrgency\n\t\t\t,VizTaskHistory.TechEscalated\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME)\n\t\t\t,CAST(viztaskhistory.TransDate AS DATE)\n\t\t\t,CAST(viztaskhistory.TransDate AS DATE)\n\t\t\t,VizTaskHistory.UniqueID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTaskHistory.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND\n\t\t\t,VizTaskHistory.UserID\n\t\t\t/* End: VizSQLTCTaskHistory */\n\t\t)\n\t\n\tUNION ALL\n\t\n\t(\n\t\t/* SqlTableCalculator VizSQLTCTask. Generated as: Sql */\n\t\tSELECT (DATEDIFF(ss, TaskCreated, CURRENT_TIMESTAMP)) AS ElapsedTime\n\t\t\t,VizTask.BonusID AS BonusID\n\t\t\t,VizTask.Amount AS Amount\n\t\t\t,VizTask.EventCode2 AS EventCode2\n\t\t\t,VizTask.EventID AS EventID\n\t\t\t,VizTask.EventCode1 AS EventCode1\n\t\t\t,VizTask.MachineID AS MachineID\n\t\t\t,VizTask.TaskUrgency AS TaskUrgency\n\t\t\t,VizTask.TaskTypeID AS TaskTypeID\n\t\t\t,VizTask.TaskStatusID AS TaskStatusID\n\t\t\t,VizTask._Version AS _Version\n\t\t\t,VizTask.UniqueID AS UniqueID\n\t\t\t,LEFT(VizTask.Location, 2) + '-' + SUBSTRING(VizTask.Location, 4, 2) + '-' + RIGHT(VizTask.Location, 2) AS Location\n\t\t\t,VizTask.EventDesc AS EventDesc\n\t\t\t,VizTask.CompletionAlert AS CompletionAlert\n\t\t\t,VizTask.ParentUserID AS ParentUser\n\t\t\t,VizTask.ParentID AS ParentID\n\t\t\t,VizTask.MachineIP AS MachineIP\n\t\t\t,VizTask.TaskNote AS TaskNote\n\t\t\t,VizTask.StaffID AS StaffID\n\t\t\t,VizTask.PlayerID AS PlayerID\n\t\t\t,VizTask.UserID AS UserID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTask.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND AS UserAssigned\n\t\t\t,VizTask.TechEscalated AS TechEscalated\n\t\t\t,VizTask._ID AS _ID\n\t\t\t,SUM(DATEDIFF(S, VizTask.TaskResponded, VizTask.TaskCompleted)) AS WorkTime\n\t\t\t,SUM(DATEDIFF(S, VizTask.TaskCreated, VizTask.TaskCompleted)) AS TotalTime\n\t\t\t,SUM(DATEDIFF(S, VizTask.TaskCreated, VizTask.TaskResponded)) AS ResponseTime\n\t\t\t,VizTask.TaskCreated AS TaskCreated\n\t\t\t,VizTask.TaskCompleted AS TaskCompleted\n\t\t\t,VizTask.TaskResponded AS TaskResponded\n\t\t\t,VizTask.InsertDate AS InsertDate\n\t\t\t,VizTask.TaskAssigned AS TaskAssigned\n\t\t\t,VizTask.Task_Hour AS Task_Hour\n\t\t\t,VizTask.HackJoin AS HackJoin\n\t\t\t,CAST(viztask.TransDate AS DATE) AS TransDate\n\t\t\t,Datepart(hh, viztask.Task_Hour) AS HourPart\n\t\t\t,VizTask.SiteID AS SiteID\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME) AS Timeslot\n\t\t\t,VizTask.TaskReset AS TaskReset\n\t\t\t,VizTask.EscalationTypeID AS EscalationTypeID\n\t\t\t,VizTask.IsTechTask AS IsTechTask\n\t\tFROM TechViz_Template.dbo.VE_VW_tv_Task AS VizTask\n\t\tGROUP BY VizTask._ID\n\t\t\t,VizTask._Version\n\t\t\t,VizTask.Amount\n\t\t\t,VizTask.BonusID\n\t\t\t,VizTask.CompletionAlert\n\t\t\t,(DATEDIFF(ss, TaskCreated, CURRENT_TIMESTAMP))\n\t\t\t,VizTask.EscalationTypeID\n\t\t\t,VizTask.EventCode1\n\t\t\t,VizTask.EventCode2\n\t\t\t,VizTask.EventDesc\n\t\t\t,VizTask.EventID\n\t\t\t,VizTask.HackJoin\n\t\t\t,VizTask.HackJoin\n\t\t\t,Datepart(hh, viztask.Task_Hour)\n\t\t\t,VizTask.InsertDate\n\t\t\t,VizTask.IsTechTask\n\t\t\t,LEFT(VizTask.Location, 2) + '-' + SUBSTRING(VizTask.Location, 4, 2) + '-' + RIGHT(VizTask.Location, 2)\n\t\t\t,VizTask.MachineID\n\t\t\t,VizTask.MachineIP\n\t\t\t,VizTask.ParentID\n\t\t\t,VizTask.ParentUserID\n\t\t\t,VizTask.PlayerID\n\t\t\t,VizTask.SiteID\n\t\t\t,VizTask.StaffID\n\t\t\t,VizTask.Task_Hour\n\t\t\t,VizTask.TaskAssigned\n\t\t\t,VizTask.TaskCompleted\n\t\t\t,VizTask.TaskCreated\n\t\t\t,VizTask.TaskNote\n\t\t\t,VizTask.TaskReset\n\t\t\t,VizTask.TaskResponded\n\t\t\t,VizTask.TaskStatusID\n\t\t\t,VizTask.TaskTypeID\n\t\t\t,VizTask.TaskUrgency\n\t\t\t,VizTask.TechEscalated\n\t\t\t,cast(format(taskcreated, 'yyyy-MM-dd HH:00') AS DATETIME)\n\t\t\t,CAST(viztask.TransDate AS DATE)\n\t\t\t,VizTask.UniqueID\n\t\t\t,CASE \n\t\t\t\tWHEN VizTask.UserID IS NULL\n\t\t\t\t\tTHEN 'Unassigned'\n\t\t\t\tELSE 'Assigned'\n\t\t\t\tEND\n\t\t\t,VizTask.UserID /* End: VizSQLTCTask */\n\t\t)\n\t) AS UT_TaskCombined\nINNER JOIN (\n\t/* SqlTableCalculator VizSQLTCLoggedInUser. Generated as: Sql */ SELECT VizUserMultiSite._ID AS _ID\n\t\t,VizUserMultiSite._Version AS _Version\n\t\t,VizUserMultiSite.DefaultValue AS DefaultValue\n\t\t,VizUserMultiSite.LookupName AS LookupName\n\t\t,VizUserMultiSite.UserName AS LookupValue\n\t\t,VizUserMultiSite.ParentKey AS ParentKey\n\t\t,VizUserMultiSite.SiteID AS SiteID\n\t\t,VizUserMultiSite.UserID AS UserID\n\tFROM TechViz_Template.dbo.VE_VW_tv_User AS VizUserMultiSite\n\tWHERE (VizUserMultiSite.UserID = 'irina')\n\tGROUP BY VizUserMultiSite._ID\n\t\t,VizUserMultiSite._Version\n\t\t,VizUserMultiSite.DefaultValue\n\t\t,VizUserMultiSite.LookupName\n\t\t,VizUserMultiSite.UserName\n\t\t,VizUserMultiSite.ParentKey\n\t\t,VizUserMultiSite.SiteID\n\t\t,VizUserMultiSite.UserID /* End: VizSQLTCLoggedInUser */\n\t) AS VizSQLTCLoggedInUser ON UT_TaskCombined.SiteID = VizSQLTCLoggedInUser.SiteID\nLEFT JOIN TechViz_Template.dbo.VE_VW_tv_Shift AS VizShift ON (\n\t\tUT_TaskCombined.Task_Hour >= VizShift.StartTime\n\t\tAND UT_TaskCombined.Task_Hour < VizShift.EndTime\n\t\t)\nLEFT JOIN TechViz_Template.dbo.VE_VW_tv_User AS VizUser ON UT_TaskCombined.UserID = VizUser.UserID\nWHERE (\n\t\t(UT_TaskCombined.TaskCreated >= dateadd(${datePart}, ${number}, CAST(CURRENT_TIMESTAMP as date)))\n\t\tAND (UT_TaskCombined.TaskCreated < CURRENT_TIMESTAMP)\n\t\tAND (UT_TaskCombined.IsTechTask = '0')\n\t\tAND (\n\t\t\tUT_TaskCombined.TaskTypeID IN (\n\t\t\t\t1\n\t\t\t\t,2\n\t\t\t\t,3\n\t\t\t\t,4\n\t\t\t\t,5\n\t\t\t\t,6\n\t\t\t\t,7\n\t\t\t\t,8\n\t\t\t\t,9\n\t\t\t\t,10\n\t\t\t\t,11\n\t\t\t\t,12\n\t\t\t\t,13\n\t\t\t\t,16\n\t\t\t\t,102\n\t\t\t\t,103\n\t\t\t\t)\n\t\t\t)\n\t\tAND (UT_TaskCombined.TaskStatusID = 13)\n\t\t)\nGROUP BY CASE \n\t\tWHEN (cast(ut_taskcombined.TaskCreated AS TIME)) >= '00:00:00'\n\t\t\tAND (cast(ut_taskcombined.TaskCreated AS TIME)) < (\n\t\t\t\tCASE \n\t\t\t\t\tWHEN (VizShift.starttime) = '00:00:00.0000000'\n\t\t\t\t\t\tTHEN (VizShift.endtime)\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tTHEN dateadd(dd, - 1, cast(ut_taskcombined.TaskCreated AS DATE))\n\t\tELSE cast(ut_taskcombined.TaskCreated AS DATE)\n\t\tEND\n\t,UT_TaskCombined.TaskTypeID\n\t,UT_TaskCombined.UserID\n\t,VizUser.UserRoleID`\n\t};\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":4,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Staff Perf (6 Month Backwards)","outputConnectors":[{"name":"Out"}],"width":175,"x":-171.30636501312256,"y":249.09405517578125},{"color":"#0433ff","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"_input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select \n    u.userName as 'Attendant'\n    ,sp.businessdate as 'Date'\n    ,tt.tasktypedescription as 'Task Type'\n    ,sp.completeCount as 'Count'\n    ,sp.escalationcount as 'Escalations'\n    ,sp.avgresponsetime as 'Avg Response Time'\n    ,sp.avgworktime as 'Avg Work Time'\n    ,sp.avgtotaltime as 'Avg Total Time'\n    ,sp.minresponsetime as 'Min Response Time'\n    ,sp.minworktime as 'Min Work Time'\n    ,sp.mintotaltime as 'Min Total Time'\n    ,sp.maxresponsetime as 'Max Response Time'\n    ,sp.maxworktime as 'Max Work Time'\n    ,sp.maxtotaltime as 'Max Total Time'\n    ,sp.totalresponsetime as 'Total Response Time'\n    ,sp.totalworktime as 'Total Work Time'\n    ,sp.totaltotaltime as 'Total Total Time'\nfrom (\n    {{payload.sql}}\n) as sp \nleft join VE_VW_tv_User u \non u.userid = sp.userid\nleft join VE_VW_tv_UserRole ur\non ur.userroleid = sp.userroleid\nleft join VE_VW_tv_TaskType tt\non tt.tasktypeid = sp.tasktypeid\n\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Staff Perf + Lookups","outputConnectors":[{"name":"Out"}],"width":175,"x":85.2194595336914,"y":245.3858642578125},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    name as name,\r\n    value as value\r\nfrom ve_vw_tv_applicationPreference\r\nwhere name = 'Viz_Alert_Staff_Performance_Report_Emails'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":true,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":3600,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":17,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"App Preferences","outputConnectors":[{"name":"Out"}],"width":175,"x":-425.77964210510254,"y":228.84249877929688},{"color":"#9437ff","component":{"metadata":"## Mail Sender\n\n### Connection\n> *Required* field with all connection related to the mail configuration the component will be using (e.g. SMTP server config)\n\n### Asset\n*Optional* field with all assets available. You can use this feature inside the **HTML Expression box**.\n\n\n### From\n> *Required* field Who will be the sender in the email.\n\n### to\n> *Required* field. The recipient(s) of this email. It is possible to comma-separate them so one email to many recipients\n\n> *Example*: <code>foo@email.com, bar@email.com</code>\n\n### Subject\n> *Optional* field. Text to be included as the mail's subject presented to the recipient.\n\n### Text\n> *Optional* field. Text to be added as the mail's body. **PS: HTML has precedence over the Text.**\n\n### HTML\n> *Optional* field. You can include any HTML tag here to have better presentation to the recipient. **HTML has precedence over the text.**\n\n#### Example using whatever values comes with the payload: \n```html\n<div>\n  <h1>{{payload.title}}</h1>  \n  <h2>{{payload.subTitle}}</h2>\n  <p>{{payload.bodyMessage}}</p>\n</div>\n```\n\n#### Example using an Asset-Type CSS:\n```html\n<html>\n  <head>\n     <style>\n      {{asset.style}}\n    </style>\n  </head>\n  <body>\n      <h1>{{payload.title}}</h1>\n  </body>\n</html>\n```\n\n#### Result from above example:\n```html\n<html>\n  <head>\n     <style type=\"text/css\">\n      .h1 {\n        color:red;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Foo Bar Title</h1>\n</body>\n</html>\n```\n\n## Asset access by type:\n1. CSS Type\n    1. <code>asset.style</code> \n2. HTML Type\n    2. <code>asset.html</code> \n\n### Continues on Error\nEven if the email fail for whatever reason(e.g the SMTP server is down) the flow should keep going and the payload will be passed to the next\ncomponent.\n\n### Attachments\n> *Optional field. You can include multiple attachments in an email.\n\n#### Email content can be string or Buffer.\n\n#### Each attachment has these three properties:\n\n  * dataPath\n    The attachment content from the payload. If it is empty, the whole input payload will be used as attachment content.\n\n    Example:\n\n    ```\n    {\n      email: {\n        content: 'This is the content of email',\n      }\n    }\n    ```\n    With the above input payload, we can specify `email.content` as the *dataPath* property, to generate attachment content from the payload.\n\n  * filename\n    Filename to be reported as the name of the attached file\n\n  * encoding\n    If the attachment content is string, then it encodes the content to a Buffer using the specified encoding.\n","name":"E-mail Sender","properties":[{"connectionType":"mail-smtp","defaultValue":"a2736cb8-2cc0-4e2f-8680-67cbebe677df","description":"Connection defined to access to an mail server using SMTP.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Asset to be used in the HTML Expression box. Optional","name":"assetConfiguration","type":"asset"},{"defaultValue":"vizflow@test.com","description":"From","name":"from","type":"text","validators":{"required":true}},{"defaultValue":"{{payload.input.emailTo}}","description":"To","name":"to","type":"text","validators":{"required":true}},{"defaultValue":"Staff Performance Report","description":"Subject","name":"subject","type":"text"},{"defaultValue":"Follow attached the Staff Performance Report.","description":"Text","name":"text","type":"textarea"},{"defaultValue":"","description":"HTML","name":"html","type":"html"},{"attributeModel":{"dataPath":"","encoding":"","filename":""},"defaultValue":[{"dataPath":"csv","encoding":"","filename":"staff-performance-report.csv"}],"description":"Attachments to be sent in the mail","name":"attachments","title":"Attachments","type":"attributes"},{"defaultValue":false,"description":"Pass the payload through even getting an error","name":"continuesOnError","type":"boolean"}],"type":"mail-sender"},"icon":"./assets/vizflow/components/mail-sender.svg","id":9,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Mail + Attached CSV Report","outputConnectors":[{"name":"Out"}],"width":175,"x":826.3365478515625,"y":249.69305419921875},{"color":"#00f900","component":{"metadata":"## CSV Converter\n\n### Delimiter\nThe delimiter is the separator between the columns. The default symbol is **','** and you can change it typing in the text field.\n\n### Quote\n\n> The value between the cells and the column name. Defaults to double quotes ( **\"\"** ).\n\n\n### Unwind Nested\n\n> Generates multiples rows for a single value if one of its properties has nested values. Example below.\n\n### Label Header\n> Probably very often you want your header columns with a better name instead of **car.model** which is what will\nhappen if there are nested values. Instead you provide the value, in this case **car.model**,\nwith a label, such as **Car Model**.\n\nInstead of:\n```\n\"car.make\", \"car.model\", \"price\", \"color\"\n\"Audi\", \"A3\", 40000, \"blue\"\n``` \n\nWith Labelling:\n```csv\n\"Car Make\", \"Car Model\", \"Price\", \"Color\"\n\"Audi\", \"A3\", 40000, \"blue\"\n```\n\n### Show Header\n\n>Determines whether or not CSV file will contain a title column.\n Disable this option when you want to append rows to an existing CSV document.\n\n\n### Include Input\n  It is disabled by default and will output the CSV as **string**.\n\n  When enabled, output will be an **object** with two properties: \n   \n     * csv\n       The CSV text\n     \n     * input\n       The input payload\n\n\n## Payload path\nUse this configuration to specify the data in the payload for converting. If it is empty, the whole input payload will be used for converting.\n\nThe configuration is useful when you are using the `Include input` configuration. You can include extra metadata in the input payload and use the metadata in the downstream components.\n\n## Input and Output\n\n### Payload Example\nFor demonstration purpose let's use cars. We'll use the following payload and default configs for delimiter,\nquote, unwindNested and no labelHeader definition.\n \nPayload:\n```\n  [\n   {\n     \"carModel\": \"BMW\",\n     \"price\": 15000,\n     \"colors\": \"yellow\",\n     \"items\": [\n       {\n         \"name\": \"airbag\",\n         \"color\": \"white\"\n       }, {\n         \"name\": \"dashboard\",\n         \"color\": \"black\"\n       }\n     ]\n   }\n ]\n```\n\nAs you can notice the row is repeated with some values slightly different because unwindNested is true by default\n\nOutput CSV (With Unwind Nested):\n\n```\n\"carModel\",\"price\",\"colors\",\"items.name\",\"items.color\"\n\"BMW\",15000,\"yellow\",\"airbag\",\"white\"\n\"BMW\",15000,\"yellow\",\"dashboard\",\"black\"\n```\n\nIf unwind nested is false any properties that would generate multiple rows are not processed.\n\n\nOutput CSV (Without unwind Nested):\n```\n\"carModel\",\"price\",\"colors\"\n\"BMW\",15000,\"yellow\"\n```\n\n### A more complex payload with nesting.\n\nPayload:\n```\n[\n  {\n    \"carModel\": \"BMW\",\n    \"price\": 15000,\n    \"colors\": [\"yellow\", \"grey\"],\n    \"items\": [\n      {\n        \"name\": \"airbag\",\n        \"color\": \"white\"\n      }, {\n        \"name\": \"dashboard\",\n        \"color\": \"black\"\n      }\n    ]\n  }, \n  {\n    \"carModel\": \"Porsche\",\n    \"price\": 30000,\n    \"colors\": \"black\",\n    \"items\": [\n      {\n        \"name\": \"airbag\",\n        \"items\": [\n          {\n            \"position\": \"left\",\n            \"color\": \"white\"\n          }, {\n            \"position\": \"right\",\n            \"color\": \"gray\"\n          }\n        ]\n      }, {\n        \"name\": \"dashboard\",\n        \"items\": [\n          {\n            \"position\": \"left\",\n            \"color\": \"gray\"\n          }, {\n            \"position\": \"right\",\n            \"color\": \"black\"\n          }\n        ]\n      }\n    ]\n  }\n]\n```\nPay close attention to the header generated for the nested values e.g **items.items.position**. If you want \nto give a better label the only thing required is to add a label definition with the *value* field as\n**'items.items.color'** and the *label* field as you wish e.g. **'Item Color'**. Another thing is the multiples \nrows with different information. The row/columns that do not have a value will be empty but still \nseparated by the delimiter as is the case for *Porsche* that does not has the property color inside the items list.\n\n**Output CSV**: \n```\n\"carModel\",\"price\",\"colors\",\"items.name\",\"items.color\",\"items.items.position\",\"items.items.color\"\n\"BMW\",15000,\"yellow\",\"airbag\",\"white\",,\n\"BMW\",15000,\"yellow\",\"dashboard\",\"black\",,\n\"BMW\",15000,\"grey\",\"airbag\",\"white\",,\n\"BMW\",15000,\"grey\",\"dashboard\",\"black\",,\n\"Porsche\",30000,\"black\",\"airbag\",,\"left\",\"white\"\n\"Porsche\",30000,\"black\",\"airbag\",,\"right\",\"gray\"\n\"Porsche\",30000,\"black\",\"dashboard\",,\"left\",\"gray\"\n\"Porsche\",30000,\"black\",\"dashboard\",,\"right\",\"black\"\n```\n","name":"CSV Converter","properties":[{"defaultValue":"","description":"Delimiter of columns. Defaults to ',' if not specified","name":"delimiter","type":"text"},{"defaultValue":"","description":"Quote around cell values and column names. Defaults to \" if not specified.","name":"quote","type":"text"},{"defaultValue":true,"description":"Creates multiple rows from a single JSON document.","name":"unwindNested","type":"boolean"},{"defaultValue":true,"description":"Add a header row in the CSV.","name":"showHeader","type":"boolean"},{"defaultValue":"report","description":"The path to get the object for converting","name":"payloadPath","type":"text"},{"defaultValue":true,"description":"Include the input payload into the output payload","name":"includeInput","type":"boolean"},{"defaultValue":"input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"attributeModel":{"label":"","value":""},"defaultValue":[],"description":"Is possible to have a better label for the csv header.","name":"labelHeader","title":"labelDefinition","type":"attributes"}],"type":"csv-converter"},"icon":"./assets/vizflow/components/csv-converter.svg","id":8,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"CSV Converter","outputConnectors":[{"name":"Out"}],"width":175,"x":584.6481323242188,"y":267.29669189453125},{"color":"#ff2600","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    const AVG_RESP_TIME = 'Avg Response Time';\n    const AVG_WORK_TIME = 'Avg Work Time';\n    const AVG_TOTAL_TIME = 'Avg Total Time';\n    const MIN_RESP_TIME = 'Min Response Time';\n    const MIN_WORK_TIME = 'Min Work Time';\n    const MIN_TOTAL_TIME = 'Min Total Time';\n    const MAX_RESP_TIME = 'Max Response Time';\n    const MAX_WORK_TIME = 'Max Work Time';\n    const MAX_TOTAL_TIME = 'Max Total Time';\n    const TOTAL_RESP_TIME = 'Total Response Time';\n    const TOTAL_WORK_TIME = 'Total Work Time';\n    const TOTAL_TOTAL_TIME = 'Total Total Time';\n    const ATTENDANT = 'Attendant';\n    const TASK_TYPE = 'Task Type';\n    const DATE_FORMAT = 'YYYY-MM-DD';\n    const ESCAPE_SYMBOL = '-';\n\n    let emailTo = payload._input.appPref.value;\n    let aggrAttendantsList = Object.values(aggrByAttendant(payload.data));\n    let attendantsSorted = _.sortBy(aggrAttendantsList, [ATTENDANT]);\n    let report = attendantsSorted.map(toFormattedDisplay);\n\n    return { report, emailTo };\n\n    // Private Functions\n    function toFormattedDisplay(row) {\n        let dateVal = setsPresentation(row.dateSet);\n        let taskTypeVal = setsPresentation(row.taskTypeSet);\n        row[ATTENDANT] = row[ATTENDANT] || ESCAPE_SYMBOL;\n        row.Escalations = row.Escalations || ESCAPE_SYMBOL;\n        row.Date = dateVal;\n        row[TASK_TYPE] = taskTypeVal;\n        row[AVG_RESP_TIME] = row[AVG_RESP_TIME]/row.rowCounter;\n        row[AVG_WORK_TIME] = row[AVG_WORK_TIME]/row.rowCounter;\n        row[AVG_TOTAL_TIME] = row[AVG_TOTAL_TIME]/row.rowCounter;        \n        delete row.dateSet;\n        delete row.rowCounter;\n        delete row.taskTypeSet;\n        setupDatesPresentation(row);\n        return row;\n    }\n\n    function setsPresentation(set) {\n        if(set.size === 1) {\n            return set.values().next().value;\n        } else {\n            return `[${set.size}]`;\n        }\n    }\n\t\n\tfunction formatDate(entry) {\n        entry.Date = moment(entry.Date).format(DATE_FORMAT);\n        return entry;\n    }\n\n\n    function aggrByAttendant(attendants) {\n        const atts = attendants.reduce((current, next) => {\n            next = formatDate(next);\n            if(current[next[ATTENDANT]]) {\n                let obj = current[next[ATTENDANT]];\n                obj.dateSet.add(next.Date);\n                obj.taskTypeSet.add(next[TASK_TYPE]);\n                obj.Count += next.Count;\n                obj.Escalations += next.Escalations;\n                updateAverages(obj, next);\n                updateMax(obj, next);\n                updateMin(obj, next);\n                updateTotals(obj, next);\n            } else {\n                let dateSet = new Set([next.Date]);\n                let taskTypeSet = new Set([next[TASK_TYPE]]);\n                let rowCounter = 1;\n                current[next[ATTENDANT]] = {\n                    ...next,\n                    dateSet,\n                    taskTypeSet,\n                    rowCounter\n                };\n            }\n            return current;\n        }, {});\n\n        return atts;\n    }\n\n    function updateAverages(obj, next) {\n        obj[AVG_RESP_TIME] += next[AVG_RESP_TIME];\n        obj[AVG_WORK_TIME] += next[AVG_WORK_TIME];\n        obj[AVG_TOTAL_TIME] += next[AVG_TOTAL_TIME];\n        obj.rowCounter ++;\n    }\n\n    function updateMin(obj, next) {\n        obj[MIN_WORK_TIME] = Math.min(obj[MIN_WORK_TIME], next[MIN_WORK_TIME]);\n        obj[MIN_RESP_TIME] = Math.min(obj[MIN_RESP_TIME], next[MIN_RESP_TIME]);\n        obj[MIN_TOTAL_TIME] = Math.min(obj[MIN_TOTAL_TIME], next[MIN_TOTAL_TIME]);\n    }\n\n    function updateMax(obj, next) {\n        obj[MAX_WORK_TIME] = Math.max(obj[MAX_WORK_TIME], next[MAX_WORK_TIME]);\n        obj[MAX_RESP_TIME] = Math.max(obj[MAX_RESP_TIME], next[MAX_RESP_TIME]);\n        obj[MAX_TOTAL_TIME] = Math.max(obj[MAX_TOTAL_TIME], next[MAX_TOTAL_TIME]);\n    }\n\n\n    function updateTotals(obj, next) {\n        obj[TOTAL_WORK_TIME] += next[TOTAL_WORK_TIME];\n        obj[TOTAL_RESP_TIME] += next[TOTAL_RESP_TIME];\n        obj[TOTAL_TOTAL_TIME] += next[TOTAL_TOTAL_TIME];\n    }\n\n    function setupDatesPresentation(row) {\n        row[AVG_RESP_TIME] = dateFormat(row[AVG_RESP_TIME]);\n        row[AVG_WORK_TIME] = dateFormat(row[AVG_WORK_TIME]);\n        row[AVG_TOTAL_TIME] = dateFormat(row[AVG_TOTAL_TIME]);\n\n        row[MIN_RESP_TIME] = dateFormat(row[MIN_RESP_TIME]);\n        row[MIN_WORK_TIME] = dateFormat(row[MIN_WORK_TIME]);\n        row[MIN_TOTAL_TIME] = dateFormat(row[MIN_TOTAL_TIME]);\n\n        row[MAX_RESP_TIME] = dateFormat(row[MAX_RESP_TIME]);\n        row[MAX_WORK_TIME] = dateFormat(row[MAX_WORK_TIME]);\n        row[MAX_TOTAL_TIME] = dateFormat(row[MAX_TOTAL_TIME]);\n\n        row[TOTAL_RESP_TIME] = dateFormat(row[TOTAL_RESP_TIME]);\n        row[TOTAL_WORK_TIME] = dateFormat(row[TOTAL_WORK_TIME]);\n        row[TOTAL_TOTAL_TIME] = dateFormat(row[TOTAL_TOTAL_TIME]);\n    }\n\n    function dateFormat(seconds) {\n        if(!seconds) {\n            return ESCAPE_SYMBOL;\n          }\n          seconds = Math.round(seconds);\n          let minutes = Math.floor(seconds/60);\n          let hours = Math.floor((minutes/60));\n          let days = Math.floor(hours/24);\n          let hoursRest = Math.floor(hours % 24);\n          let minutesRest = Math.floor(minutes % 60);\n          let secondsRest = Math.floor(seconds % 60);\n        \n          return `\\\"${days ? days+'D ':''}${hoursRest ? hoursRest+'H ': ''}${leadingZero(minutesRest)}:${leadingZero(secondsRest)}\\\"`;\n    }\n    \n    function leadingZero(val) {\n        return val < 10 ? '0'+val : val;\n     }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":11,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Group + Aggr Attendants","outputConnectors":[{"name":"Out"}],"width":175,"x":333.5969543457031,"y":251.7337646484375},{"color":"#9ba8b0","component":{"description":"That's a Scheduler Component designed to dispatch cron signals","name":"Scheduler","properties":[{"defaultValue":"0 6 1 * *","description":"Cron expression","name":"cron","type":"crontab"}],"type":"schedule"},"icon":"./assets/vizflow/components/schedule.svg","id":25,"inputConnectors":[],"invalid":false,"name":"1st of the Month","outputConnectors":[{"name":"Out"}],"width":175,"x":-673.5631713867188,"y":260.1479034423828}]},"id":"6bd611f9-f331-4ad4-aac6-5c8970395177","lastUpdated":"2019-01-31T01:12:55.484Z","name":"14-00 Staff Performance Report","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":3},{"dateCreated":"2017-11-26T21:17:26.626Z","definition":{"components":{"db-ms-sql3":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"update ve_tv_workorder\nset \ntaskstatusid = coalesce(nullif('{{payload.wo.newTaskStatusID}}', ''), taskstatusid),\nuserid = coalesce(nullif('{{payload.wo.newUserID}}', ''), userid),\n_version = _version + 1\nwhere _id = nullif('{{payload.wo._ID}}', '')","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Update work order","type":"db-ms-sql"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"wo.update","routingKeyPattern":"wo.update"},"name":"From wo.update","type":"rabbitmq-consumer"}},"links":[{"from":"rabbitmq-consumer1","to":"db-ms-sql3"}]},"description":"<div><!--block-->wo.update ==&gt;</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":1}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_tv_workorder\nset \ntaskstatusid = coalesce(nullif('{{payload.wo.newTaskStatusID}}', ''), taskstatusid),\nuserid = coalesce(nullif('{{payload.wo.newUserID}}', ''), userid),\n_version = _version + 1\nwhere _id = nullif('{{payload.wo._ID}}', '')","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":3,"inputConnectors":[{"name":""}],"name":"Update work order","outputConnectors":[{"name":"Out"}],"width":175,"x":686.2123413085938,"y":353.8776550292969},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"wo.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"wo.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From wo.update","outputConnectors":[{"name":"Out"}],"width":175,"x":461.9916687011719,"y":352.9903564453125}],"viewBox":[728,75,1,742]},"id":"953f3353-5dbc-4dea-b11d-7d460705081a","lastUpdated":"2018-11-28T03:17:22.553Z","name":"05-03 Work Order Update","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":5},{"dateCreated":"2019-07-26T00:44:11.757Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"timestamp","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"select\n    d.deviceID\n    ,tl._ID\n    ,tl._version\n    ,tl.action\n    ,tl.timestamp\n    ,tl.userID\n    ,tl.prevUserID\n    ,tl.taskAssigned\n    ,tl.taskCreated\n    ,tl.taskStatusID\n    ,tl.taskUrgency as taskUrgencyID\n    ,tl.taskTypeID\n    ,tl.eventDesc\n    ,tl.location\n    ,tl.machineID\n    ,tl.amount\n    ,tl.playerID\n    ,p.firstName\n    ,p.lastName\n    ,p.tier\n    ,ts.tierColorHex\n\t,tl.IsTechTask\nfrom ve_vw_tv_device d\ninner join ve_vw_tv_tasklog tl\non (d.userid = tl.userid\nor (\n    d.userid = tl.prevuserid\n    and (tl.userid <> tl.prevuserid or tl.userid is null) \n))   and tl.timestamp > '{{delta}}' and (tl.userid in (select userid from ve_vw_tv_device) or tl.prevuserid in (select userid from ve_vw_tv_device))\nleft join ve_vw_tv_player p\non tl.playerid = p.playerid\nleft join ve_vw_tv_tierscore ts\non p.tier = ts.tier\nwhere tl.timestamp > '{{delta}}'\n and (tl.userid in (select userid from ve_vw_tv_device) or tl.prevuserid in (select userid from ve_vw_tv_device)) ","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select tasks","type":"db-ms-sql"},"rabbitmq-producer22":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.task.{{payload.deviceID}}","ttl":0},"name":"To mobile.task.{{deviceID}}","type":"rabbitmq-producer"},"time12":{"config":{"errorHandling":"","format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"Every 5 seconds","type":"time"},"transform23":{"config":{"errorHandling":"","expression":"(function() {\n    \n    // payload.timestamp = backToUTC(payload.timestamp);\n    // payload.taskAssigned = backToUTC(payload.taskAssigned);\n    // payload.taskCreated = backToUTC(payload.taskCreated);\n    \n    return payload;\n    \n    function backToUTC(date) {\n        let momentDate = moment(date);\n        let offsetMinutes = momentDate.utcOffset();\n        momentDate.utc().add(offsetMinutes,'minutes');\n        return momentDate.toDate();\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Dates Back to UTC","type":"transform"}},"links":[{"from":"time12","to":"db-ms-sql10"},{"from":"db-ms-sql10","to":"transform23"},{"from":"transform23","to":"rabbitmq-producer22"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->Out:<ul><li><!--block-->mobile.task.&lt;deviceID&gt;</li><li><pre><!--block-->{\n    deviceID,\n    action,\n    timestamp,\n    _ID,\n    userID,\n    prevUserID,\n    taskAssigned,\n    taskCreated,\n    taskStatusID,\n    taskTypeID,\n    eventDesc,\n    location,\n    machineID,\n    amount,\n    playerID,\n    firstName,\n    lastName,\n    tier,\n    tierColorHex\n}</pre></li></ul></li></ul><div><!--block-->Notes</div><ul><li><!--block-->every x seconds (1 - 5) select tasks which have recently been updated/created/deleted (inner join on tasklog table - may have to add oldUserID column to table), select devices corresponding to users (see example query below)</li><li><pre><!--block-->select t.* from [dbo].[VE_tv_Task] t\nwhere t._ID in(\n\tselect _ID from\t[dbo].[VE_tv_TaskLog]\n\twhere [Timestamp]  &gt; '2018-07-31 06:50:03.483'\n)</pre></li><li><!--block-->may want to send payload to another generic flow to add the device ids and then split (allows this logic to be reused)</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":23},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":22},"source":{"connectorIndex":0,"nodeID":23}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":12,"inputConnectors":[],"invalid":false,"name":"Every 5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":506.8735046386719,"y":124.25550842285156},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.task.{{payload.deviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":22,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.task.{{deviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1254.587646484375,"y":130.27716064453125},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"timestamp","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    d.deviceID\n    ,tl._ID\n    ,tl._version\n    ,tl.action\n    ,tl.timestamp\n    ,tl.userID\n    ,tl.prevUserID\n    ,tl.taskAssigned\n    ,tl.taskCreated\n    ,tl.taskStatusID\n    ,tl.taskUrgency as taskUrgencyID\n    ,tl.taskTypeID\n    ,tl.eventDesc\n    ,tl.location\n    ,tl.machineID\n    ,tl.amount\n    ,tl.playerID\n    ,p.firstName\n    ,p.lastName\n    ,p.tier\n    ,ts.tierColorHex\n\t,tl.IsTechTask\nfrom ve_vw_tv_device d\ninner join ve_vw_tv_tasklog tl\non (d.userid = tl.userid\nor (\n    d.userid = tl.prevuserid\n    and (tl.userid <> tl.prevuserid or tl.userid is null) \n))   and tl.timestamp > '{{delta}}' and (tl.userid in (select userid from ve_vw_tv_device) or tl.prevuserid in (select userid from ve_vw_tv_device))\nleft join ve_vw_tv_player p\non tl.playerid = p.playerid\nleft join ve_vw_tv_tierscore ts\non p.tier = ts.tier\nwhere tl.timestamp > '{{delta}}'\n and (tl.userid in (select userid from ve_vw_tv_device) or tl.prevuserid in (select userid from ve_vw_tv_device)) ","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":738.879150390625,"y":124.83580017089844},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    \n    // payload.timestamp = backToUTC(payload.timestamp);\n    // payload.taskAssigned = backToUTC(payload.taskAssigned);\n    // payload.taskCreated = backToUTC(payload.taskCreated);\n    \n    return payload;\n    \n    function backToUTC(date) {\n        let momentDate = moment(date);\n        let offsetMinutes = momentDate.utcOffset();\n        momentDate.utc().add(offsetMinutes,'minutes');\n        return momentDate.toDate();\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":23,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Dates Back to UTC","outputConnectors":[{"name":"Out"}],"width":175,"x":992.2305908203125,"y":126.545654296875}]},"id":"d4a252ca-55e3-4036-be03-590f24a90fd8","lastUpdated":"2019-08-28T05:53:28.721Z","name":"M-04 Task Info","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":8},{"dateCreated":"2017-11-26T21:17:26.703Z","definition":{"components":{"db-ms-sql11":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_User_Break_15',\n    'Viz_Alert_User_Lunch_30',\n    'Viz_Alert_User_Lunch_45',\n    'Viz_Alert_Compliance_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"db-ms-sql13":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"update\n    ve_tv_user\nset usercomplianceid = usercomplianceid + 1\nwhere userid = '{{payload.user.userID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Update user","type":"db-ms-sql"},"db-ms-sql7":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n\tu.userid as userID,\r\n\tu.userstatusid as userStatusID,\r\n\tu.usercomplianceid as userComplianceID,\r\n\tu.username as userName,\r\n\tu.userroleid as userRoleID,\r\n\tusl.statusElapsedTime as statusElapsedTime,\r\n\tur.isAttendant,\r\n\tur.isTechnician,\r\n\tu.siteid as siteID\r\nfrom ve_vw_tv_user u\r\ninner join (\r\n\tselect\r\n\t\tuserid,\r\n\t\tdatediff(ss, max(timestamp), current_timestamp) as statusElapsedTime\r\n\tfrom ve_vw_tv_userstatuslog\r\n\tgroup by userid\r\n\t) usl\r\non u.userid = usl.userID\r\nleft join ve_vw_tv_userrole ur\r\non u.userroleid = ur.userroleid\r\nwhere userstatusid in (45, 50, 55)","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select user","type":"db-ms-sql"},"filter10":{"config":{"expression":"(function() {\n    function limitExceeded(time, complianceID, alert) {\n        if (complianceID === 0) {\n            return time > alert.value;\n        }\n        if (complianceID === 1) {\n            return time > alert.escalateSupervisor;\n        }\n        if (complianceID === 2) {\n            return time > alert.escalateManager;\n        }\n        return false;\n    }\n    var userStatusID = payload.user.userStatusID;\n    var statusElapsedTime = payload.user.statusElapsedTime;\n    var userComplianceID = payload.user.userComplianceID;\n    var appPrefs = payload.appPrefs;\n\n    if (userStatusID === 45) {\n    \treturn limitExceeded(statusElapsedTime, userComplianceID,\n    \t    appPrefs.alertUserBreak15);\n    }\n    if (userStatusID === 50) {\n    \treturn limitExceeded(statusElapsedTime, userComplianceID,\n    \t    appPrefs.alertUserLunch30);\n    }\n    if (userStatusID === 55) {\n    \treturn limitExceeded(statusElapsedTime, userComplianceID,\n    \t    appPrefs.alertUserLunch45);\n    }\n    return false;\n})();","variables":""},"name":"Filter by elapsed time","type":"filter"},"rabbitmq-producer5":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.handle","ttl":0},"name":"To email.handle","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 seconds","type":"time"},"transform12":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform14":{"config":{"expression":"(function() {\n    payload.flag = \"COMPLIANCE\";\n    return payload;\n})();","variables":""},"name":"Set flag","type":"transform"},"transform3":{"config":{"expression":"function() {\r\n    function tidy(obj) {\r\n    \tvar result = {};\r\n    \tfor (var key in obj) {\r\n    \t\tif (key.substring(0, 2) !== \"__\") {\r\n    \t\t\tresult[key] = obj[key];\r\n    \t\t}\r\n    \t}\r\n    \treturn result;\r\n    }\r\n\r\n    var newPayload = payload.__input;\r\n    newPayload.user = tidy(payload);\r\n    newPayload.siteID = newPayload.user.siteID;\r\n    return newPayload;\r\n}","variables":""},"name":"Tidy 2","type":"transform"}},"links":[{"from":"db-ms-sql7","to":"transform3"},{"from":"db-ms-sql11","to":"transform12"},{"from":"transform12","to":"db-ms-sql7"},{"from":"transform3","to":"filter10"},{"from":"filter10","to":"db-ms-sql13"},{"from":"db-ms-sql13","to":"transform14"},{"from":"transform14","to":"rabbitmq-producer5"},{"from":"time1","to":"db-ms-sql11"}]},"description":"<div><!--block-->==&gt; email.handle</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":12},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":14},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":14}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":1}}],"name":"8 I [Compliance] Get Users [Out:UserCompliance]","nodes":[{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-1355.1593704223633,"y":125.31404304504395},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.handle","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":5,"inputConnectors":[{"name":""}],"name":"To email.handle","outputConnectors":[{"name":"Out"}],"width":175,"x":400.8898468017578,"y":123.67267036437988},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\r\n    function tidy(obj) {\r\n    \tvar result = {};\r\n    \tfor (var key in obj) {\r\n    \t\tif (key.substring(0, 2) !== \"__\") {\r\n    \t\t\tresult[key] = obj[key];\r\n    \t\t}\r\n    \t}\r\n    \treturn result;\r\n    }\r\n\r\n    var newPayload = payload.__input;\r\n    newPayload.user = tidy(payload);\r\n    newPayload.siteID = newPayload.user.siteID;\r\n    return newPayload;\r\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":3,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-472.5316119194031,"y":122.11484146118164},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_User_Break_15',\n    'Viz_Alert_User_Lunch_30',\n    'Viz_Alert_User_Lunch_45',\n    'Viz_Alert_Compliance_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":11,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-1141.1954040527344,"y":122.00692749023438},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n\tu.userid as userID,\r\n\tu.userstatusid as userStatusID,\r\n\tu.usercomplianceid as userComplianceID,\r\n\tu.username as userName,\r\n\tu.userroleid as userRoleID,\r\n\tusl.statusElapsedTime as statusElapsedTime,\r\n\tur.isAttendant,\r\n\tur.isTechnician,\r\n\tu.siteid as siteID\r\nfrom ve_vw_tv_user u\r\ninner join (\r\n\tselect\r\n\t\tuserid,\r\n\t\tdatediff(ss, max(timestamp), current_timestamp) as statusElapsedTime\r\n\tfrom ve_vw_tv_userstatuslog\r\n\tgroup by userid\r\n\t) usl\r\non u.userid = usl.userID\r\nleft join ve_vw_tv_userrole ur\r\non u.userroleid = ur.userroleid\r\nwhere userstatusid in (45, 50, 55)","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":7,"inputConnectors":[{"name":""}],"name":"Select user","outputConnectors":[{"name":"Out"}],"width":175,"x":-691.999077796936,"y":121.98672676086426},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":12,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-918.2721099853516,"y":125.92436981201172},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    function limitExceeded(time, complianceID, alert) {\n        if (complianceID === 0) {\n            return time > alert.value;\n        }\n        if (complianceID === 1) {\n            return time > alert.escalateSupervisor;\n        }\n        if (complianceID === 2) {\n            return time > alert.escalateManager;\n        }\n        return false;\n    }\n    var userStatusID = payload.user.userStatusID;\n    var statusElapsedTime = payload.user.statusElapsedTime;\n    var userComplianceID = payload.user.userComplianceID;\n    var appPrefs = payload.appPrefs;\n\n    if (userStatusID === 45) {\n    \treturn limitExceeded(statusElapsedTime, userComplianceID,\n    \t    appPrefs.alertUserBreak15);\n    }\n    if (userStatusID === 50) {\n    \treturn limitExceeded(statusElapsedTime, userComplianceID,\n    \t    appPrefs.alertUserLunch30);\n    }\n    if (userStatusID === 55) {\n    \treturn limitExceeded(statusElapsedTime, userComplianceID,\n    \t    appPrefs.alertUserLunch45);\n    }\n    return false;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":10,"inputConnectors":[{"name":""}],"name":"Filter by elapsed time","outputConnectors":[{"name":"Out"}],"width":175,"x":-260.8058166503906,"y":123.42302322387695},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update\n    ve_tv_user\nset usercomplianceid = usercomplianceid + 1\nwhere userid = '{{payload.user.userID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":13,"inputConnectors":[{"name":""}],"name":"Update user","outputConnectors":[{"name":"Out"}],"width":175,"x":-36.707725524902344,"y":122.96814727783203},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    payload.flag = \"COMPLIANCE\";\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":14,"inputConnectors":[{"name":""}],"name":"Set flag","outputConnectors":[{"name":"Out"}],"width":175,"x":189.08519744873047,"y":123.64500427246094}],"viewBox":[92,-240,1,1257]},"id":"798468ef-9eb0-45ac-95df-6d641768e791","lastUpdated":"2018-11-28T02:46:06.517Z","name":"09-02 User Compliance","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":10},{"dateCreated":"2017-12-10T21:17:52.547Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Reassign_On_Jackpots_Status_Enabled',\n    'Viz_Reassign_On_Inactive_Status_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n\tt._ID\r\n\t,t.isTechTask\r\n\t,t.userID\r\nfrom ve_vw_tv_task t\r\ninner join ve_vw_tv_user u\r\non t.userid = u.userid\r\nleft join ve_tv_userstatus us with (nolock)\r\non u.userstatusid = us.userstatusid\r\nwhere t.taskstatusid not in (12, 13)\r\nand (\r\n    (us.isuseractive = 0 and '{{payload.appPrefs.reassignOnInactiveStatusEnabled.value}}' = 1 and t.taskstatusid in (0, 1, 21, 31))\r\n    or (u.userstatusid = 35 and tasktypeid <> 2 and '{{payload.appPrefs.reassignOnJackpotsStatusEnabled.value}}' = 1 and t.taskstatusid in (0, 1, 2, 21, 22, 31, 32))\r\n    )\r\n\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select tasks","type":"db-ms-sql"},"rabbitmq-producer6":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":1500},"name":"To task.update","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":2000},"name":"2 seconds","type":"time"},"transform3":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform5":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"},"transform7":{"config":{"expression":"(function() {\n    payload.flag = \"REASSIGN\";\n    return payload;\n})();","variables":""},"name":"Set flag","type":"transform"}},"links":[{"from":"time1","to":"db-ms-sql2"},{"from":"db-ms-sql2","to":"transform3"},{"from":"transform3","to":"db-ms-sql4"},{"from":"db-ms-sql4","to":"transform5"},{"from":"transform5","to":"transform7"},{"from":"transform7","to":"rabbitmq-producer6"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":7}}],"nodes":[{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":2000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"2 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":125,"y":234},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Reassign_On_Jackpots_Status_Enabled',\n    'Viz_Reassign_On_Inactive_Status_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":"In"}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":344,"y":236},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n\tt._ID\r\n\t,t.isTechTask\r\n\t,t.userID\r\nfrom ve_vw_tv_task t\r\ninner join ve_vw_tv_user u\r\non t.userid = u.userid\r\nleft join ve_tv_userstatus us with (nolock)\r\non u.userstatusid = us.userstatusid\r\nwhere t.taskstatusid not in (12, 13)\r\nand (\r\n    (us.isuseractive = 0 and '{{payload.appPrefs.reassignOnInactiveStatusEnabled.value}}' = 1 and t.taskstatusid in (0, 1, 21, 31))\r\n    or (u.userstatusid = 35 and tasktypeid <> 2 and '{{payload.appPrefs.reassignOnJackpotsStatusEnabled.value}}' = 1 and t.taskstatusid in (0, 1, 2, 21, 22, 31, 32))\r\n    )\r\n\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":"In"}],"name":"Select tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":759.6010131835938,"y":234.59182739257812},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":3,"inputConnectors":[{"name":"In"}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":547.7356567382812,"y":236.47128295898438},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.task = tidy(payload);\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":5,"inputConnectors":[{"name":"In"}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":977.3004150390625,"y":235.73562622070312},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":1500,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":6,"inputConnectors":[{"name":"In"}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":1398.3004150390625,"y":238.73562622070312},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    payload.flag = \"REASSIGN\";\n    return payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":7,"inputConnectors":[{"name":"In"}],"name":"Set flag","outputConnectors":[{"name":"Out"}],"width":175,"x":1195.3004150390625,"y":234.73562622070312}]},"id":"9d83ef71-ba7a-4059-af10-96290978f66d","lastUpdated":"2018-11-28T02:45:47.165Z","name":"07-02 Reassign Flagging","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":47},{"dateCreated":"2017-11-26T21:17:26.561Z","definition":{"components":{"branch2":{"config":{"expression":"(function() {\r\n    switch (payload.flag) {\r\n        case \"TASK\":\r\n            return [payload, null, null, null];\r\n        case \"TECH_ESC\":\r\n            return [null, payload, null, null];\r\n        case \"WORK_ORDER\":\r\n            return [null, null, payload, null];\r\n        case \"WORK_ORDER_ESC\":\r\n            return [null, null, payload, null];\r\n        case \"JP_VERIFIER\":\r\n            return [null, null, null, payload];\r\n    }\r\n    return [null, null, null, null];\r\n})();","globalFunctionConfiguration":[],"outputs":4,"variables":""},"name":"Flag?","type":"branch"},"db-ms-sql11":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    _ID\nfrom ve_vw_tv_workorder\nwhere taskstatusid not in (12, 13)\nand machineid = '{{payload.event.mnum}}'\nand siteid = '{{payload.siteID}}'\nand eventcode1 = '{{payload.event.eventCode1}}'\nand coalesce(eventcode2, '') = '{{payload.event.eventCode2}}'\n\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select open work orders","type":"db-ms-sql"},"db-ms-sql18":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"insert into ve_tv_task (\r\n\tistechtask\r\n    ,eventcode1\r\n    ,eventcode2\r\n    ,uniqueid\r\n    ,eventid\r\n    ,tasktypeid\r\n\t,machineid\r\n\t,playerid\r\n\t,staffid\r\n\t,amount\r\n\t,transdate\r\n\t,eventdesc\r\n\t,location\r\n\t,_id\r\n\t,_version\r\n\t,taskstatusid\r\n\t,siteid\r\n\t,lastmodifiedbymodule\r\n    ,modificationdescription\r\n\t)\r\nvalues (\r\n\tcase when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n    ,nullif('{{payload.event.eventCode1}}', '')\r\n    ,nullif('{{payload.event.eventCode2}}', '')\r\n    ,nullif('{{payload.event.uniqueID}}', '')\r\n    ,null\r\n    ,nullif('{{payload.event.taskTypeID}}', '')\r\n\t,nullif('{{payload.event.mnum}}', '')\r\n\t,nullif('{{payload.event.playerID}}', '')\r\n\t,nullif('{{payload.event.staffID}}', '')\r\n\t,nullif('{{payload.event.amount}}', '')\r\n\t,nullif('{{payload.event.date}}', '')\r\n\t,nullif('{{payload.event.description}}', '')\r\n\t,nullif('{{payload.event.location}}', '')\r\n\t,left(newid(), 35)\r\n\t,0\r\n\t,case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 30 else 0 end\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t,'Flow: 06-01 Task Creation: Insert Task'\r\n    ,'Task created'\r\n\t)\r\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"","split":false},"name":"Insert task","type":"db-ms-sql"},"db-ms-sql23":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"insert into ve_tv_workorder (\r\n    location\r\n    ,tasktypeid\r\n    ,machineid\r\n    ,eventcode1\r\n    ,eventcode2\r\n    ,eventdesc\r\n    ,note\r\n    ,duedate\r\n    ,createdbyuserid\r\n    ,_id\r\n    ,_version\r\n    ,taskstatusid\r\n    ,createdat\r\n    ,taskurgencyid\r\n    ,siteid\r\n\t)\r\nvalues (\r\n\tnullif('{{payload.event.location}}', '')\r\n\t,nullif('{{payload.event.taskTypeID}}', '')\r\n\t,nullif('{{payload.event.mnum}}', '')\r\n\t,nullif('{{payload.event.eventCode1}}', '')\r\n\t,nullif('{{payload.event.eventCode2}}', '')\r\n\t,nullif('{{payload.event.description}}', '')\r\n\t,nullif('{{payload.event.note}}','')\r\n\t,nullif('{{payload.event.dueDate}}', '')\r\n\t,nullif('{{payload.event.createdByUserID}}', '')\r\n\t,newid()\r\n\t,0\r\n\t,40\r\n\t,current_timestamp\r\n\t,0\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t)\r\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"","split":false},"name":"Insert work order","type":"db-ms-sql"},"db-ms-sql24":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"insert into ve_tv_task (\r\n\tistechtask\r\n\t,location\r\n\t,tasktypeid\r\n\t,parentuserid\r\n\t,tasknote\r\n\t,eventcode1\r\n\t,eventcode2\r\n\t,eventdesc\r\n\t,amount\r\n\t,machineid\r\n\t,parentid\r\n\t,playerid\r\n\t,_id\r\n\t,_version\r\n\t,taskstatusid\r\n\t,siteid\r\n\t,lastmodifiedbymodule\r\n    ,modificationdescription\r\n\t)\r\nvalues (\r\n    case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 0 else 1 end\r\n\t,nullif('{{payload.task.location}}', '')\r\n\t,nullif('{{payload.task.taskTypeID}}', '')\r\n\t,nullif('{{payload.task.userID}}', '')\r\n\t,nullif('{{payload.task.taskNote}}', '')\r\n\t,nullif('{{payload.task.eventCode1}}', '')\r\n\t,nullif('{{payload.task.eventCode2}}', '')\r\n\t,nullif('{{payload.task.eventDesc}}', '')\r\n\t,nullif('{{payload.task.amount}}', '')\r\n\t,nullif('{{payload.task.machineID}}', '')\r\n\t,nullif('{{payload.task._ID}}', '')\r\n\t,nullif('{{payload.task.playerID}}', '')\r\n\t,left(newid(), 35)\r\n\t,0\r\n\t,case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 0 else 30 end\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t,'Flow: 06-01 Task Creation: Insert tech task'\r\n    ,'Tech task created'\r\n\t)\r\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"","split":false},"name":"Insert tech task","type":"db-ms-sql"},"db-ms-sql3":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select \r\n    _ID\r\nfrom ve_vw_tv_task\r\nwhere (\r\n    istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n    or datediff(ss, taskcreated, current_timestamp) < '{{payload.appPrefs.ignoreOpenTechTasks.value}}'\r\n    )\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select open tasks","type":"db-ms-sql"},"db-ms-sql47":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"insert into ve_tv_task (\r\n    istechtask\r\n\t,location\r\n\t,tasktypeid\r\n\t,parentuserid\r\n\t,eventcode1\r\n\t,eventcode2\r\n\t,eventdesc\r\n\t,amount\r\n\t,machineid\r\n\t,parentid\r\n\t,playerid\r\n\t,tasknote\r\n\t,_id\r\n\t,_version\r\n\t,taskstatusid\r\n\t,siteid\r\n\t,lastmodifiedbymodule\r\n    ,modificationdescription\r\n\t)\r\nvalues (\r\n    case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n\t,nullif('{{payload.task.location}}', '')\r\n\t,102\r\n\t,nullif('{{payload.task.userID}}', '')\r\n\t,nullif('{{payload.task.eventCode1}}', '')\r\n\t,nullif('{{payload.task.eventCode2}}', '')\r\n\t,nullif('Jackpot Verifier', '')\r\n\t,nullif('{{payload.task.amount}}', '')\r\n\t,nullif('{{payload.task.machineID}}', '')\r\n\t,nullif('{{payload.task._ID}}', '')\r\n\t,nullif('{{payload.task.playerID}}', '')\r\n\t,nullif('{{payload.task.taskNote}}', '')\r\n\t,left(newid(), 35)\r\n\t,0\r\n\t,case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 30 else 0 end\r\n\t,nullif('{{payload.siteID}}', '')\r\n    ,'Flow: 06-01 Task Creation: Insert jackpot verification'\r\n    ,'Jackpot verifiction task created'\r\n\t)\r\n","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"","split":false},"name":"Insert jackpot verification","type":"db-ms-sql"},"db-ms-sql50":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    _id\nfrom ve_vw_tv_task\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\nand taskstatusid not in (12, 13)\nand machineid = '{{payload.task.machineID}}'\nand siteid = '{{payload.siteID}}'\nand tasktypeid = 102","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select open verifications","type":"db-ms-sql"},"db-ms-sql9":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    _ID\nfrom ve_vw_tv_task\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 0 else 1 end\nand taskstatusid not in (12, 13)\nand machineid = '{{payload.task.machineID}}'\nand siteid = '{{payload.siteID}}'","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select open tech tasks","type":"db-ms-sql"},"filter34":{"config":{"expression":"(function() {\n\treturn payload.count === 0;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter if work order","type":"filter"},"filter35":{"config":{"expression":"(function() {\n\treturn payload.count === 0;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter if tech task","type":"filter"},"filter36":{"config":{"expression":"(function() {\n\treturn payload.count === 0 || payload.__input.event.actionTypeID === 7;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter if task","type":"filter"},"filter49":{"config":{"expression":"(function() {\n\treturn payload.count === 0 && payload.__input.task.taskTypeID == 2;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter out if verification or not jackpot","type":"filter"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"task.create","routingKeyPattern":"task.create"},"name":"From task.create","type":"rabbitmq-consumer"},"transform38":{"config":{"expression":"(function() {\n    return payload.__input;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Tidy 1","type":"transform"},"transform40":{"config":{"expression":"(function() {\n    var newPayload = payload.__input;\n\tif (newPayload.event.note) {\n\t    newPayload.event.note = newPayload.event.note.replace(/'/g, \"''\");\n\t}\n\treturn newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Format task note 2","type":"transform"},"transform41":{"config":{"expression":"(function() {\n    var newPayload = payload.__input;\n\tif (newPayload.task.taskNote) {\n\t    newPayload.task.taskNote = newPayload.task.taskNote.replace(/'/g, \"''\");\n\t}\n\treturn newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Format task note 1","type":"transform"},"transform48":{"config":{"expression":"(function() {\n    var newPayload = payload.__input;\n\tif (newPayload.task.taskNote) {\n\t    newPayload.task.taskNote = newPayload.task.taskNote.replace(/'/g, \"''\");\n\t}\n\treturn newPayload;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Tidy 2","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"branch2"},{"from":"branch2:0","to":"db-ms-sql3"},{"from":"branch2:1","to":"db-ms-sql9"},{"from":"branch2:2","to":"db-ms-sql11"},{"from":"db-ms-sql11","to":"filter34"},{"from":"db-ms-sql3","to":"filter36"},{"from":"filter36","to":"transform38"},{"from":"transform38","to":"db-ms-sql18"},{"from":"filter34","to":"transform40"},{"from":"transform40","to":"db-ms-sql23"},{"from":"filter35","to":"transform41"},{"from":"transform41","to":"db-ms-sql24"},{"from":"db-ms-sql9","to":"filter35"},{"from":"db-ms-sql50","to":"filter49"},{"from":"filter49","to":"transform48"},{"from":"transform48","to":"db-ms-sql47"},{"from":"branch2:3","to":"db-ms-sql50"}]},"description":"<div><!--block-->task.create ==&gt;</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":1,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":2,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":34},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":36},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":38},"source":{"connectorIndex":0,"nodeID":36}},{"dest":{"connectorIndex":0,"nodeID":18},"source":{"connectorIndex":0,"nodeID":38}},{"dest":{"connectorIndex":0,"nodeID":40},"source":{"connectorIndex":0,"nodeID":34}},{"dest":{"connectorIndex":0,"nodeID":23},"source":{"connectorIndex":0,"nodeID":40}},{"dest":{"connectorIndex":0,"nodeID":41},"source":{"connectorIndex":0,"nodeID":35}},{"dest":{"connectorIndex":0,"nodeID":24},"source":{"connectorIndex":0,"nodeID":41}},{"dest":{"connectorIndex":0,"nodeID":35},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":49},"source":{"connectorIndex":0,"nodeID":50}},{"dest":{"connectorIndex":0,"nodeID":48},"source":{"connectorIndex":0,"nodeID":49}},{"dest":{"connectorIndex":0,"nodeID":47},"source":{"connectorIndex":0,"nodeID":48}},{"dest":{"connectorIndex":0,"nodeID":50},"source":{"connectorIndex":3,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"task.create","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"task.create","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From task.create","outputConnectors":[{"name":"Out"}],"width":175,"x":-762.7764492034912,"y":175.19696044921875},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"insert into ve_tv_workorder (\r\n    location\r\n    ,tasktypeid\r\n    ,machineid\r\n    ,eventcode1\r\n    ,eventcode2\r\n    ,eventdesc\r\n    ,note\r\n    ,duedate\r\n    ,createdbyuserid\r\n    ,_id\r\n    ,_version\r\n    ,taskstatusid\r\n    ,createdat\r\n    ,taskurgencyid\r\n    ,siteid\r\n\t)\r\nvalues (\r\n\tnullif('{{payload.event.location}}', '')\r\n\t,nullif('{{payload.event.taskTypeID}}', '')\r\n\t,nullif('{{payload.event.mnum}}', '')\r\n\t,nullif('{{payload.event.eventCode1}}', '')\r\n\t,nullif('{{payload.event.eventCode2}}', '')\r\n\t,nullif('{{payload.event.description}}', '')\r\n\t,nullif('{{payload.event.note}}','')\r\n\t,nullif('{{payload.event.dueDate}}', '')\r\n\t,nullif('{{payload.event.createdByUserID}}', '')\r\n\t,newid()\r\n\t,0\r\n\t,40\r\n\t,current_timestamp\r\n\t,0\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t)\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":23,"inputConnectors":[{"name":""}],"name":"Insert work order","outputConnectors":[{"name":"Out"}],"width":175,"x":353.5550547838211,"y":271.0053939819336},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"insert into ve_tv_task (\r\n\tistechtask\r\n\t,location\r\n\t,tasktypeid\r\n\t,parentuserid\r\n\t,tasknote\r\n\t,eventcode1\r\n\t,eventcode2\r\n\t,eventdesc\r\n\t,amount\r\n\t,machineid\r\n\t,parentid\r\n\t,playerid\r\n\t,_id\r\n\t,_version\r\n\t,taskstatusid\r\n\t,siteid\r\n\t,lastmodifiedbymodule\r\n    ,modificationdescription\r\n\t)\r\nvalues (\r\n    case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 0 else 1 end\r\n\t,nullif('{{payload.task.location}}', '')\r\n\t,nullif('{{payload.task.taskTypeID}}', '')\r\n\t,nullif('{{payload.task.userID}}', '')\r\n\t,nullif('{{payload.task.taskNote}}', '')\r\n\t,nullif('{{payload.task.eventCode1}}', '')\r\n\t,nullif('{{payload.task.eventCode2}}', '')\r\n\t,nullif('{{payload.task.eventDesc}}', '')\r\n\t,nullif('{{payload.task.amount}}', '')\r\n\t,nullif('{{payload.task.machineID}}', '')\r\n\t,nullif('{{payload.task._ID}}', '')\r\n\t,nullif('{{payload.task.playerID}}', '')\r\n\t,left(newid(), 35)\r\n\t,0\r\n\t,case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 0 else 30 end\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t,'Flow: 06-01 Task Creation: Insert tech task'\r\n    ,'Tech task created'\r\n\t)\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":24,"inputConnectors":[{"name":""}],"name":"Insert tech task","outputConnectors":[{"name":"Out"}],"width":175,"x":358.3719720840454,"y":164.35761260986328},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    var newPayload = payload.__input;\n\tif (newPayload.task.taskNote) {\n\t    newPayload.task.taskNote = newPayload.task.taskNote.replace(/'/g, \"''\");\n\t}\n\treturn newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":41,"inputConnectors":[{"name":""}],"name":"Format task note 1","outputConnectors":[{"name":"Out"}],"width":175,"x":144.97058749198914,"y":162.9350814819336},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    var newPayload = payload.__input;\n\tif (newPayload.event.note) {\n\t    newPayload.event.note = newPayload.event.note.replace(/'/g, \"''\");\n\t}\n\treturn newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":40,"inputConnectors":[{"name":""}],"name":"Format task note 2","outputConnectors":[{"name":"Out"}],"width":175,"x":143.82975459098816,"y":270.9068946838379},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    _ID\nfrom ve_vw_tv_task\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 0 else 1 end\nand taskstatusid not in (12, 13)\nand machineid = '{{payload.task.machineID}}'\nand siteid = '{{payload.siteID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":9,"inputConnectors":[{"name":""}],"name":"Select open tech tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-316.22718620300293,"y":154.56311798095703},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    _ID\nfrom ve_vw_tv_workorder\nwhere taskstatusid not in (12, 13)\nand machineid = '{{payload.event.mnum}}'\nand siteid = '{{payload.siteID}}'\nand eventcode1 = '{{payload.event.eventCode1}}'\nand coalesce(eventcode2, '') = '{{payload.event.eventCode2}}'\n\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":11,"inputConnectors":[{"name":""}],"name":"Select open work orders","outputConnectors":[{"name":"Out"}],"width":175,"x":-309.89820861816406,"y":270.8307418823242},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select \r\n    _ID\r\nfrom ve_vw_tv_task\r\nwhere (\r\n    istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n    or datediff(ss, taskcreated, current_timestamp) < '{{payload.appPrefs.ignoreOpenTechTasks.value}}'\r\n    )\r\nand taskstatusid not in (12, 13)\r\nand machineid = '{{payload.event.mnum}}'\r\nand siteid = '{{payload.siteID}}'\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":3,"inputConnectors":[{"name":""}],"name":"Select open tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-308.980619430542,"y":43.704002380371094},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    return payload.__input;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":38,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":141.47761344909668,"y":45.27312469482422},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn payload.count === 0 || payload.__input.event.actionTypeID === 7;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":36,"inputConnectors":[{"name":""}],"name":"Filter if task","outputConnectors":[{"name":"Out"}],"width":175,"x":-105.38721466064453,"y":44.37745666503906},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn payload.count === 0;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":35,"inputConnectors":[{"name":""}],"name":"Filter if tech task","outputConnectors":[{"name":"Out"}],"width":175,"x":-101.89425659179688,"y":160.828125},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn payload.count === 0;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":34,"inputConnectors":[{"name":""}],"name":"Filter if work order","outputConnectors":[{"name":"Out"}],"width":175,"x":-91.82383728027344,"y":272.7999801635742},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"insert into ve_tv_task (\r\n    istechtask\r\n\t,location\r\n\t,tasktypeid\r\n\t,parentuserid\r\n\t,eventcode1\r\n\t,eventcode2\r\n\t,eventdesc\r\n\t,amount\r\n\t,machineid\r\n\t,parentid\r\n\t,playerid\r\n\t,tasknote\r\n\t,_id\r\n\t,_version\r\n\t,taskstatusid\r\n\t,siteid\r\n\t,lastmodifiedbymodule\r\n    ,modificationdescription\r\n\t)\r\nvalues (\r\n    case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n\t,nullif('{{payload.task.location}}', '')\r\n\t,102\r\n\t,nullif('{{payload.task.userID}}', '')\r\n\t,nullif('{{payload.task.eventCode1}}', '')\r\n\t,nullif('{{payload.task.eventCode2}}', '')\r\n\t,nullif('Jackpot Verifier', '')\r\n\t,nullif('{{payload.task.amount}}', '')\r\n\t,nullif('{{payload.task.machineID}}', '')\r\n\t,nullif('{{payload.task._ID}}', '')\r\n\t,nullif('{{payload.task.playerID}}', '')\r\n\t,nullif('{{payload.task.taskNote}}', '')\r\n\t,left(newid(), 35)\r\n\t,0\r\n\t,case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 30 else 0 end\r\n\t,nullif('{{payload.siteID}}', '')\r\n    ,'Flow: 06-01 Task Creation: Insert jackpot verification'\r\n    ,'Jackpot verifiction task created'\r\n\t)\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":47,"inputConnectors":[{"name":""}],"name":"Insert jackpot verification","outputConnectors":[{"name":"Out"}],"width":175,"x":353.1730422973633,"y":385.10645294189453},{"color":"#ff0000","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    var newPayload = payload.__input;\n\tif (newPayload.task.taskNote) {\n\t    newPayload.task.taskNote = newPayload.task.taskNote.replace(/'/g, \"''\");\n\t}\n\treturn newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":48,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":145.02753448486328,"y":385.22953033447266},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n``` \n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn payload.count === 0 && payload.__input.task.taskTypeID == 2;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":49,"inputConnectors":[{"name":""}],"name":"Filter out if verification or not jackpot","outputConnectors":[{"name":"Out"}],"width":175,"x":-98.59420967102051,"y":383.9346389770508},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    _id\nfrom ve_vw_tv_task\nwhere istechtask = case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\nand taskstatusid not in (12, 13)\nand machineid = '{{payload.task.machineID}}'\nand siteid = '{{payload.siteID}}'\nand tasktypeid = 102","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":50,"inputConnectors":[{"name":""}],"name":"Select open verifications","outputConnectors":[{"name":"Out"}],"width":175,"x":-307.1488723754883,"y":387.6914596557617},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"insert into ve_tv_task (\r\n\tistechtask\r\n    ,eventcode1\r\n    ,eventcode2\r\n    ,uniqueid\r\n    ,eventid\r\n    ,tasktypeid\r\n\t,machineid\r\n\t,playerid\r\n\t,staffid\r\n\t,amount\r\n\t,transdate\r\n\t,eventdesc\r\n\t,location\r\n\t,_id\r\n\t,_version\r\n\t,taskstatusid\r\n\t,siteid\r\n\t,lastmodifiedbymodule\r\n    ,modificationdescription\r\n\t)\r\nvalues (\r\n\tcase when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 1 else 0 end\r\n    ,nullif('{{payload.event.eventCode1}}', '')\r\n    ,nullif('{{payload.event.eventCode2}}', '')\r\n    ,nullif('{{payload.event.uniqueID}}', '')\r\n    ,null\r\n    ,nullif('{{payload.event.taskTypeID}}', '')\r\n\t,nullif('{{payload.event.mnum}}', '')\r\n\t,nullif('{{payload.event.playerID}}', '')\r\n\t,nullif('{{payload.event.staffID}}', '')\r\n\t,nullif('{{payload.event.amount}}', '')\r\n\t,nullif('{{payload.event.date}}', '')\r\n\t,nullif('{{payload.event.description}}', '')\r\n\t,nullif('{{payload.event.location}}', '')\r\n\t,left(newid(), 35)\r\n\t,0\r\n\t,case when '{{payload.appPrefs.defaultTechTaskEnabled.value}}' = 1 then 30 else 0 end\r\n\t,nullif('{{payload.siteID}}', '')\r\n\t,'Flow: 06-01 Task Creation: Insert Task'\r\n    ,'Task created'\r\n\t)\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":18,"inputConnectors":[{"name":""}],"invalid":false,"name":"Insert task","outputConnectors":[{"name":"Out"}],"width":175,"x":357.0551047325134,"y":45.956199645996094},{"color":"#9ba8b0","component":{"metadata":"## Branch\n\n### Outputs\nThe number of possible outputs this branch will have. (_Minimum been 0_)\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nThe return should always be a list of values. The value **null** has a special meaning. It tells the branch-component that nothing should be sent\nthrough to the output that matches its position in the list, you can see more information in the examples below.\n\n### Examples:\n\nImagine you have a branch with two outputs. If you want the payload to go through the second output, your **return** should be as below.\nPay attention to the value **null** it tells the component that nothing should go through the first output. \n\n```js\n (function() {\n      if(payload.id === 10) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\nThat said, as you can see you can have as many outputs as you want. The return list is proportional to the number of outputs.\nSo, if you have three outputs you may have the following returns:\n\n```js\n(function() {\n      if(payload.id === 20) {\n         return [null, payload, payload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n\n**Using our available helpers Lodash, Moment and UUID**: \n\n```js\n(function() {\n      if(payload.id === 20) {\n         // creating unique ID and UTC date. \n         const newPayload = {id:uuid.v4(), createdAt: moment().utc()}\n         // using lodash to go deep and retrieve just the value I want. \n         newPayload.machineId = _.result(payload, 'list[0].definition.machineId')\n         return [null, newPayload, newPayload];\n      } else {\n         return [payload , null, null];\n      }\n })();\n``` \n","name":"Branch","properties":[{"defaultValue":4,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\r\n    switch (payload.flag) {\r\n        case \"TASK\":\r\n            return [payload, null, null, null];\r\n        case \"TECH_ESC\":\r\n            return [null, payload, null, null];\r\n        case \"WORK_ORDER\":\r\n            return [null, null, payload, null];\r\n        case \"WORK_ORDER_ESC\":\r\n            return [null, null, payload, null];\r\n        case \"JP_VERIFIER\":\r\n            return [null, null, null, payload];\r\n    }\r\n    return [null, null, null, null];\r\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":2,"inputConnectors":[{"name":""}],"name":"Flag?","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"},{"name":"Out:3"},{"name":"Out:4"}],"width":175,"x":-537.9384670257568,"y":175.1265411376953}],"viewBox":[13,-120,1,1092]},"id":"97bda25f-21c8-45f9-908a-ad76bbf7ad4f","lastUpdated":"2019-02-18T20:48:57.881Z","name":"06-01 Task Creation","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":30},{"dateCreated":"2019-08-23T02:58:10.266Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"SELECT DeviceID\r\n\t,UserID\r\nFROM (\r\n\tSELECT DeviceID\r\n\t\t,UserID\r\n\t\t,row_number() OVER (\r\n\t\t\tPARTITION BY UserID ORDER BY UpdatedTimestamp DESC\r\n\t\t\t) AS DeviceRank\r\n\tFROM [dbo].[VE_VW_tv_Device]\r\n\tWHERE updatedtimestamp > getdate() - 1\r\n\t) t\r\nWHERE t.DeviceRank = 1\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select Device","type":"db-ms-sql"},"db-ms-sql25":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":" Select UserStatusID from VE_VW_TV_User where \r\n userid = '{{payload.UserID}}'","expressionType":"","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select User Status","type":"db-ms-sql"},"filter24":{"config":{"errorHandling":"","expression":"(function() {\n\treturn true;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter","type":"filter"},"rabbitmq-producer22":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.userstatus.{{payload.DeviceID}}","ttl":0},"name":"To mobile.userstatus.{{DeviceID}}","type":"rabbitmq-producer"},"time12":{"config":{"errorHandling":"","format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":2000},"name":"Every 5 seconds","type":"time"},"transform23":{"config":{"errorHandling":"","expression":"(function() {\n    \n    // payload.timestamp = backToUTC(payload.timestamp);\n    // payload.taskAssigned = backToUTC(payload.taskAssigned);\n    // payload.taskCreated = backToUTC(payload.taskCreated);\n    \n    return payload;\n    \n    function backToUTC(date) {\n        let momentDate = moment(date);\n        let offsetMinutes = momentDate.utcOffset();\n        momentDate.utc().add(offsetMinutes,'minutes');\n        return momentDate.toDate();\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Dates Back to UTC","type":"transform"},"transform26":{"config":{"errorHandling":"","expression":"(function() {\n\tnewpayload = payload.__input\n\tnewpayload.UserStatusID = payload.UserStatusID\n\treturn newpayload\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Format Payload","type":"transform"}},"links":[{"from":"time12","to":"db-ms-sql10"},{"from":"filter24","to":"rabbitmq-producer22"},{"from":"db-ms-sql10","to":"db-ms-sql25"},{"from":"db-ms-sql25","to":"transform23"},{"from":"transform23","to":"transform26"},{"from":"transform26","to":"filter24"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->Out:<ul><li><!--block-->mobile.task.&lt;deviceID&gt;</li><li><pre><!--block-->{\n    deviceID,\n    action,\n    timestamp,\n    _ID,\n    userID,\n    prevUserID,\n    taskAssigned,\n    taskCreated,\n    taskStatusID,\n    taskTypeID,\n    eventDesc,\n    location,\n    machineID,\n    amount,\n    playerID,\n    firstName,\n    lastName,\n    tier,\n    tierColorHex\n}</pre></li></ul></li></ul><div><!--block-->Notes</div><ul><li><!--block-->every x seconds (1 - 5) select tasks which have recently been updated/created/deleted (inner join on tasklog table - may have to add oldUserID column to table), select devices corresponding to users (see example query below)</li><li><pre><!--block-->select t.* from [dbo].[VE_tv_Task] t\nwhere t._ID in(\n\tselect _ID from\t[dbo].[VE_tv_TaskLog]\n\twhere [Timestamp]  &gt; '2018-07-31 06:50:03.483'\n)</pre></li><li><!--block-->may want to send payload to another generic flow to add the device ids and then split (allows this logic to be reused)</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":22},"source":{"connectorIndex":0,"nodeID":24}},{"dest":{"connectorIndex":0,"nodeID":25},"name":"Strawberry Jam","source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":23},"source":{"connectorIndex":0,"nodeID":25}},{"dest":{"connectorIndex":0,"nodeID":26},"source":{"connectorIndex":0,"nodeID":23}},{"dest":{"connectorIndex":0,"nodeID":24},"source":{"connectorIndex":0,"nodeID":26}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":2000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":12,"inputConnectors":[],"invalid":false,"name":"Every 5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":277.7501525878906,"y":-91.5404281616211},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    \n    // payload.timestamp = backToUTC(payload.timestamp);\n    // payload.taskAssigned = backToUTC(payload.taskAssigned);\n    // payload.taskCreated = backToUTC(payload.taskCreated);\n    \n    return payload;\n    \n    function backToUTC(date) {\n        let momentDate = moment(date);\n        let offsetMinutes = momentDate.utcOffset();\n        momentDate.utc().add(offsetMinutes,'minutes');\n        return momentDate.toDate();\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":23,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Dates Back to UTC","outputConnectors":[{"name":"Out"}],"width":175,"x":1094.1827392578125,"y":-158.92022705078125},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn true;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":24,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Filter","outputConnectors":[{"name":"Out"}],"width":175,"x":1436.4000244140625,"y":67.73440265655518},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.userstatus.{{payload.DeviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":22,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.userstatus.{{DeviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1659.179443359375,"y":113.07395935058594},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"SELECT DeviceID\r\n\t,UserID\r\nFROM (\r\n\tSELECT DeviceID\r\n\t\t,UserID\r\n\t\t,row_number() OVER (\r\n\t\t\tPARTITION BY UserID ORDER BY UpdatedTimestamp DESC\r\n\t\t\t) AS DeviceRank\r\n\tFROM [dbo].[VE_VW_tv_Device]\r\n\tWHERE updatedtimestamp > getdate() - 1\r\n\t) t\r\nWHERE t.DeviceRank = 1\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select Device","outputConnectors":[{"name":"Out"}],"width":175,"x":575.7557983398438,"y":41.91476058959961},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":" Select UserStatusID from VE_VW_TV_User where \r\n userid = '{{payload.UserID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":25,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select User Status","outputConnectors":[{"name":"Out"}],"width":175,"x":817.5269165039062,"y":-92.01187229156494},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tnewpayload = payload.__input\n\tnewpayload.UserStatusID = payload.UserStatusID\n\treturn newpayload\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":26,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Format Payload","outputConnectors":[{"name":"Out"}],"width":175,"x":1272.9129638671875,"y":-47.152944564819336}]},"id":"c1debf73-76cc-4fea-bf88-27dc7c24b09b","lastUpdated":"2019-08-23T03:36:50.626Z","name":"M-10 User Status","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":2},{"dateCreated":"2017-11-26T21:17:26.647Z","definition":{"components":{"filter2":{"config":{"expression":"(function() {\n    return payload.appPrefs.alertMachineOnline.value == 1;\n})();","variables":""},"name":"Enabled?","type":"filter"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.machineonline","routingKeyPattern":"event.machineonline"},"name":"From event.machineonline","type":"rabbitmq-consumer"},"rabbitmq-producer7":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.send","ttl":0},"name":"To email.send","type":"rabbitmq-producer"},"transform6":{"config":{"expression":"(function() {\n\tvar email = {};\n\temail.to = payload.appPrefs.alertMachineOnlineEmail.value;\n\temail.subject = 'Machine Online @ ' + payload.event.location;\n\temail.text = 'A Machine has come online at '+ payload.event.location + '\\r\\n';\n\temail.text += 'Machine Number: ' + payload.event.mnum  + '\\r\\n';\n\temail.text += 'Reported Time: ' + payload.event.date  + '\\r\\n';\n\t\n\tpayload.email = email;\n\treturn payload;\n})();","variables":""},"name":"Add email","type":"transform"}},"links":[{"from":"transform6","to":"rabbitmq-producer7"},{"from":"rabbitmq-consumer1","to":"filter2"},{"from":"filter2","to":"transform6"}]},"description":"<div><!--block-->event.machineonline ==&gt; email.send</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n\tvar email = {};\n\temail.to = payload.appPrefs.alertMachineOnlineEmail.value;\n\temail.subject = 'Machine Online @ ' + payload.event.location;\n\temail.text = 'A Machine has come online at '+ payload.event.location + '\\r\\n';\n\temail.text += 'Machine Number: ' + payload.event.mnum  + '\\r\\n';\n\temail.text += 'Reported Time: ' + payload.event.date  + '\\r\\n';\n\t\n\tpayload.email = email;\n\treturn payload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":""}],"name":"Add email","outputConnectors":[{"name":"Out"}],"width":175,"x":782.6756210327148,"y":286.6094665527344},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.send","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":7,"inputConnectors":[{"name":""}],"name":"To email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":1009.2831039428711,"y":288.9653015136719},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.machineonline","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.machineonline","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From event.machineonline","outputConnectors":[{"name":"Out"}],"width":175,"x":344.34337615966797,"y":284.3597869873047},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    return payload.appPrefs.alertMachineOnline.value == 1;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":2,"inputConnectors":[{"name":""}],"name":"Enabled?","outputConnectors":[{"name":"Out"}],"width":175,"x":561.4803085327148,"y":285.82838439941406}],"viewBox":[847,15,1,927.34375]},"id":"e431816c-a340-48f3-ada2-8f4bb11ec9a1","lastUpdated":"2018-11-28T02:46:25.645Z","name":"09-05 Machine Online Alert","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":4},{"dateCreated":"2017-11-26T21:17:26.592Z","definition":{"components":{"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    wos._id as _ID\r\n    ,wos.schedulename as scheduleName\r\n    ,wos.scheduletypeid as scheduleTypeID\r\n    ,wos.value as value\r\n\t,wos.dueafterdays as dueAfterDays\r\n\t,wos.tasktypeid as taskTypeID\r\n\t,wos.taskuserid as taskUserID\r\n\t--,wos.taskcreatedby as taskCreatedBy\r\n\t--,wos.tasknote as taskNote\r\n\t,wos.taskdescription as taskDescription\r\n\t,wos.machineid as machineID\r\n\t,wos.standid as standID\r\n\t,wos.section as section\r\n\t,wos.bank as bank\r\n\t,wos.location as location\r\n\t,wos.mfr as mfr\r\n\t,wos.machinetypeid as machineTypeID\r\n\t,wos.machinetypename as machineTypeName\r\n\t,wos.cabinetnumber as cabinetNumber\r\n\t,wos.cabinettype as cabinetType\r\n\t,wos.model as model\r\n\t,wos.serialnum as serialNum\r\n\t,wos.denom as denom\r\n\t,wos.siteid as siteID\r\nfrom ve_vw_tv_workorderschedule wos\r\nwhere wos.enabled = 1\r\nand wos.scheduletypeid is not null\r\nand wos.value is not null\r\nand wos.value > 0\r\nand wos.startdate is not null\r\nand wos.startdate <= cast(current_timestamp as date)\r\nand (wos.enddate is null or wos.enddate >= cast(current_timestamp as date))\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select schedules","type":"db-ms-sql"},"db-ms-sql3":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    name as name,\r\n    value as value,\r\n    escalate_supervisor as escalateSupervisor,\r\n    escalate_manager as escalateManager\r\nfrom ve_vw_tv_applicationPreference\r\nwhere name in (\r\n    'Viz_Default_Tech_Task_Enabled'\r\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"rabbitmq-producer18":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"schedule.wo","ttl":0},"name":"To schedule.wo","type":"rabbitmq-producer"},"schedule19":{"config":{"cron":"0 4 * * *"},"name":"Every day at 04:00","type":"schedule"},"transform4":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform5":{"config":{"expression":"(function() {\n    function formatString(val) {\n        if (val) {\n            return val.toString().replace(/'/g, \"''\");\n        }\n        return val;\n    }\n\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.woSchedule = tidy(payload);\n    newPayload.siteID = payload.siteID;\n    \n    newPayload.woSchedule.scheduleName = formatString(newPayload.woSchedule.scheduleName);\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"}},"links":[{"from":"db-ms-sql3","to":"transform4"},{"from":"transform4","to":"db-ms-sql2"},{"from":"db-ms-sql2","to":"transform5"},{"from":"transform5","to":"rabbitmq-producer18"},{"from":"schedule19","to":"db-ms-sql3"}]},"description":"<div><!--block-->==&gt; schedule.wo</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":3}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":18},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":19}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    name as name,\r\n    value as value,\r\n    escalate_supervisor as escalateSupervisor,\r\n    escalate_manager as escalateManager\r\nfrom ve_vw_tv_applicationPreference\r\nwhere name in (\r\n    'Viz_Default_Tech_Task_Enabled'\r\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":3,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-63.596946716308594,"y":229.09634399414062},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":4,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":143.40306663513184,"y":227.09634399414062},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function formatString(val) {\n        if (val) {\n            return val.toString().replace(/'/g, \"''\");\n        }\n        return val;\n    }\n\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.woSchedule = tidy(payload);\n    newPayload.siteID = payload.siteID;\n    \n    newPayload.woSchedule.scheduleName = formatString(newPayload.woSchedule.scheduleName);\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":5,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":552.4030513763428,"y":226.09634399414062},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"schedule.wo","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":18,"inputConnectors":[{"name":""}],"name":"To schedule.wo","outputConnectors":[{"name":"Out"}],"width":175,"x":755.5797100067139,"y":225.2530975341797},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    wos._id as _ID\r\n    ,wos.schedulename as scheduleName\r\n    ,wos.scheduletypeid as scheduleTypeID\r\n    ,wos.value as value\r\n\t,wos.dueafterdays as dueAfterDays\r\n\t,wos.tasktypeid as taskTypeID\r\n\t,wos.taskuserid as taskUserID\r\n\t--,wos.taskcreatedby as taskCreatedBy\r\n\t--,wos.tasknote as taskNote\r\n\t,wos.taskdescription as taskDescription\r\n\t,wos.machineid as machineID\r\n\t,wos.standid as standID\r\n\t,wos.section as section\r\n\t,wos.bank as bank\r\n\t,wos.location as location\r\n\t,wos.mfr as mfr\r\n\t,wos.machinetypeid as machineTypeID\r\n\t,wos.machinetypename as machineTypeName\r\n\t,wos.cabinetnumber as cabinetNumber\r\n\t,wos.cabinettype as cabinetType\r\n\t,wos.model as model\r\n\t,wos.serialnum as serialNum\r\n\t,wos.denom as denom\r\n\t,wos.siteid as siteID\r\nfrom ve_vw_tv_workorderschedule wos\r\nwhere wos.enabled = 1\r\nand wos.scheduletypeid is not null\r\nand wos.value is not null\r\nand wos.value > 0\r\nand wos.startdate is not null\r\nand wos.startdate <= cast(current_timestamp as date)\r\nand (wos.enddate is null or wos.enddate >= cast(current_timestamp as date))\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":""}],"name":"Select schedules","outputConnectors":[{"name":"Out"}],"width":175,"x":351.4030513763428,"y":228.09634399414062},{"color":"#9ba8b0","component":{"description":"That's a Scheduler Component designed to dispatch cron signals","name":"Scheduler","properties":[{"defaultValue":"0 4 * * *","description":"Cron expression","name":"cron","type":"crontab"}],"type":"schedule"},"icon":"./assets/vizflow/components/schedule.svg","id":19,"inputConnectors":[],"name":"Every day at 04:00","outputConnectors":[{"name":"Out"}],"width":175,"x":-268.31117057800293,"y":230.00336837768555}],"viewBox":[167,-180,1,1211]},"id":"b724adbf-1f44-4060-a9be-7405bb189f3d","lastUpdated":"2018-11-28T02:47:43.834Z","name":"11-01 Work Order Scheduler - Part 1","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":8},{"dateCreated":"2017-11-26T21:17:26.594Z","definition":{"components":{"db-ms-sql12":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"update ve_vw_tv_workorderhistory\nset resolutionnotification = 1 \nwhere _ID = '{{payload.wo._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Set notified flag 2","type":"db-ms-sql"},"db-ms-sql2":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n\two._ID\n\t,wo.machineID\n\t,wo.completedAt\n\t,wo.createdAt\n\t,wo.location\n\t,wo.note\n\t,wor.resolutionCategory\n\t,wori.resolutionItem\n\t,tt.taskTypeDescription\n\t,ur.userRoleName\n\t,u.userName\n\t,u.staffID\nfrom (\n    select\n        _id\n        ,machineid\n        ,completedAt\n        ,resolutioncategory\n        ,resolutioncode\n        ,createdat\n        ,location\n        ,note\n        ,userid\n\t\t,tasktypeid\n    from ve_vw_tv_workorder\n\twhere completedat > dateadd(hh, -24, current_timestamp)\n\tand resolutionnotification = 0\n\tand taskstatusid = 13\n    union all\n    select\n        _id\n        ,machineid\n        ,completedAt\n        ,resolutioncategory\n        ,resolutioncode\n        ,createdat\n        ,location\n        ,note\n        ,userid\n\t\t,tasktypeid\n    from ve_vw_tv_workorderhistory\n\twhere completedat > dateadd(hh, -24, current_timestamp)\n\tand resolutionnotification = 0\n\tand taskstatusid = 13\n) wo\nleft join ve_vw_tv_user u\non wo.userid = u.userid\nleft join ve_tv_userrole ur\non u.userroleid = ur.userroleid\nleft join ve_tv_tasktype tt\non wo.tasktypeid = tt.tasktypeid\nleft join ve_vw_tv_workorderresolutions wor\non wo.resolutioncategory = wor.resolutioncategoryid\nleft join ve_vw_tv_workorderresolutionitems wori\non wo.resolutioncode = wori.resolutionitemid\nand wo.resolutioncategory = wori.resolutioncategoryid\nwhere wor.resolutionnotification = 1","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select work order","type":"db-ms-sql"},"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"update ve_vw_tv_workorder\nset resolutionnotification = 1 \nwhere _ID = '{{payload.wo._ID}}'","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Set notified flag 1","type":"db-ms-sql"},"db-ms-sql9":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_Gaming_Commission_Email',\n    'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"rabbitmq-producer8":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"email.send","ttl":0},"name":"To email.send","type":"rabbitmq-producer"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":10000},"name":"10 seconds","type":"time"},"transform10":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform11":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.wo = tidy(payload);\n    newPayload.siteID = payload.siteID;\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"},"transform5":{"config":{"expression":"function() {\r\n    var keys =  Object.keys(payload.wo);\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (payload.wo[keys[i]] == null) {\r\n            payload.wo[keys[i]] = \"\";\r\n        }\r\n    }    \r\n    \r\n    var email = {}\r\n    email.to = payload.appPrefs.alertGamingCommissionEmail.value;\r\n    email.subject = 'Compliance Notification for Asset '+ payload.wo.machineID + ' at ' + payload.wo.completedAt + ' #'+ payload.wo._ID +'#';\r\n    email.text = 'A ' + payload.wo.userRoleName + ' completed a Machine Entry Access Log of type '+  payload.wo.taskTypeDescription + ' on Asset Number ' + payload.wo.machineID + '\\r\\n';\r\n    email.text += '\\r\\n';\r\n    email.text += 'MEAL Information: ' + '\\r\\n';\r\n    email.text += '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' + '\\r\\n';\r\n    email.text += 'MEAL Type: ' + payload.wo.taskTypeDescription + '\\r\\n';\r\n    email.text += 'Resolution Category: ' + payload.wo.resolutionCategory + '\\r\\n';\r\n    email.text += 'Reason: ' + payload.wo.resolutionItem + '\\r\\n';\r\n    email.text += 'MEAL Start Time: ' + payload.wo.createdAt + '\\r\\n';\r\n    email.text += 'MEAL End Time: ' + payload.wo.completedAt + '\\r\\n';\r\n    email.text += 'Location: ' + payload.wo.location + ' / Asset Number ' + payload.wo.machineID + '\\r\\n';\r\n    email.text += '\\r\\n';\r\n    email.text += 'Team Member Information: ' + '\\r\\n';\r\n    email.text += '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' + '\\r\\n';\r\n    email.text += 'User Name: ' + payload.wo.userName + '\\r\\n';\r\n    email.text += 'StaffID: ' + payload.wo.staffID + '\\r\\n';\r\n    email.text += 'User Role: ' + payload.wo.userRoleName + '\\r\\n';\r\n    email.text += 'User Notes: ' + payload.wo.note + '\\r\\n';\r\n\r\n    payload.email = email;\r\n    return payload;\r\n}\r\n","variables":""},"name":"Add email","type":"transform"}},"links":[{"from":"transform5","to":"rabbitmq-producer8"},{"from":"time1","to":"db-ms-sql9"},{"from":"db-ms-sql9","to":"transform10"},{"from":"transform10","to":"db-ms-sql2"},{"from":"db-ms-sql2","to":"transform11"},{"from":"transform11","to":"db-ms-sql4"},{"from":"db-ms-sql4","to":"db-ms-sql12"},{"from":"db-ms-sql12","to":"transform5"}]},"description":"<div><!--block-->==&gt; email.send</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":5}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":2}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":12},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":12}}],"nodes":[{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":10000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"10 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-1058.2802810668945,"y":186.620361328125},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"email.send","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":8,"inputConnectors":[{"name":""}],"name":"To email.send","outputConnectors":[{"name":"Out"}],"width":175,"x":701.8351974487305,"y":191.39115142822266},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_Gaming_Commission_Email',\n    'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":9,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-845.7155723571777,"y":185.51799774169922},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.wo = tidy(payload);\n    newPayload.siteID = payload.siteID;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":11,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-185.99251556396484,"y":189.53914642333984},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\r\n    var keys =  Object.keys(payload.wo);\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (payload.wo[keys[i]] == null) {\r\n            payload.wo[keys[i]] = \"\";\r\n        }\r\n    }    \r\n    \r\n    var email = {}\r\n    email.to = payload.appPrefs.alertGamingCommissionEmail.value;\r\n    email.subject = 'Compliance Notification for Asset '+ payload.wo.machineID + ' at ' + payload.wo.completedAt + ' #'+ payload.wo._ID +'#';\r\n    email.text = 'A ' + payload.wo.userRoleName + ' completed a Machine Entry Access Log of type '+  payload.wo.taskTypeDescription + ' on Asset Number ' + payload.wo.machineID + '\\r\\n';\r\n    email.text += '\\r\\n';\r\n    email.text += 'MEAL Information: ' + '\\r\\n';\r\n    email.text += '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' + '\\r\\n';\r\n    email.text += 'MEAL Type: ' + payload.wo.taskTypeDescription + '\\r\\n';\r\n    email.text += 'Resolution Category: ' + payload.wo.resolutionCategory + '\\r\\n';\r\n    email.text += 'Reason: ' + payload.wo.resolutionItem + '\\r\\n';\r\n    email.text += 'MEAL Start Time: ' + payload.wo.createdAt + '\\r\\n';\r\n    email.text += 'MEAL End Time: ' + payload.wo.completedAt + '\\r\\n';\r\n    email.text += 'Location: ' + payload.wo.location + ' / Asset Number ' + payload.wo.machineID + '\\r\\n';\r\n    email.text += '\\r\\n';\r\n    email.text += 'Team Member Information: ' + '\\r\\n';\r\n    email.text += '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' + '\\r\\n';\r\n    email.text += 'User Name: ' + payload.wo.userName + '\\r\\n';\r\n    email.text += 'StaffID: ' + payload.wo.staffID + '\\r\\n';\r\n    email.text += 'User Role: ' + payload.wo.userRoleName + '\\r\\n';\r\n    email.text += 'User Notes: ' + payload.wo.note + '\\r\\n';\r\n\r\n    payload.email = email;\r\n    return payload;\r\n}\r\n","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":5,"inputConnectors":[{"name":""}],"name":"Add email","outputConnectors":[{"name":"Out"}],"width":175,"x":489.3251037597656,"y":192.9129180908203},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":10,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-631.0496978759766,"y":189.02857971191406},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n\two._ID\n\t,wo.machineID\n\t,wo.completedAt\n\t,wo.createdAt\n\t,wo.location\n\t,wo.note\n\t,wor.resolutionCategory\n\t,wori.resolutionItem\n\t,tt.taskTypeDescription\n\t,ur.userRoleName\n\t,u.userName\n\t,u.staffID\nfrom (\n    select\n        _id\n        ,machineid\n        ,completedAt\n        ,resolutioncategory\n        ,resolutioncode\n        ,createdat\n        ,location\n        ,note\n        ,userid\n\t\t,tasktypeid\n    from ve_vw_tv_workorder\n\twhere completedat > dateadd(hh, -24, current_timestamp)\n\tand resolutionnotification = 0\n\tand taskstatusid = 13\n    union all\n    select\n        _id\n        ,machineid\n        ,completedAt\n        ,resolutioncategory\n        ,resolutioncode\n        ,createdat\n        ,location\n        ,note\n        ,userid\n\t\t,tasktypeid\n    from ve_vw_tv_workorderhistory\n\twhere completedat > dateadd(hh, -24, current_timestamp)\n\tand resolutionnotification = 0\n\tand taskstatusid = 13\n) wo\nleft join ve_vw_tv_user u\non wo.userid = u.userid\nleft join ve_tv_userrole ur\non u.userroleid = ur.userroleid\nleft join ve_tv_tasktype tt\non wo.tasktypeid = tt.tasktypeid\nleft join ve_vw_tv_workorderresolutions wor\non wo.resolutioncategory = wor.resolutioncategoryid\nleft join ve_vw_tv_workorderresolutionitems wori\non wo.resolutioncode = wori.resolutionitemid\nand wo.resolutioncategory = wori.resolutioncategoryid\nwhere wor.resolutionnotification = 1","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":2,"inputConnectors":[{"name":""}],"name":"Select work order","outputConnectors":[{"name":"Out"}],"width":175,"x":-416.1426634788513,"y":190.44064331054688},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_vw_tv_workorder\nset resolutionnotification = 1 \nwhere _ID = '{{payload.wo._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":""}],"name":"Set notified flag 1","outputConnectors":[{"name":"Out"}],"width":175,"x":48.21534729003906,"y":190.40172576904297},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"update ve_vw_tv_workorderhistory\nset resolutionnotification = 1 \nwhere _ID = '{{payload.wo._ID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":12,"inputConnectors":[{"name":""}],"name":"Set notified flag 2","outputConnectors":[{"name":"Out"}],"width":175,"x":268.2463836669922,"y":191.73624420166016}],"viewBox":[278,-255,1,1209.00390625]},"id":"b47d04c4-e34c-4c88-ba9e-1b4a8ca25ceb","lastUpdated":"2018-11-28T02:46:36.698Z","name":"09-07 Gaming Commission Alert","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":10},{"dateCreated":"2017-11-26T21:17:26.583Z","definition":{"components":{"branch17":{"config":{"expression":"(function() {\n\treturn [payload, payload];\n})();","outputs":2,"variables":""},"name":"Split","type":"branch"},"db-ms-sql11":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n\tp.playerid as playerID,\r\n\tp.firstname as firstName,\r\n\tp.lastname as lastName,\r\n\tp.vip as VIP,\r\n\tp.anniversarydate as anniversaryDate,\r\n\tp.birthday as birthday,\r\n\tp.tier as tier,\r\n\tg.lastgreeted as lastGreeted\r\nfrom ve_vw_tv_player p\r\ncross join (\r\n\tselect\r\n\t\tmax(taskcreated) as lastgreeted\r\n\tfrom ve_vw_tv_task t\r\n\twhere playerid = '{{payload.event.playerID}}'\r\n\tand tasktypeid in (11, 12, 13)\r\n\tand taskstatusid in (0, 1, 2, 3, 4, 6, 7, 13)\r\n) g\r\nwhere p.playerid = '{{payload.event.playerID}}'","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select player","type":"db-ms-sql"},"filter10":{"config":{"expression":"(function() {\n\treturn payload.event.playerID;\n})();","variables":""},"name":"Filter for player ID","type":"filter"},"filter16":{"config":{"expression":"(function() {\n    var greetSuppressionDays = payload.__input.appPrefs.greetSuppressionDays.value;\n    \n    function isToday(day) {\n    \tvar today = new Date();\n    \tday = new Date(day);\n    \treturn today.getMonth() === day.getMonth()\n    \t\t&& today.getDate() === day.getDate();\n    }\n    \n    function daysSince(date) {\n    \tvar milliSecPerDay = 1000 * 60 * 60 * 24;\n\t\tnowSec = Date.now();\n\t\tdateSec = Date.parse(date);\n    \treturn Math.floor(Math.abs(nowSec - dateSec) / milliSecPerDay);\n    }\n    \n    if (payload.VIP !== \"YES\") {\n    \treturn false;\n    }\n    if (!payload.lastGreeted) {\n    \treturn true;\n    }\n    var days = daysSince(payload.lastGreeted);\n    if (days > greetSuppressionDays) {\n    \treturn true;\n    }\n    if (isToday(payload.birthday) || isToday(payload.anniversary)) {\n    \treturn days > 0;\n    }\n    return false;\n})();","variables":""},"name":"Filter for VIP and last greeted","type":"filter"},"filter18":{"config":{"expression":"(function() {\n\treturn false;\n})();","variables":""},"name":"Enable/Disable Player Events","type":"filter"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.player","routingKeyPattern":"event.player"},"name":"From event.player","type":"rabbitmq-consumer"},"rabbitmq-producer19":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"player.reservation","ttl":0},"name":"To player.reservation","type":"rabbitmq-producer"},"rabbitmq-producer9":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.create","ttl":0},"name":"To task.create","type":"rabbitmq-producer"},"transform13":{"config":{"expression":"(function() {\r\n\tvar newPayload = payload.__input;\r\n\t\r\n\tfunction isToday(day) {\r\n\t\tvar today = new Date();\r\n\t\tday = new Date(day);\r\n\t\treturn today.getMonth() === day.getMonth()\r\n\t\t\t&& today.getDate() === day.getDate();\r\n\t}\r\n\t\r\n\tif (isToday(payload.birthday)) {\r\n\t\tnewPayload.event.taskTypeID = variables.birthdayType;\r\n\t} else if (isToday(payload.anniversaryDate)) {\r\n\t\tnewPayload.event.taskTypeID = variables.anniversaryType;\r\n\t} else {\r\n\t\tnewPayload.event.taskTypeID = variables.greetingType;\r\n\t}\r\n\tnewPayload.flag = \"TASK\";\r\n\treturn newPayload;\r\n})();","variables":"{\n    \"anniversaryType\": 13,\n    \"birthdayType\": 12,\n    \"greetingType\": 11\n}\n\n"},"name":"Prepare payload","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"filter10"},{"from":"transform13","to":"rabbitmq-producer9"},{"from":"db-ms-sql11","to":"filter16"},{"from":"filter16","to":"transform13"},{"from":"filter10","to":"branch17"},{"from":"branch17:1","to":"filter18"},{"from":"filter18","to":"db-ms-sql11"},{"from":"branch17:0","to":"rabbitmq-producer19"}]},"description":"<div><!--block-->event.player ==&gt; task.create, player.reservation, event.aggregate -- Note: Soboba player logic not tested</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":16},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":18},"source":{"connectorIndex":1,"nodeID":17}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":18}},{"dest":{"connectorIndex":0,"nodeID":19},"source":{"connectorIndex":0,"nodeID":17}}],"name":"01 - Player - 01 - Check Conditions, in: PlayerEvents || out: CreateNewTask","nodes":[{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.player","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.player","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From event.player","outputConnectors":[{"name":"Out"}],"width":175,"x":-721.5289611816406,"y":225.44694423675537},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n\tp.playerid as playerID,\r\n\tp.firstname as firstName,\r\n\tp.lastname as lastName,\r\n\tp.vip as VIP,\r\n\tp.anniversarydate as anniversaryDate,\r\n\tp.birthday as birthday,\r\n\tp.tier as tier,\r\n\tg.lastgreeted as lastGreeted\r\nfrom ve_vw_tv_player p\r\ncross join (\r\n\tselect\r\n\t\tmax(taskcreated) as lastgreeted\r\n\tfrom ve_vw_tv_task t\r\n\twhere playerid = '{{payload.event.playerID}}'\r\n\tand tasktypeid in (11, 12, 13)\r\n\tand taskstatusid in (0, 1, 2, 3, 4, 6, 7, 13)\r\n) g\r\nwhere p.playerid = '{{payload.event.playerID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":11,"inputConnectors":[{"name":""}],"name":"Select player","outputConnectors":[{"name":"Out"}],"width":175,"x":105.80182361602783,"y":240.13102293014526},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    var greetSuppressionDays = payload.__input.appPrefs.greetSuppressionDays.value;\n    \n    function isToday(day) {\n    \tvar today = new Date();\n    \tday = new Date(day);\n    \treturn today.getMonth() === day.getMonth()\n    \t\t&& today.getDate() === day.getDate();\n    }\n    \n    function daysSince(date) {\n    \tvar milliSecPerDay = 1000 * 60 * 60 * 24;\n\t\tnowSec = Date.now();\n\t\tdateSec = Date.parse(date);\n    \treturn Math.floor(Math.abs(nowSec - dateSec) / milliSecPerDay);\n    }\n    \n    if (payload.VIP !== \"YES\") {\n    \treturn false;\n    }\n    if (!payload.lastGreeted) {\n    \treturn true;\n    }\n    var days = daysSince(payload.lastGreeted);\n    if (days > greetSuppressionDays) {\n    \treturn true;\n    }\n    if (isToday(payload.birthday) || isToday(payload.anniversary)) {\n    \treturn days > 0;\n    }\n    return false;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":16,"inputConnectors":[{"name":""}],"name":"Filter for VIP and last greeted","outputConnectors":[{"name":"Out"}],"width":175,"x":324.50553035736084,"y":240.1382064819336},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.create","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":9,"inputConnectors":[{"name":"In"}],"name":"To task.create","outputConnectors":[{"name":"Out"}],"width":175,"x":736.9824990034103,"y":241.62881183624268},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\r\n\tvar newPayload = payload.__input;\r\n\t\r\n\tfunction isToday(day) {\r\n\t\tvar today = new Date();\r\n\t\tday = new Date(day);\r\n\t\treturn today.getMonth() === day.getMonth()\r\n\t\t\t&& today.getDate() === day.getDate();\r\n\t}\r\n\t\r\n\tif (isToday(payload.birthday)) {\r\n\t\tnewPayload.event.taskTypeID = variables.birthdayType;\r\n\t} else if (isToday(payload.anniversaryDate)) {\r\n\t\tnewPayload.event.taskTypeID = variables.anniversaryType;\r\n\t} else {\r\n\t\tnewPayload.event.taskTypeID = variables.greetingType;\r\n\t}\r\n\tnewPayload.flag = \"TASK\";\r\n\treturn newPayload;\r\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"{\n    \"anniversaryType\": 13,\n    \"birthdayType\": 12,\n    \"greetingType\": 11\n}\n\n","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":13,"inputConnectors":[{"name":""}],"name":"Prepare payload","outputConnectors":[{"name":"Out"}],"width":175,"x":535.6847400665283,"y":239.93214416503906},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n\treturn payload.event.playerID;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":10,"inputConnectors":[{"name":""}],"name":"Filter for player ID","outputConnectors":[{"name":"Out"}],"width":175,"x":-519.1694831848145,"y":226.9220232963562},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n\treturn false;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":18,"inputConnectors":[{"name":""}],"name":"Enable/Disable Player Events","outputConnectors":[{"name":"Out"}],"width":175,"x":-98.59889507293701,"y":242.17571258544922},{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"player.reservation","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":19,"inputConnectors":[{"name":""}],"name":"To player.reservation","outputConnectors":[{"name":"Out"}],"width":175,"x":-99.20825099945068,"y":129.67376327514648},{"color":"#9ba8b0","component":{"description":"Multiple outputs","name":"Branch","properties":[{"defaultValue":2,"description":"Number of outputs","name":"outputs","type":"number"},{"defaultValue":"(function() {\n\treturn [payload, payload];\n})();","description":"Should return an array","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"branch"},"icon":"./assets/vizflow/components/branch.svg","id":17,"inputConnectors":[{"name":""}],"invalid":false,"name":"Split","outputConnectors":[{"name":"Out:1"},{"name":"Out:2"}],"width":175,"x":-316.94615292549133,"y":224.52694702148438}],"viewBox":[135,-120,1,1016]},"id":"b511bb83-ff68-4718-b692-035d32178782","lastUpdated":"2019-01-31T01:12:16.158Z","name":"03-01 Player Event","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":9},{"dateCreated":"2017-11-26T21:17:26.573Z","definition":{"components":{"db-ms-sql4":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    aggregateevents as aggregateEvents,\r\n    aggregatehours as aggregateHours\r\nfrom ve_tv_subscribedevents\r\nwhere eventcode1 = '{{payload.event.eventCode1}}'\r\nand (\r\n    eventcode2 = -1\r\n    or eventcode2 = '{{payload.event.eventCode2}}'\r\n    )\r\nand aggregateevents is not null\r\nand aggregatehours is not null\r\n","expressionType":"","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select aggregate values","type":"db-ms-sql"},"db-ms-sql8":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n    count(*) as count\r\nfrom ve_tv_techevent\r\nwhere eventcreated > dateadd(hh, -{{payload.aggregate.aggregateHours}}, current_timestamp)\r\nand machineid = '{{payload.event.mnum}}'\r\nand eventcode1 = '{{payload.event.eventCode1}}'\r\nand eventcode2 = coalesce(nullif('{{payload.event.eventCode2}}', ''), -1)\r\nand siteid = '{{payload.siteID}}'","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select tech events","type":"db-ms-sql"},"filter9":{"config":{"expression":"(function() {\n    return payload.aggregate.count >= payload.aggregate.aggregateEvents;\n})();","variables":""},"name":"Filter by aggregate","type":"filter"},"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"event.aggregate.wo","routingKeyPattern":"event.aggregate.wo"},"name":"From event.aggregate.wo","type":"rabbitmq-consumer"},"rabbitmq-producer11":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.create","ttl":0},"name":"To task.create","type":"rabbitmq-producer"},"transform12":{"config":{"expression":"function() {\n    payload.flag = \"WORK_ORDER\";\n    payload.event.createdByUserID = \"System Generated\";\n    return payload;\n}","variables":""},"name":"Set flag","type":"transform"},"transform13":{"config":{"expression":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.aggregate = tidy(payload);\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"},"transform14":{"config":{"expression":"(function() {\n    var newPayload = payload.__input;\n    newPayload.aggregate.count = payload.count;\n    \n    newPayload.event.note = '';\n    return newPayload;\n})();","variables":""},"name":"Tidy 2","type":"transform"}},"links":[{"from":"filter9","to":"transform12"},{"from":"transform12","to":"rabbitmq-producer11"},{"from":"rabbitmq-consumer1","to":"db-ms-sql4"},{"from":"db-ms-sql4","to":"transform13"},{"from":"transform13","to":"db-ms-sql8"},{"from":"db-ms-sql8","to":"transform14"},{"from":"transform14","to":"filter9"}]},"description":"<div><!--block-->event.aggregate.wo ==&gt; task.create</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":12},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":4},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":4}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":14},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":14}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.create","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":11,"inputConnectors":[{"name":""}],"name":"To task.create","outputConnectors":[{"name":"Out"}],"width":175,"x":592.2385101318359,"y":241.9813575744629},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"event.aggregate.wo","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"event.aggregate.wo","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"name":"From event.aggregate.wo","outputConnectors":[{"name":"Out"}],"width":175,"x":-865.0049819946289,"y":238.443088889122},{"color":"#9ba8b0","component":{"description":"Use the filter component to determine whether a Message should be passed to the next component.","name":"Filter","properties":[{"defaultValue":"(function() {\n    return payload.aggregate.count >= payload.aggregate.aggregateEvents;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":9,"inputConnectors":[{"name":""}],"name":"Filter by aggregate","outputConnectors":[{"name":"Out"}],"width":175,"x":179.7648035362363,"y":240.96339797973633},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    payload.flag = \"WORK_ORDER\";\n    payload.event.createdByUserID = \"System Generated\";\n    return payload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":12,"inputConnectors":[{"name":""}],"name":"Set flag","outputConnectors":[{"name":"Out"}],"width":175,"x":382.78419494628906,"y":241.36984634399414},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    aggregateevents as aggregateEvents,\r\n    aggregatehours as aggregateHours\r\nfrom ve_tv_subscribedevents\r\nwhere eventcode1 = '{{payload.event.eventCode1}}'\r\nand (\r\n    eventcode2 = -1\r\n    or eventcode2 = '{{payload.event.eventCode2}}'\r\n    )\r\nand aggregateevents is not null\r\nand aggregatehours is not null\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":4,"inputConnectors":[{"name":""}],"name":"Select aggregate values","outputConnectors":[{"name":"Out"}],"width":175,"x":-658.7468338012695,"y":238.5519561767578},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function tidy(obj) {\n    \tvar result = {};\n    \tfor (var key in obj) {\n    \t\tif (key.substring(0, 2) !== \"__\") {\n    \t\t\tresult[key] = obj[key];\n    \t\t}\n    \t}\n    \treturn result;\n    }\n    \n    var newPayload = payload.__input;\n    newPayload.aggregate = tidy(payload);\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":13,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-444.5483169555664,"y":240.85483932495117},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n    count(*) as count\r\nfrom ve_tv_techevent\r\nwhere eventcreated > dateadd(hh, -{{payload.aggregate.aggregateHours}}, current_timestamp)\r\nand machineid = '{{payload.event.mnum}}'\r\nand eventcode1 = '{{payload.event.eventCode1}}'\r\nand eventcode2 = coalesce(nullif('{{payload.event.eventCode2}}', ''), -1)\r\nand siteid = '{{payload.siteID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":8,"inputConnectors":[{"name":""}],"name":"Select tech events","outputConnectors":[{"name":"Out"}],"width":175,"x":-234.99157524108887,"y":240.38226699829102},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var newPayload = payload.__input;\n    newPayload.aggregate.count = payload.count;\n    \n    newPayload.event.note = '';\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":14,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-29.723304748535156,"y":243.45214080810547}],"viewBox":[69,-120,1,1098.4548950195312]},"id":"c8af706f-d3d6-4f49-af69-1f95ce3a7c85","lastUpdated":"2018-11-28T02:45:07.963Z","name":"05-02 Aggregate Work Order","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":3},{"dateCreated":"2019-03-11T01:30:51.526Z","definition":{"components":{"rabbitmq-consumer1":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"errorHandling":"","exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"mobile.task.update","routingKeyPattern":"mobile.task.update"},"name":"From mobile.task.update","type":"rabbitmq-consumer"},"rabbitmq-producer3":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":0},"name":"To task.update","type":"rabbitmq-producer"},"transform2":{"config":{"errorHandling":"","expression":"(function() {\n    if(payload.tasknote){\n        payload.tasknote = Buffer.from(payload.tasknote, 'base64').toString();\n    }\n    // let task = {\n    //     newTaskStatusID: payload.taskStatusID,\n    //     _ID: payload.taskID,\n    // };\n    return {\n        task: payload,\n        flag: 'MOBILE'\n    };\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Map payload for update","type":"transform"}},"links":[{"from":"rabbitmq-consumer1","to":"transform2"},{"from":"transform2","to":"rabbitmq-producer3"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->In:<ul><li><!--block-->mobile.task.update</li><li><pre><!--block-->{\n  taskID,\n  taskStatusID (optional)\n  ...\n}</pre></li></ul></li><li><!--block-->Out:<ul><li><!--block-->task.update</li><li><pre><!--block-->{\n  task: {\n    _ID,\n   newTaskStatusID\n  }\n}</pre></li></ul></li></ul><div><!--block--><br>Notes</div><ul><li><!--block-->transform the payload for sending to task.update queue (and add relevant action flag)</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":2},"source":{"connectorIndex":0,"nodeID":1}},{"dest":{"connectorIndex":0,"nodeID":3},"source":{"connectorIndex":0,"nodeID":2}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":3,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":1540.5,"y":225.5},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Consumer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Queue\n\nThe name of the queue that the component will handle messages from.\n\n### Durable queue\n\nDurable queues are persisted to disk and thus survive broker restarts. Durability of a queue does not make messages that are routed to that queue durable. If a broker is taken down and then brought back up, the durable queue will be re-declared during broker startup. However, only persistent messages will be recovered.\n\n### Exchange\n\nThe name of the exchange. RabbitMQ Producers send messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nExchanges survive broker restarts.\n\n### Routing key pattern\n\nThe routing key. Routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\n\n### Prefetch\n\nUse the configuration to limit unacknowledged messages when consuming. When unacknowledged messages count reaches the number, the consumer will not be able to consume new messages from the server.\n\n* For async mode, the default value is zero, which means no limitation.\n* For sync mode, the value is 1. When the batch mode is enabled, its value will be equal to the *count* defined in the batch mode definition.\n\n### Only message body\n\nPass only the message's body to the next component.\n\n### Dead letter definition\n\nMessages from a queue can be 'dead-lettered', that is, republished to another exchange when any of the following events occur:\n\n* The message is rejected.\n* The TTL for the message expires.\n* The queue length limit is exceeded.\n\n#### Has dead letter exchange\n\nWhether or not enable the dead letter exchange.\n\n#### Dead letter exchange definition\n\n* Queue\n\nThe queue that dead-lettered messages are routed to. When leaves empty, it will be the original queue name with an `.error` suffix.\n\n* Durable queue\n\nThe queue survives broker restarts.\n\n* Exchange\n\nThe exchange used to route dead-lettered messages.\n\n* Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Durable exchange\n\nExchanges survive broker restarts.\n\n### Batch mode definition\n\nIn batch mode, instead of sending one message to the next components each time, it sends multiple messages each time.\n\nBatch mode is useful when the next component needs to batch process messages, for example, insert multiple records to a database in a single query to reduce database transactions.\n\n#### Enable batch mode\n\nWhether or not enable the batch mode.\n\n#### Batch Mode definition\n\nThe component will wait in the *time span* to accumulate messages, and send them immediately when the messages count reaches the defined *count*.\nIf the component can't accumulate enough messages in the *time span*, it will still send the messages at the end of the *time span*.\nIn other words, the number of messages sent in a batch is dynamic.\n\n* Time span\n\nThe max milliseconds used to accumulate messages.\n\n* Count\n\nThe max count of messages to send in an output payload.\n\n## Message serialization and deserialization\n\nThe component will automatically deserialize messages received according to the *content-type* header.\nThe following types are supported:\n\n* application/json\n* application/octet-stream\n* text/plain\n\nWhen messages are produced by the *RabbitMQ Producer* component, the messages will be serialized as JSON with an *application/json* content-type.\n\nWhen the *content-type* header is not supported or not provided, the component will try to deserialize the message as JSON, but returns the raw message if the JSON decoding fails.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\n### Only message body disabled\n\nThe output payload will be an object which contains the message body in the *body* property.\n\nExample:\n\n```json\n{\n  \"fields\": {\n    \"consumerTag\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8904.queue1\",\n    \"deliveryTag\": 357,\n    \"redelivered\": false,\n    \"exchange\": \"ex1\",\n    \"routingKey\": \"rk1\"\n  },\n  \"properties\": {\n    \"contentType\": \"application/json\",\n    \"contentEncoding\": \"utf8\",\n    \"headers\": {},\n    \"deliveryMode\": 2,\n    \"correlationId\": \"\",\n    \"replyTo\": \"\",\n    \"messageId\": \"\",\n    \"timestamp\": 1542247428625,\n    \"type\": \"\",\n    \"appId\": \"JesseWang.local.node /Users/jessewang/work/vizflow-server/workflow/runner/runner.js.8877\"\n  },\n  \"content\": \"<Buffer 7b 22 6e 75 6d 62 65 72 22 3a 34 37 31 7d>\",\n  \"type\": \"rk1\",\n  \"queue\": \"queue1\",\n  \"body\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n### Only message body enabled\n\nThe output payload will be the message body.\n\nExample:\n\n```json\n{\n  \"foo\": \"bar\"\n}\n```\n\n## Output for batch mode\n\nThe output payload will be an array that contains multiple messages, whose format is described at *Output*.\n","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"mobile.task.update","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"mobile.task.update","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{"durableExchange":true,"durableQueue":true,"exchange":"","exchangeType":"topic","persistentMessage":true,"queue":""},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":1,"inputConnectors":[],"invalid":false,"name":"From mobile.task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":1011,"y":238},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    if(payload.tasknote){\n        payload.tasknote = Buffer.from(payload.tasknote, 'base64').toString();\n    }\n    // let task = {\n    //     newTaskStatusID: payload.taskStatusID,\n    //     _ID: payload.taskID,\n    // };\n    return {\n        task: payload,\n        flag: 'MOBILE'\n    };\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":2,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Map payload for update","outputConnectors":[{"name":"Out"}],"width":175,"x":1277,"y":233}]},"id":"f27ab0f1-d839-42c9-abe3-99a692a7bebb","lastUpdated":"2019-03-21T23:42:44.553Z","name":"M-03 Task Update","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":12},{"dateCreated":"2017-11-26T21:17:26.685Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"{{payload.query}}","expressionType":"UPDATE_DATA","filterEmptyResult":false,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Insert work orders","type":"db-ms-sql"},"db-ms-sql7":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\r\n\tmi.mnum as mnum\r\n\t,mi.standid as standID\r\n\t,format(d.dueDate, 'yyyy-MM-dd HH:mm:ss.fff') as dueDate\r\nfrom (\r\n\tselect\r\n\t\tmnum\r\n\t\t,standid\r\n\t\t,siteid\r\n\tfrom ve_vw_tv_machineinfo \r\n\twhere mnum = coalesce(nullif('{{payload.woSchedule.machineID}}', ''), mnum)\t\t\t\r\n\tand standid = coalesce(nullif('{{payload.woSchedule.standID}}', ''), standid)\t\t\t\r\n\tand section = coalesce(nullif('{{payload.woSchedule.section}}', ''), section)\t\t\t\r\n\tand bank =\tcoalesce(nullif('{{payload.woSchedule.bank}}', ''), bank)\t\t\t\r\n\tand location = coalesce(nullif('{{payload.woSchedule.location}}', ''), location)\t\t\t\r\n\tand mfr = coalesce(nullif('{{payload.woSchedule.mfr}}', ''), mfr)\t\t\t\r\n\tand machinetypeid = coalesce(nullif('{{payload.woSchedule.machineTypeID}}', ''), machinetypeid)\t\t\t\r\n\tand machinetypename = coalesce(nullif('{{payload.woSchedule.machineTypeName}}', ''), machinetypename)\t\t\t \r\n\tand cabinetnumber = coalesce(nullif('{{payload.woSchedule.cabinetNumber}}', ''), cabinetnumber)\t\t\t \r\n\tand cabinettype = coalesce(nullif('{{payload.woSchedule.cabinetType}}', ''), cabinettype)\t\t\t \r\n\tand model = coalesce(nullif('{{payload.woSchedule.model}}', ''), model)\t\t\t \r\n\tand serialnum = coalesce(nullif('{{payload.woSchedule.serialNum}}', ''), serialnum)\t\t\t \r\n\tand denom = coalesce(nullif('{{payload.woSchedule.denom}}', ''), denom)\t\t\t \r\n\tand siteid = '{{payload.siteID}}'\r\n\t) mi\r\nleft join (\r\n\tselect \r\n\t\tmachineid\r\n\t\t,siteid\r\n\t\t,max(case when scheduleid = '{{payload.woSchedule._ID}}' then createdat else null end) as lastscheduled\r\n\t\t,max(case when tasktypeid = '{{payload.woSchedule.taskTypeID}}' and taskstatusid = 13 then completedat else null end) as typelastcompleted\r\n\t\t,count(case when tasktypeid = '{{payload.woSchedule.taskTypeID}}' and taskstatusid not in (12, 13) then 1 else null end) as numtypeopen \r\n\tfrom ve_vw_tv_workorder\r\n\tgroup by\r\n\t    machineid\r\n\t    ,siteid\r\n\t) wo\r\non mi.mnum = wo.machineid\r\nand mi.siteid = wo.siteid\r\ncross join (\r\n\tselect\r\n\t\tcase when '{{payload.woSchedule.dueAfterDays}}' = '' then null else dateadd(dd, cast('{{payload.woSchedule.dueAfterDays}}' as int), current_timestamp) end as dueDate\r\n\t\t) d\r\nwhere (('{{payload.woSchedule.scheduleTypeID}}' = 1 and datepart(dd, current_timestamp) = '{{payload.woSchedule.value}}' and (wo.lastscheduled is null or datediff(hh, wo.lastscheduled, current_timestamp) > 0))\r\n    or ('{{payload.woSchedule.scheduleTypeID}}' = 2 and (wo.lastscheduled is null or datediff(dd, wo.lastscheduled, current_timestamp) >= '{{payload.woSchedule.value}}'))\r\n\tor ('{{payload.woSchedule.scheduleTypeID}}' = 3 and (wo.typelastcompleted is null or datediff(dd, wo.typelastcompleted, current_timestamp) >= '{{payload.woSchedule.value}}') and (wo.numtypeopen is null or wo.numtypeopen = 0)))\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select machines","type":"db-ms-sql"},"rabbitmq-consumer18":{"config":{"batchModeConfig":{},"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","deadLetterConfig":{},"durableExchange":true,"durableQueue":true,"enableBatchMode":false,"exchange":"techViz","exchangeType":"topic","hasDeadLetterExchange":true,"onlyMessageBody":true,"prefetch":0,"queue":"schedule.wo","routingKeyPattern":"schedule.wo"},"name":"From schedule.wo","type":"rabbitmq-consumer"},"transform9":{"config":{"expression":"(function() {\n    function formatValue(val) {\n        if (!val) {\n            return \"null\";\n        }\n        result = val.toString().replace(/'/g, \"''\")\n        return \"'\" + result + \"'\";\n    }\n\n    var newPayload = payload.__input;\n    var query = \"\\ninsert into ve_tv_workorder\"\n            + \"\\n(machineid, location, tasktypeid, eventdesc, createdbyuserid, userid, duedate, scheduleid, siteid)\"\n            + \"\\nvalues\";\n    for (var i = 0; i < payload.count; i++) {\n        query += \"\\n(\" + formatValue(payload.data[i].mnum)\n            + \", \" + formatValue(payload.data[i].standID)\n            + \", \" + formatValue(newPayload.woSchedule.taskTypeID)\n            + \", \" + formatValue(newPayload.woSchedule.taskDescription)\n            + \", \" + formatValue(\"Schedule: \" + newPayload.woSchedule.scheduleName)\n            + \", \" + formatValue(newPayload.woSchedule.taskUserID)\n            + \", \" + formatValue(payload.data[i].dueDate)\n            + \", \" + formatValue(newPayload.woSchedule._ID)\n            + \", \" + formatValue(newPayload.siteID) + \")\";\n        query += i === payload.count - 1 ? \"\" : \",\";\n    }\n    newPayload.query = query;\n    return newPayload;\n})();","variables":""},"name":"Add query","type":"transform"}},"links":[{"from":"transform9","to":"db-ms-sql10"},{"from":"db-ms-sql7","to":"transform9"},{"from":"rabbitmq-consumer18","to":"db-ms-sql7"}]},"description":"<div><!--block-->schedule.wo ==&gt;</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":7}},{"dest":{"connectorIndex":0,"nodeID":7},"source":{"connectorIndex":0,"nodeID":18}}],"nodes":[{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"UPDATE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"{{payload.query}}","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":""}],"name":"Insert work orders","outputConnectors":[{"name":"Out"}],"width":175,"x":747.6560287475586,"y":196.30110931396484},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\r\n\tmi.mnum as mnum\r\n\t,mi.standid as standID\r\n\t,format(d.dueDate, 'yyyy-MM-dd HH:mm:ss.fff') as dueDate\r\nfrom (\r\n\tselect\r\n\t\tmnum\r\n\t\t,standid\r\n\t\t,siteid\r\n\tfrom ve_vw_tv_machineinfo \r\n\twhere mnum = coalesce(nullif('{{payload.woSchedule.machineID}}', ''), mnum)\t\t\t\r\n\tand standid = coalesce(nullif('{{payload.woSchedule.standID}}', ''), standid)\t\t\t\r\n\tand section = coalesce(nullif('{{payload.woSchedule.section}}', ''), section)\t\t\t\r\n\tand bank =\tcoalesce(nullif('{{payload.woSchedule.bank}}', ''), bank)\t\t\t\r\n\tand location = coalesce(nullif('{{payload.woSchedule.location}}', ''), location)\t\t\t\r\n\tand mfr = coalesce(nullif('{{payload.woSchedule.mfr}}', ''), mfr)\t\t\t\r\n\tand machinetypeid = coalesce(nullif('{{payload.woSchedule.machineTypeID}}', ''), machinetypeid)\t\t\t\r\n\tand machinetypename = coalesce(nullif('{{payload.woSchedule.machineTypeName}}', ''), machinetypename)\t\t\t \r\n\tand cabinetnumber = coalesce(nullif('{{payload.woSchedule.cabinetNumber}}', ''), cabinetnumber)\t\t\t \r\n\tand cabinettype = coalesce(nullif('{{payload.woSchedule.cabinetType}}', ''), cabinettype)\t\t\t \r\n\tand model = coalesce(nullif('{{payload.woSchedule.model}}', ''), model)\t\t\t \r\n\tand serialnum = coalesce(nullif('{{payload.woSchedule.serialNum}}', ''), serialnum)\t\t\t \r\n\tand denom = coalesce(nullif('{{payload.woSchedule.denom}}', ''), denom)\t\t\t \r\n\tand siteid = '{{payload.siteID}}'\r\n\t) mi\r\nleft join (\r\n\tselect \r\n\t\tmachineid\r\n\t\t,siteid\r\n\t\t,max(case when scheduleid = '{{payload.woSchedule._ID}}' then createdat else null end) as lastscheduled\r\n\t\t,max(case when tasktypeid = '{{payload.woSchedule.taskTypeID}}' and taskstatusid = 13 then completedat else null end) as typelastcompleted\r\n\t\t,count(case when tasktypeid = '{{payload.woSchedule.taskTypeID}}' and taskstatusid not in (12, 13) then 1 else null end) as numtypeopen \r\n\tfrom ve_vw_tv_workorder\r\n\tgroup by\r\n\t    machineid\r\n\t    ,siteid\r\n\t) wo\r\non mi.mnum = wo.machineid\r\nand mi.siteid = wo.siteid\r\ncross join (\r\n\tselect\r\n\t\tcase when '{{payload.woSchedule.dueAfterDays}}' = '' then null else dateadd(dd, cast('{{payload.woSchedule.dueAfterDays}}' as int), current_timestamp) end as dueDate\r\n\t\t) d\r\nwhere (('{{payload.woSchedule.scheduleTypeID}}' = 1 and datepart(dd, current_timestamp) = '{{payload.woSchedule.value}}' and (wo.lastscheduled is null or datediff(hh, wo.lastscheduled, current_timestamp) > 0))\r\n    or ('{{payload.woSchedule.scheduleTypeID}}' = 2 and (wo.lastscheduled is null or datediff(dd, wo.lastscheduled, current_timestamp) >= '{{payload.woSchedule.value}}'))\r\n\tor ('{{payload.woSchedule.scheduleTypeID}}' = 3 and (wo.typelastcompleted is null or datediff(dd, wo.typelastcompleted, current_timestamp) >= '{{payload.woSchedule.value}}') and (wo.numtypeopen is null or wo.numtypeopen = 0)))\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":7,"inputConnectors":[{"name":""}],"name":"Select machines","outputConnectors":[{"name":"Out"}],"width":175,"x":310.1178512573242,"y":192.0119857788086},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    function formatValue(val) {\n        if (!val) {\n            return \"null\";\n        }\n        result = val.toString().replace(/'/g, \"''\")\n        return \"'\" + result + \"'\";\n    }\n\n    var newPayload = payload.__input;\n    var query = \"\\ninsert into ve_tv_workorder\"\n            + \"\\n(machineid, location, tasktypeid, eventdesc, createdbyuserid, userid, duedate, scheduleid, siteid)\"\n            + \"\\nvalues\";\n    for (var i = 0; i < payload.count; i++) {\n        query += \"\\n(\" + formatValue(payload.data[i].mnum)\n            + \", \" + formatValue(payload.data[i].standID)\n            + \", \" + formatValue(newPayload.woSchedule.taskTypeID)\n            + \", \" + formatValue(newPayload.woSchedule.taskDescription)\n            + \", \" + formatValue(\"Schedule: \" + newPayload.woSchedule.scheduleName)\n            + \", \" + formatValue(newPayload.woSchedule.taskUserID)\n            + \", \" + formatValue(payload.data[i].dueDate)\n            + \", \" + formatValue(newPayload.woSchedule._ID)\n            + \", \" + formatValue(newPayload.siteID) + \")\";\n        query += i === payload.count - 1 ? \"\" : \",\";\n    }\n    newPayload.query = query;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":9,"inputConnectors":[{"name":""}],"name":"Add query","outputConnectors":[{"name":"Out"}],"width":175,"x":528.9968109130859,"y":195.99913024902344},{"color":"#9ba8b0","component":{"description":"Consumes messages from RabbitMQ","name":"RabbitMQ Consumer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access to rabbitMQ server","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"schedule.wo","description":"queue","name":"queue","type":"text","validators":{"required":true}},{"defaultValue":true,"description":"Durable queues are persisted to disk and thus survive broker restarts. Queues that are not durable are called transient.Default(true)","name":"durableQueue","type":"boolean"},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":"schedule.wo","description":"routingKeyPattern","name":"routingKeyPattern","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Prefetch","name":"prefetch","type":"number"},{"defaultValue":true,"description":"Pass only the message's body to the next component","name":"onlyMessageBody","type":"boolean"},{"defaultValue":true,"description":"Messages from a queue can be 'dead-lettered'; that is, republished to another exchange when any of the following events occur: The message is rejected, the TTL for the message expires or the queue length limit is exceeded: Default(true)","name":"hasDeadLetterExchange","transient":true,"type":"boolean"},{"description":"Dead Letter Exchange and Queue Definitions","name":"deadLetterDefinition","type":"x-dead-letter"},{"defaultValue":{},"description":"Hold all configuration needed to set the dead letter exchange and the queue to route the messages.","name":"deadLetterConfig","transient":true},{"description":"Batch Mode Definitions","name":"batchModeDefinition","type":"x-dead-letter"},{"defaultValue":false,"description":"Select batches of messages from RabbitMQ as a single payload","name":"enableBatchMode","transient":true,"type":"boolean"},{"defaultValue":{},"description":"Hold all configuration needed to set the batch mode","name":"batchModeConfig","transient":true}],"type":"rabbitmq-consumer"},"icon":"./assets/vizflow/components/rabbitmq-consumer.svg","id":18,"inputConnectors":[],"name":"From schedule.wo","outputConnectors":[{"name":"Out"}],"width":175,"x":99.69741821289062,"y":193.39932250976562}],"viewBox":[259,-435,1,1721]},"id":"cba90a56-a160-4fe7-b12b-f8805d875c85","lastUpdated":"2018-11-28T02:47:49.091Z","name":"11-02 Work Order Scheduler - Part 2","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"sync","version":2},{"dateCreated":"2018-11-30T01:56:09.723Z","definition":{"components":{"db-ms-sql8":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"date","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,e.actionTypeId\nfrom ve_vw_tv_event e with (noLock)\nwhere e.date > '{{delta}}'\nand e.actionTypeId in (11, 12)\nand e.isSubscribed = 1\norder by date desc","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select online/offline actions","type":"db-ms-sql"},"rabbitmq-producer5":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.machineActionLog","ttl":4000},"name":"To sql.machineActionLog","type":"rabbitmq-producer"},"time7":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 seconds","type":"time"},"transform6":{"config":{"expression":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ninsert into ve_tv_machineActionLog (\n    _id\n    ,_version\n    ,loggedAt\n    ,actionAt\n    ,machineActionId\n    ,machineId\n    ,location\n    ,description\n    ,amount\n    ,playerId\n    ,staffId\n    ,siteId\n) values (\n    newId()\n    ,0\n    ,getDate()\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,${payload.actionTypeId}\n    ,${payload.mnum}\n    ,'${payload.location}'\n    ,'${payload.description}'\n    ,${payload.amount}\n    ,${payload.playerId}\n    ,${payload.staffId}\n    ,${payload.siteId}\n);\n`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add query","type":"transform"}},"links":[{"from":"transform6","to":"rabbitmq-producer5"},{"from":"db-ms-sql8","to":"transform6"},{"from":"time7","to":"db-ms-sql8"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":7}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.machineActionLog","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":4000,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":5,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.machineActionLog","outputConnectors":[{"name":"Out"}],"width":175,"x":1014.015380859375,"y":204.91868591308594},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ninsert into ve_tv_machineActionLog (\n    _id\n    ,_version\n    ,loggedAt\n    ,actionAt\n    ,machineActionId\n    ,machineId\n    ,location\n    ,description\n    ,amount\n    ,playerId\n    ,staffId\n    ,siteId\n) values (\n    newId()\n    ,0\n    ,getDate()\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,${payload.actionTypeId}\n    ,${payload.mnum}\n    ,'${payload.location}'\n    ,'${payload.description}'\n    ,${payload.amount}\n    ,${payload.playerId}\n    ,${payload.staffId}\n    ,${payload.siteId}\n);\n`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add query","outputConnectors":[{"name":"Out"}],"width":175,"x":770.5076904296875,"y":203.9593505859375},{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":7,"inputConnectors":[],"invalid":false,"name":"5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":321.5076904296875,"y":202.47967529296875},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"date","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,e.actionTypeId\nfrom ve_vw_tv_event e with (noLock)\nwhere e.date > '{{delta}}'\nand e.actionTypeId in (11, 12)\nand e.isSubscribed = 1\norder by date desc","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":8,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select online/offline actions","outputConnectors":[{"name":"Out"}],"width":175,"x":548.5076904296875,"y":203.47967529296875}]},"id":"fac4bbd5-aa4b-4439-a778-d0c27aeace21","lastUpdated":"2019-01-31T01:13:13.773Z","name":"15-03 Offline Machines - Get events","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":18},{"dateCreated":"2018-11-27T04:11:42.792Z","definition":{"components":{"db-ms-sql8":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"date","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,e.actionTypeId\n\t,e.taskTypeId\nfrom ve_vw_tv_event e with (noLock)\nwhere date > '{{delta}}'\nand e.IsSubscribed = 1\nand e.actionTypeId = 13\norder by date desc\t   ","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select tech events","type":"db-ms-sql"},"rabbitmq-producer5":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"sql.techEvent","ttl":0},"name":"To sql.techEvent","type":"rabbitmq-producer"},"time7":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"5 seconds","type":"time"},"transform6":{"config":{"expression":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ninsert into ve_tv_techEvent (\n\teventCode1\n\t,eventCode2\n\t,machineId\n\t,actionTypeId\n\t,taskTypeId\n\t,playerId\n\t,amount\n\t,location\n\t,eventDesc\n\t,transDate\n\t,staffId\n\t,loggedAt\n\t,siteid\n) values (\n    ${payload.eventCode1}\n    ,${payload.eventCode2}\n    ,${payload.mnum}\n    ,${payload.actionTypeId}\n    ,${payload.taskTypeId}\n    ,${payload.playerId}\n    ,${payload.amount}\n    ,'${payload.location}'\n    ,'${payload.description}'\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,${payload.staffId}\n    ,getDate()\n    ,${payload.siteId}\n);\n`;\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Add query","type":"transform"}},"links":[{"from":"transform6","to":"rabbitmq-producer5"},{"from":"db-ms-sql8","to":"transform6"},{"from":"time7","to":"db-ms-sql8"}]},"flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":6}},{"dest":{"connectorIndex":0,"nodeID":6},"source":{"connectorIndex":0,"nodeID":8}},{"dest":{"connectorIndex":0,"nodeID":8},"source":{"connectorIndex":0,"nodeID":7}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"sql.techEvent","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":5,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To sql.techEvent","outputConnectors":[{"name":"Out"}],"width":175,"x":1014.015380859375,"y":204.91868591308594},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples: \n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {      \n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    payload.__sql = {\n        query: query(payload),\n        time: moment(payload.date).valueOf()\n    };\n    return payload;\n    \n    function query(payload) {\n        return `\ninsert into ve_tv_techEvent (\n\teventCode1\n\t,eventCode2\n\t,machineId\n\t,actionTypeId\n\t,taskTypeId\n\t,playerId\n\t,amount\n\t,location\n\t,eventDesc\n\t,transDate\n\t,staffId\n\t,loggedAt\n\t,siteid\n) values (\n    ${payload.eventCode1}\n    ,${payload.eventCode2}\n    ,${payload.mnum}\n    ,${payload.actionTypeId}\n    ,${payload.taskTypeId}\n    ,${payload.playerId}\n    ,${payload.amount}\n    ,'${payload.location}'\n    ,'${payload.description}'\n    ,'${moment(payload.date).format('YYYY-MM-DD HH:mm:ss.SSS')}'\n    ,${payload.staffId}\n    ,getDate()\n    ,${payload.siteId}\n);\n`;\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":6,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Add query","outputConnectors":[{"name":"Out"}],"width":175,"x":770.5076904296875,"y":203.9593505859375},{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":7,"inputConnectors":[],"invalid":false,"name":"5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":321.5076904296875,"y":202.47967529296875},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"date","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    e.date\n\t,e.transDate\n\t,e.mnum\n\t,e.eventCode1\n\t,e.eventCode2\n\t,e.description\n\t,e.amount\n\t,e.playerId\n\t,e.staffId\n\t,e.location\n\t,e.siteId\n\t,e.actionTypeId\n\t,e.taskTypeId\nfrom ve_vw_tv_event e with (noLock)\nwhere date > '{{delta}}'\nand e.IsSubscribed = 1\nand e.actionTypeId = 13\norder by date desc\t   ","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":8,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select tech events","outputConnectors":[{"name":"Out"}],"width":175,"x":548.5076904296875,"y":203.47967529296875}]},"id":"fca4d19b-4b37-49c0-b094-a67689baac9f","lastUpdated":"2019-01-31T01:13:21.441Z","name":"16-01 Tech Events - Get events","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":41},{"dateCreated":"2017-11-26T21:17:26.642Z","definition":{"components":{"db-ms-sql16":{"config":{"cacheResults":false,"cacheTTL":1800,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_Task_Response',\n    'Viz_Alert_Tech_Task_Response',\n    'Viz_Alert_Urgency_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"timestamp","split":false},"name":"Select app prefs","type":"db-ms-sql"},"db-ms-sql9":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","expression":"select\n    _ID\n    ,isTechTask\n    ,taskStatusID\n    ,taskUrgency\n    ,userID\n    ,location\n    ,datediff(ss, taskcreated, current_timestamp) as elapsedTime\n    ,siteID\nfrom ve_vw_tv_task\nwhere taskstatusid not in (12, 13)\nand (taskResponded is null or taskurgency = 1)\norder by taskcreated asc","expressionType":"RETRIEVE_DATA","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":false},"name":"Select open tasks","type":"db-ms-sql"},"rabbitmq-producer5":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"task.update","ttl":9500},"name":"To task.update","type":"rabbitmq-producer"},"splitter13":{"config":{},"name":"Splitter","type":"splitter"},"time1":{"config":{"format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":10000},"name":"10 seconds","type":"time"},"transform11":{"config":{"expression":"function() {\n    var newPayload = payload.__input;\n    newPayload.tasks = payload.data;\n    return newPayload;\n}","variables":""},"name":"Tidy 2","type":"transform"},"transform12":{"config":{"expression":"function() {\r\n\tvar tasks = payload.tasks;\r\n\tvar alertTaskResponse = payload.appPrefs.alertTaskResponse;\r\n\tvar alertTechTaskResponse = payload.appPrefs.alertTechTaskResponse;\r\n\r\n\tvar result = [];\r\n\r\n\tfunction getUrgency(task, alertResponse) {\r\n\t\tif (task.taskUrgency === 0 && task.userID === null) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 1 && task.userID !== null) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif ((task.taskUrgency === 0 || task.taskUrgency === 1) && task.elapsedTime > (alertResponse.value - variables.warning)) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 2 && task.elapsedTime > alertResponse.value) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 3 && task.elapsedTime > alertResponse.escalateSupervisor) {\r\n\t\t\treturn 4;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 4 && task.elapsedTime > alertResponse.escalateManager) {\r\n\t\t\treturn 5;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfor (var i = 0; i < tasks.length; i++) {\r\n\t\tvar newTaskUrgency = null;\r\n\r\n\t\tif (!tasks[i].isTechTask) {\r\n\t\t\tnewTaskUrgency = getUrgency(tasks[i], alertTaskResponse);\r\n\t\t}\r\n\t\tif (tasks[i].isTechTask) {\r\n\t\t\tnewTaskUrgency = getUrgency(tasks[i], alertTechTaskResponse);\r\n\t\t}\r\n\t\tif (newTaskUrgency !== null) {\r\n\t\t\tvar assigned = {};\r\n\t\t\tassigned.siteID = tasks[i].siteID;\r\n\t\t\tassigned.timestamp = payload.timestamp;\r\n\t\t\tassigned.appPrefs = payload.appPrefs;\r\n\t\t\tassigned.flag = payload.flag;\r\n\t\t\tassigned.routingKey = payload.routingKey;\r\n\r\n\t\t\tassigned.task = tasks[i];\r\n\t\t\tassigned.task.newTaskUrgency = newTaskUrgency;\r\n\r\n\t\t\tresult.push(assigned);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}","variables":"{\n    \"warning\":30\n}\n\n"},"name":"Assign urgency","type":"transform"},"transform14":{"config":{"expression":"function() {\n    payload.flag = \"URGENCY\";\n    return payload;\n}","variables":""},"name":"Set flag","type":"transform"},"transform17":{"config":{"expression":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","variables":""},"name":"Tidy 1","type":"transform"}},"links":[{"from":"db-ms-sql9","to":"transform11"},{"from":"transform11","to":"transform12"},{"from":"transform12","to":"splitter13"},{"from":"splitter13","to":"transform14"},{"from":"transform14","to":"rabbitmq-producer5"},{"from":"db-ms-sql16","to":"transform17"},{"from":"transform17","to":"db-ms-sql9"},{"from":"time1","to":"db-ms-sql16"}]},"description":"<div><!--block-->==&gt; task.update</div>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":11},"source":{"connectorIndex":0,"nodeID":9}},{"dest":{"connectorIndex":0,"nodeID":12},"source":{"connectorIndex":0,"nodeID":11}},{"dest":{"connectorIndex":0,"nodeID":13},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":14},"source":{"connectorIndex":0,"nodeID":13}},{"dest":{"connectorIndex":0,"nodeID":5},"source":{"connectorIndex":0,"nodeID":14}},{"dest":{"connectorIndex":0,"nodeID":17},"source":{"connectorIndex":0,"nodeID":16}},{"dest":{"connectorIndex":0,"nodeID":9},"source":{"connectorIndex":0,"nodeID":17}},{"dest":{"connectorIndex":0,"nodeID":16},"source":{"connectorIndex":0,"nodeID":1}}],"name":"9 I [Urgency] Get Tasks [Out:TaskUrgency]","nodes":[{"color":"#9ba8b0","component":{"description":"Sends messages to a RabbitMQ","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"task.update","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":9500,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":5,"inputConnectors":[{"name":""}],"name":"To task.update","outputConnectors":[{"name":"Out"}],"width":175,"x":705.3692128658295,"y":203.03187942504883},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    _ID\n    ,isTechTask\n    ,taskStatusID\n    ,taskUrgency\n    ,userID\n    ,location\n    ,datediff(ss, taskcreated, current_timestamp) as elapsedTime\n    ,siteID\nfrom ve_vw_tv_task\nwhere taskstatusid not in (12, 13)\nand (taskResponded is null or taskurgency = 1)\norder by taskcreated asc","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":9,"inputConnectors":[{"name":""}],"name":"Select open tasks","outputConnectors":[{"name":"Out"}],"width":175,"x":-414.8267538547516,"y":197.1163787841797},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    var newPayload = payload.__input;\n    newPayload.tasks = payload.data;\n    return newPayload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":11,"inputConnectors":[{"name":""}],"name":"Tidy 2","outputConnectors":[{"name":"Out"}],"width":175,"x":-205.5508270263672,"y":198.84718322753906},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\r\n\tvar tasks = payload.tasks;\r\n\tvar alertTaskResponse = payload.appPrefs.alertTaskResponse;\r\n\tvar alertTechTaskResponse = payload.appPrefs.alertTechTaskResponse;\r\n\r\n\tvar result = [];\r\n\r\n\tfunction getUrgency(task, alertResponse) {\r\n\t\tif (task.taskUrgency === 0 && task.userID === null) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 1 && task.userID !== null) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif ((task.taskUrgency === 0 || task.taskUrgency === 1) && task.elapsedTime > (alertResponse.value - variables.warning)) {\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 2 && task.elapsedTime > alertResponse.value) {\r\n\t\t\treturn 3;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 3 && task.elapsedTime > alertResponse.escalateSupervisor) {\r\n\t\t\treturn 4;\r\n\t\t}\r\n\t\tif (task.taskUrgency === 4 && task.elapsedTime > alertResponse.escalateManager) {\r\n\t\t\treturn 5;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfor (var i = 0; i < tasks.length; i++) {\r\n\t\tvar newTaskUrgency = null;\r\n\r\n\t\tif (!tasks[i].isTechTask) {\r\n\t\t\tnewTaskUrgency = getUrgency(tasks[i], alertTaskResponse);\r\n\t\t}\r\n\t\tif (tasks[i].isTechTask) {\r\n\t\t\tnewTaskUrgency = getUrgency(tasks[i], alertTechTaskResponse);\r\n\t\t}\r\n\t\tif (newTaskUrgency !== null) {\r\n\t\t\tvar assigned = {};\r\n\t\t\tassigned.siteID = tasks[i].siteID;\r\n\t\t\tassigned.timestamp = payload.timestamp;\r\n\t\t\tassigned.appPrefs = payload.appPrefs;\r\n\t\t\tassigned.flag = payload.flag;\r\n\t\t\tassigned.routingKey = payload.routingKey;\r\n\r\n\t\t\tassigned.task = tasks[i];\r\n\t\t\tassigned.task.newTaskUrgency = newTaskUrgency;\r\n\r\n\t\t\tresult.push(assigned);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"{\n    \"warning\":30\n}\n\n","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":12,"inputConnectors":[{"name":""}],"name":"Assign urgency","outputConnectors":[{"name":"Out"}],"width":175,"x":24.95973300933838,"y":202.1640853881836},{"color":"#9ba8b0","component":{"description":"Splits an array into individual messages","name":"Splitter","properties":[],"type":"splitter"},"icon":"./assets/vizflow/components/splitter.svg","id":13,"inputConnectors":[{"name":""}],"name":"Splitter","outputConnectors":[{"name":"Out"}],"width":175,"x":247.74494075775146,"y":201.8190155029297},{"color":"#9ba8b0","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"function() {\n    payload.flag = \"URGENCY\";\n    return payload;\n}","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":14,"inputConnectors":[{"name":""}],"name":"Set flag","outputConnectors":[{"name":"Out"}],"width":175,"x":476.4879217147827,"y":202.0478973388672},{"color":"#9ba8b0","component":{"description":"Use the MSSql DB component to connect into a microsoft sql server and make queries.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"timestamp","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":false,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"select\n    name as name,\n    value as value,\n    escalate_supervisor as escalateSupervisor,\n    escalate_manager as escalateManager\nfrom ve_vw_tv_applicationpreference\nwhere name in (\n    'Viz_Alert_Task_Response',\n    'Viz_Alert_Tech_Task_Response',\n    'Viz_Alert_Urgency_Enabled',\n    'Viz_Default_Tech_Task_Enabled'\n    )","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":1800,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":16,"inputConnectors":[{"name":""}],"name":"Select app prefs","outputConnectors":[{"name":"Out"}],"width":175,"x":-851.5930671691895,"y":194.05140686035156},{"color":"#9ba8b0","component":{"description":"A timer that dispatches an event in an time interval","name":"Timer","properties":[{"defaultValue":10000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":1,"inputConnectors":[],"name":"10 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":-1067.8035621643066,"y":198.78352737426758},{"color":"#ff0000","component":{"description":"Component to transform the payload in a new data structure. In this transformation is possible to add attributes and values","name":"Transform","properties":[{"defaultValue":"(function() {\n    var appPrefs = {};\n    \n    for (var i = 0; i < payload.count; i++) {\n        var pref = payload.data[i];\n        var name = pref.name.substring(4);\n        name = name.charAt(0).toLowerCase()\n            + name.substring(1).replace(/_/g, \"\");\n        appPrefs[name] = {};\n        appPrefs[name].value = pref.value;\n        appPrefs[name].escalateSupervisor = pref.escalateSupervisor;\n        appPrefs[name].escalateManager = pref.escalateManager;\n    }\n    var newPayload = {};\n    newPayload.timestamp = payload.timestamp;\n    newPayload.appPrefs = appPrefs;\n    newPayload.flag = null;\n    newPayload.routingKey = null;\n    return newPayload;\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":17,"inputConnectors":[{"name":""}],"name":"Tidy 1","outputConnectors":[{"name":"Out"}],"width":175,"x":-624.9275932312012,"y":197.05142211914062}],"viewBox":[82,-270,1,1317]},"id":"fd597a81-edea-412e-be46-ffdcb0ff9289","lastUpdated":"2018-11-28T02:45:59.934Z","name":"09-01 Task Urgency","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":12},{"dateCreated":"2019-08-23T03:34:55.703Z","definition":{"components":{"db-ms-sql10":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"SELECT DeviceID\r\n\t,UserID\r\nFROM (\r\n\tSELECT DeviceID\r\n\t\t,UserID\r\n\t\t,row_number() OVER (\r\n\t\t\tPARTITION BY UserID ORDER BY UpdatedTimestamp DESC\r\n\t\t\t) AS DeviceRank\r\n\tFROM [dbo].[VE_VW_tv_Device]\r\n\tWHERE updatedtimestamp > getdate() - 1\r\n\t) t\r\nWHERE t.DeviceRank = 1\r\n","expressionType":"RETRIEVE_DATA","filterEmptyResult":true,"includeInputInResult":false,"inputNamespace":"__input","split":true},"name":"Select Device","type":"db-ms-sql"},"db-ms-sql25":{"config":{"cacheResults":false,"cacheTTL":0,"connectionConfiguration":"59bed221-95eb-47b6-a7c6-ec77baf85576","deltaDateColumn":"","deltaDateFormat":"YYYY-MM-DD HH:mm:ss.SSS","deltaStartUtcOffset":"","errorHandling":"","expression":"SELECT [SectionList]\r\n      \r\n  FROM [dbo].[VE_MV_tv_SectionList]\r\n \r\n \r\n where \r\n userid = '{{payload.UserID}}'","expressionType":"","filterEmptyResult":false,"includeInputInResult":true,"inputNamespace":"__input","split":true},"name":"Select User Sections","type":"db-ms-sql"},"filter24":{"config":{"errorHandling":"","expression":"(function() {\n\treturn true;\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Filter","type":"filter"},"rabbitmq-producer22":{"config":{"connectionConfiguration":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","durableExchange":true,"errorHandling":"","exchange":"techViz","exchangeType":"topic","persistentMessage":true,"routingKey":"mobile.sectionlist.{{payload.DeviceID}}","ttl":0},"name":"To mobile.sectionlist.{{DeviceID}}","type":"rabbitmq-producer"},"time12":{"config":{"errorHandling":"","format":"YYYY-MM-DDTHH:mm:ss.SSSZ","interval":5000},"name":"Every 5 seconds","type":"time"},"transform23":{"config":{"errorHandling":"","expression":"(function() {\n    \n    // payload.timestamp = backToUTC(payload.timestamp);\n    // payload.taskAssigned = backToUTC(payload.taskAssigned);\n    // payload.taskCreated = backToUTC(payload.taskCreated);\n    \n    return payload;\n    \n    function backToUTC(date) {\n        let momentDate = moment(date);\n        let offsetMinutes = momentDate.utcOffset();\n        momentDate.utc().add(offsetMinutes,'minutes');\n        return momentDate.toDate();\n    }\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Dates Back to UTC","type":"transform"},"transform26":{"config":{"errorHandling":"","expression":"(function() {\n\tnewpayload = payload.__input\n\tnewpayload.SectionList = payload.SectionList\n\treturn newpayload\n})();","globalFunctionConfiguration":[],"variables":""},"name":"Format Payload","type":"transform"}},"links":[{"from":"time12","to":"db-ms-sql10"},{"from":"filter24","to":"rabbitmq-producer22"},{"from":"db-ms-sql10","to":"db-ms-sql25"},{"from":"db-ms-sql25","to":"transform23"},{"from":"transform23","to":"transform26"},{"from":"transform26","to":"filter24"}]},"description":"<div><!--block-->Queues</div><ul><li><!--block-->Out:<ul><li><!--block-->mobile.task.&lt;deviceID&gt;</li><li><pre><!--block-->{\n    deviceID,\n    action,\n    timestamp,\n    _ID,\n    userID,\n    prevUserID,\n    taskAssigned,\n    taskCreated,\n    taskStatusID,\n    taskTypeID,\n    eventDesc,\n    location,\n    machineID,\n    amount,\n    playerID,\n    firstName,\n    lastName,\n    tier,\n    tierColorHex\n}</pre></li></ul></li></ul><div><!--block-->Notes</div><ul><li><!--block-->every x seconds (1 - 5) select tasks which have recently been updated/created/deleted (inner join on tasklog table - may have to add oldUserID column to table), select devices corresponding to users (see example query below)</li><li><pre><!--block-->select t.* from [dbo].[VE_tv_Task] t\nwhere t._ID in(\n\tselect _ID from\t[dbo].[VE_tv_TaskLog]\n\twhere [Timestamp]  &gt; '2018-07-31 06:50:03.483'\n)</pre></li><li><!--block-->may want to send payload to another generic flow to add the device ids and then split (allows this logic to be reused)</li></ul>","flowData":{"connections":[{"dest":{"connectorIndex":0,"nodeID":10},"source":{"connectorIndex":0,"nodeID":12}},{"dest":{"connectorIndex":0,"nodeID":22},"source":{"connectorIndex":0,"nodeID":24}},{"dest":{"connectorIndex":0,"nodeID":25},"name":"Strawberry Jam","source":{"connectorIndex":0,"nodeID":10}},{"dest":{"connectorIndex":0,"nodeID":23},"source":{"connectorIndex":0,"nodeID":25}},{"dest":{"connectorIndex":0,"nodeID":26},"source":{"connectorIndex":0,"nodeID":23}},{"dest":{"connectorIndex":0,"nodeID":24},"source":{"connectorIndex":0,"nodeID":26}}],"nodes":[{"color":"#9ba8b0","component":{"metadata":"# Timer\n\nThe component repeatedly sends the formatted timestamp to the next components with a fixed time delay between each sending.\n\n## Configurations\n\n### Interval\n\nTime in milliseconds that the component should delay to send the timestamp.\n\n### Format\n\nThe format used to display the timestamp.\nSee <a href='https://momentjs.com/docs/#/displaying/format/' target='_blank'>documentation here</a>.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nThe starter component's error handling is responsible for handling the errors happened in the component itself and errors that occurred in downstream (unless processed by their origin component).\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\nBy default, the error handling configuration is disabled. It means that any errors sent to the starter will cause the flow to stop.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n\n## Output\n\nThe output is a string of the formatted timestamp.\n","name":"Timer","properties":[{"defaultValue":5000,"description":"Sets the interval values (in miliseconds)","name":"interval","type":"number","validators":{"required":true}},{"defaultValue":"YYYY-MM-DDTHH:mm:ss.SSSZ","description":"Defines the format of the date. For more info look at http://momentjs.com/docs/#/parsing/string-format/","name":"format","type":"text","validators":{"required":true}},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"time"},"icon":"./assets/vizflow/components/time.svg","id":12,"inputConnectors":[],"invalid":false,"name":"Every 5 seconds","outputConnectors":[{"name":"Out"}],"width":175,"x":277.7501525878906,"y":-91.5404281616211},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n    \n    // payload.timestamp = backToUTC(payload.timestamp);\n    // payload.taskAssigned = backToUTC(payload.taskAssigned);\n    // payload.taskCreated = backToUTC(payload.taskCreated);\n    \n    return payload;\n    \n    function backToUTC(date) {\n        let momentDate = moment(date);\n        let offsetMinutes = momentDate.utcOffset();\n        momentDate.utc().add(offsetMinutes,'minutes');\n        return momentDate.toDate();\n    }\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":23,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Dates Back to UTC","outputConnectors":[{"name":"Out"}],"width":175,"x":1094.1827392578125,"y":-158.92022705078125},{"color":"#9ba8b0","component":{"metadata":"## Filter\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a **Boolean** (i.e. true/false).\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\n\n```json\n {\n   \"foo\":\"bar\"\n }\n```\n\n```js\n (function() {\n      return variables.foo === 'bar';\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\n\n### Returns\n\nThe return should always be a Boolean.\n\n##### PS: In javascript **NaN**, **\"\"** (i.e empty strings), **false**, **null**, **undefined** and **0** are considered falsy values\n\n### Examples:\n\nAn example using Lodash to let pass through just payloads that have events in the list. We don't care for empty lists here.\n\n```js\n (function() {\n      return !_.isEmpty(payload.events);\n })();\n```\n\nAnother example using MomentJS to check date ranges.\n\n```js\n(function() {\n  const customDate = moment();\n  return customDate.isBefore(payload.eventDate);\n })();\n```\n","name":"Filter","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\treturn true;\n})();","description":"The expression should evaluate the message and return true or false","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"foo\": \"bar\", \"baz\": true }","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"filter"},"icon":"./assets/vizflow/components/filter.svg","id":24,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Filter","outputConnectors":[{"name":"Out"}],"width":175,"x":1436.4000244140625,"y":67.73440265655518},{"color":"#9ba8b0","component":{"metadata":"# RabbitMQ Producer\n\n## Configurations\n\n### Connection\n\nUse a configurated RabbitMQ connection to connect to the server.\n\n### Exchange\n\nThe name of the exchange. The component sends messages to exchanges, and exchanges route the messages into queues.\n\n### Exchange type\n\nThe routing algorithm used to route the messages.\n\n* Topic\n\n  Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange.\n\n* Fanout\n\n  A fanout exchange routes messages to all of the queues that are bound to it and the routing key is ignored.\n\n* Direct\n\n  A direct exchange delivers messages to queues based on the message routing key. A direct exchange is ideal for the unicast routing of messages.\n\n### Durable exchange\n\nThe exchange will survive broker restarts.\n\n### Persistent message\n\nA persistent message will be persisted to disk when the queue is durable. Thus the messages and the queue will survive during broker restarts.\n\n### Routing key\n\nThe routing key is used to select messages published to an exchange to be routed to the bound queue. In other words, the routing key acts like a filter.\nTemplating is supported here.\n\n### Ttl\n\nMessage Time to Live (in milliseconds). If zero, no TTL is applied.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Input\n\nThe input payload will be serialized to JSON then published to RabbitMQ server. Please make sure the input payload is serializable.\n\n## Output\n\nThe input payload will be sent to the next components directly.","name":"RabbitMQ Producer","properties":[{"connectionType":"rabbitmq","defaultValue":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","description":"Connection defined to gain access rabbitMQ server as consumer of a queue.","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"techViz","description":"exchange","name":"exchange","type":"text","validators":{"required":true}},{"defaultValue":"topic","description":"The routing algorithm used depends on the exchange type and rules called bindings. AMQP 0-9-1 brokers provide four exchange types: Topic(Default used by VizFlow), Fanout and Direct. More Details: https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges","name":"exchangeType","selectOptions":[{"label":"Topic","value":"topic"},{"label":"Fanout","value":"fanout"},{"label":"Direct","value":"direct"}],"type":"select","validators":{"required":true}},{"defaultValue":true,"description":"Exchanges survives broker restart. It is just related to the exchange. Default(true)","name":"durableExchange","type":"boolean"},{"defaultValue":true,"description":"Messages may be published as persistent, which makes the AMQP broker persist them to disk.If the server is restarted the system ensures that received persistent messages are not lost. Simply publishing a message to a durable exchange or the fact that the queue(s) it is routed to are durable doesn't make a message persistent","name":"persistentMessage","type":"boolean"},{"defaultValue":"mobile.sectionlist.{{payload.DeviceID}}","description":"routingKey","name":"routingKey","type":"text","validators":{"required":true}},{"defaultValue":0,"description":"Message Time to Live (in milliseconds). If zero, no TTL is applied","name":"ttl","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"rabbitmq-producer"},"icon":"./assets/vizflow/components/rabbitmq-producer.svg","id":22,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"To mobile.sectionlist.{{DeviceID}}","outputConnectors":[{"name":"Out"}],"width":175,"x":1659.179443359375,"y":113.07395935058594},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":false,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":true,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"RETRIEVE_DATA","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"SELECT DeviceID\r\n\t,UserID\r\nFROM (\r\n\tSELECT DeviceID\r\n\t\t,UserID\r\n\t\t,row_number() OVER (\r\n\t\t\tPARTITION BY UserID ORDER BY UpdatedTimestamp DESC\r\n\t\t\t) AS DeviceRank\r\n\tFROM [dbo].[VE_VW_tv_Device]\r\n\tWHERE updatedtimestamp > getdate() - 1\r\n\t) t\r\nWHERE t.DeviceRank = 1\r\n","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":10,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select Device","outputConnectors":[{"name":"Out"}],"width":175,"x":575.7557983398438,"y":41.91476058959961},{"color":"#9ba8b0","component":{"metadata":"# MS SQL\n\n## Configuration\n\n### Connection\n\nUse a configurated MS SQL connection to execute the SQL query.\n\n### Delta date column\n\nSpecify the column name from the retrieved records which will be used to generate a *delta* variable.\n\nThe component will update the value of the variable every time a newer record is retrieved from the database.\n\nThe variable is accessible as `{{delta}}` in *Expression*. It is useful for building a dynamic SQL query, for example, retrieving incremental data from the database.\n\n### Delta date format\n\nCustomize the date format of the *delta* variable.\n\n### Delta start utc offset\n\nAdd an offset to the *delta* variable.\n\n### Include input in result\n\nInclude the input payload into the output payload.\n\n### Input namespace\n\nCustomize the namespace of input in the output payload.\n\n### Split\n\nWhether or not split retrieved multiple records from the database into separate messages. When the query in *Expression* is used to update data, this configuration will be ignored.\n\n### Filter empty result\n\nWhether or not emit a message to next component when there is no record retrieved from the database.\n\n### Expression type\n\nSpecify the query type for the *Expression*. The component will detect the type automatically when it is not selected.\n\n### Expression\n\nThe SQL Query to be executed on the database. Templating is supported in this configuration. An extra variable *delta* can be accessed from templating when *Delta date column* is configured.\n\n### Cache results\n\nCache SQL Query results. This configuration will be ignored when *Expression* is not used for retrieving data.\n\n### Cache ttl\n\nTime-to-live for the cached results, use the configuration to limit the lifespan of cached results.\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n## Output for a query to retrieve data\n\n* When the *Split* configuration is enabled, the output is an object of retrieved record.\n\nExample:\n\n```javascript\n{\n  Date: \"2018-10-24T00:45:31.983Z\",\n  Mnum: 17885,\n  UniqueID: 5903056,\n  TaskTypeID: 11,\n  TaskTypeDescription: \"VIP Greet\",\n  ActionTypeID: 3\n}\n```\n\n* When the *Split* configuration is disabled, the output is an object that contains a property *data* which is an array of records, and a *count* property indicates the number of records.\n\nExample:\n\n```javascript\n{\n  data: [{\n    Date: \"2018-10-24T00:45:31.983Z\",\n    Mnum: 17885,\n    UniqueID: 5903056,\n    TaskTypeID: 11,\n    TaskTypeDescription: \"VIP Greet\",\n    ActionTypeID: 3\n  }, {\n    Date: \"2018-10-24T00:45:32.163Z\",\n    Mnum: 19098,\n    UniqueID: 5901190,\n    TaskTypeID: 16,\n    TaskTypeDescription: \"Bill Validator Not Accepting\",\n    ActionTypeID: 4\n  }],\n  count: 2\n}\n```\n\n## Output for a query to update data\n\nWhen used for updating data, the output payload is identical to the input payload.","name":"MS SQL","properties":[{"connectionType":"db-ms-sql","defaultValue":"59bed221-95eb-47b6-a7c6-ec77baf85576","description":"Connection defined to access to the MS-SQL database","name":"connectionConfiguration","type":"connection","validators":{"required":true}},{"defaultValue":"","description":"Date Column to calculate delta","name":"deltaDateColumn","type":"text"},{"defaultValue":"YYYY-MM-DD HH:mm:ss.SSS","description":"Date Column to calculate delta","name":"deltaDateFormat","type":"text"},{"defaultValue":"","description":"Initial offset, e.g. +08:00","name":"deltaStartUtcOffset","type":"text"},{"defaultValue":true,"description":"Includes the payload in the response","name":"includeInputInResult","type":"boolean"},{"defaultValue":"__input","description":"Includes the payload in the response as a field","name":"inputNamespace","type":"text"},{"defaultValue":true,"description":"If the result is an array it will split the result into separated messages","name":"split","type":"boolean"},{"defaultValue":false,"description":"Filter when the result is empty avoiding to pass forward","name":"filterEmptyResult","type":"boolean"},{"defaultValue":"","description":"Expression Type","name":"expressionType","selectOptions":[{"label":"","value":""},{"label":"Query to retrieve data","value":"RETRIEVE_DATA"},{"label":"Query to update data","value":"UPDATE_DATA"}],"type":"select"},{"defaultValue":"SELECT [SectionList]\r\n      \r\n  FROM [dbo].[VE_MV_tv_SectionList]\r\n \r\n \r\n where \r\n userid = '{{payload.UserID}}'","description":"Write sql commands to be evaluated.","name":"expression","type":"sqlserver","validators":{"required":true}},{"defaultValue":false,"description":"Enable the cache of results. It uses the SQL expression as key. Given a SQL expression, it tries to retrieve from the cache first otherwise it goes to the database.","name":"cacheResults","type":"boolean"},{"defaultValue":0,"description":"Cache entry time-to-live. The amount of time in seconds to expire a cache entry. The cache of results must be enabled to TTL takes effect. If no TTL or zero is informed the cache won't expire","name":"cacheTTL","type":"number"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"db-ms-sql"},"icon":"./assets/vizflow/components/db-ms-sql.svg","id":25,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Select User Sections","outputConnectors":[{"name":"Out"}],"width":175,"x":817.5269165039062,"y":-92.01187229156494},{"color":"#9ba8b0","component":{"metadata":"## Transform\n\n### Global function configuration\n\nAdd *Global Function* to the component. Each *Global Function* is a namespace which contains several reusable functions.\nThe functions can be later accessed in the *expression* box via the `vizflow` global object.\n\n* binding\n\n  Define the property name on the global `vizflow` object that a *Global Function* namespace will be binded.\n\n  For example:\n  We bind a namespace to `util`, then at the *Expression* box, you can access the namespace using `vizflow.util`;\n\n### Expression Box\n\nEditor where you can write your logic to define the outputs. The return should always be a list of values **[]**.\n\n### Variables\n\nIt follows JSON syntax. Once you define, it will be available for you inside the Expression box using the word **variables**.\nSo if inside the variables box you define something like:\n\n```json\n {\n   \"ID\":10\n }\n```\n\nYou can use inside the expression box like that:\n\n```js\n (function() {\n      if(payload.id === variables.ID) {\n         return [null, payload];\n      } else {\n         return [payload , null];\n      }\n })();\n```\n\n### Error handling\n<details>\n<summary>Expand</summary>\n\nBy default, an error happens in the component will be sent to the starter component and handled according to the starter's error handling mechanism.\n\nYou can enable the error handling at the component level to get more granular control of the errors happens in the component.\n\nThere are two kinds of error handling mechanisms:\n\n* Ignore\n\n  Ignore the error.\n\n* Handle\n\n  Switch on the *Error Output* on the component, and send every *Error Object* to the *Error Output*.\n\n#### Error Object\n\nError Object is a plain object which contains the metadata of the error. Its format is something like:\n\n```json\n{\n  \"name\": \"Error\",\n  \"message\": \"Error message\",\n  \"inputPayload\": \"input payload\",\n  \"componentMeta\": {\n    \"key\": \"transform1\",\n    \"type\": \"transform\",\n    \"name\": \"Convert data\"\n  }\n}\n```\n\n* name\n\n  The name of the original error object, it usually will just be `Error`, but can be something else, for example, `SyntaxError`.\n\n* message\n\n  It is the error message of the original error object.\n\n* inputPayload\n\n  The input payload that the component was processing when the error happened.\n\n* componentMeta\n\n  The metadata of the component:\n\n    * key\n\n      The unique identity of the component.\n\n    * type\n\n      The type of the component.\n\n    * name\n\n      The name of the component.\n\n#### Error Output\n\nError Output is similar to the normal output but only for handling errors.\n\nHence you can link other components to the error output to handle the *Error Object*.\n\nFor example, link a *Log* component to send the error to logging, or connect a *Mail Sender* to send an email.\n\nWhen the *Error Output* is switched on but nothing linked to it,\n\nthe errors will still be processed by the starter's error handling mechanism.\n</details>\n\n### Available Helpers\nThere are some special libraries available to be used inside the editor to collaborate and help you. Probably it provides\nso much that you hardly will need anything else. Take a look in the documentation to see the available functions for you.\n\n* Lodash <a href='https://lodash.com/docs/4.17.10' target='_blank'>Documentation Here</a>\n    * Lodash is available using the underscore symbol **_**\n* Moment <a href='http://momentjs.com/docs/' target='_blank'>Documentation Here</a>\n    * Moment is available using the word **moment**\n* UUID <a href='https://www.npmjs.com/package/uuid' target='_blank'>Documentation Here</a>\n    * UUID is available using the word **uuid**\n\nYou can see how to access and use them in the examples below.\n\n### Returns\n\nWell, with this one you can return basically anything. Whatever you return will be passed to the next component.\n\n### Examples:\n\nI don't want to return the whole payload I just want to return a list of event ids.\n\n```js\n (function() {\n      return payload.events.map(evt => evt.id);\n })();\n```\n","name":"Transform","properties":[{"defaultValue":[],"description":"Global Functions to be used in the JavaScript Expression box. Optional","name":"globalFunctionConfiguration","type":"global-function"},{"defaultValue":"(function() {\n\tnewpayload = payload.__input\n\tnewpayload.SectionList = payload.SectionList\n\treturn newpayload\n})();","description":"A function that manipulates and returns a new data structure","name":"expression","type":"javascript","validators":{"required":true}},{"defaultValue":"","description":"Variable bindings as a JSON object, e.g., { \"status\": \"new\"}","name":"variables","type":"javascript"},{"defaultValue":"","description":"How the component behave when error occurs","name":"errorHandling","selectOptions":[{"label":"Ignore","value":"ignore"},{"label":"Handle","value":"handle"}],"transient":true,"type":"select"}],"type":"transform"},"icon":"./assets/vizflow/components/transform.svg","id":26,"inputConnectors":[{"name":"In"}],"invalid":false,"name":"Format Payload","outputConnectors":[{"name":"Out"}],"width":175,"x":1272.9129638671875,"y":-47.152944564819336}]},"id":"f8d3844b-83e2-4ab0-ac6f-601744621348","lastUpdated":"2019-09-04T23:50:52.659Z","name":"M-11 User Sections","projectId":"b8a4551d-cca5-4d62-855a-aa705237be5f","type":"async","version":3}],"connections":[{"connectTimeout":15000,"database":"","dateCreated":"2017-08-16T03:09:06.458Z","domain":"","id":"59bed221-95eb-47b6-a7c6-ec77baf85576","instanceName":"","lastUpdate":"2017-05-17T22:08:23.643Z","lastUpdated":"2019-03-10T21:38:20.876Z","name":"TechViz Database","password":"","poolMax":3,"poolMin":1,"port":1433,"requestTimeout":30000,"server":"","type":"db-ms-sql","useUTC":false,"userName":"","version":33},{"dateCreated":"2017-07-25T04:39:51.835Z","failAfter":120,"host":"","id":"4e6d21c6-4c07-4b29-9c05-9bb0d5746ab7","lastUpdate":"2016-08-24T01:48:20.867Z","lastUpdated":"2019-02-28T02:45:38.756Z","name":"Internal RabbitMQ","password":"","port":5672,"retryLimit":100,"type":"rabbitmq","username":"","version":19,"vhost":""},{"dateCreated":"2017-08-16T03:09:23.063Z","host":"","id":"a2736cb8-2cc0-4e2f-8680-67cbebe677df","ignoreTLS":true,"lastUpdate":"2016-09-21T03:07:28.778Z","lastUpdated":"2019-02-27T00:40:22.131Z","name":"TechViz SMTP","password":"","port":465,"secure":true,"type":"mail-smtp","username":"","version":8}],"assets":[],"globalFunctions":[]}}